describe("Ext.direct.RemotingMethod",function(){var A=jasmine.createSpy("callback"),C={timeout:10},D;function B(E){D=new Ext.direct.RemotingMethod(E||{})}describe("Ordered parameters",function(){beforeEach(function(){B({name:"foo",len:2})});it("should instantiate",function(){expect(D).toBeDefined()});it("should set ordered property",function(){expect(D.ordered).toBe(true)});it("should return call data",function(){var E=D.getCallData(["foo","bar",A,D,C]);expect(E).toEqual({data:["foo","bar"],callback:A,scope:D,options:C})})});describe("Named parameters",function(){beforeEach(function(){B({name:"bar",params:["foo","bar"]})});it("should instantiate",function(){expect(D).toBeDefined()});it("should accept parameter names as array of strings",function(){expect(D.params).toEqual({foo:true,bar:true})});it("should accept parameter names as array of objects",function(){B({name:"baz",params:[{name:"foo"},{name:"bar"}]});expect(D.params).toEqual({foo:true,bar:true})});it("should return call data with less than specified params",function(){var E=D.getCallData([{foo:"foo"},A,D,C]);expect(E).toEqual({data:{foo:"foo"},callback:A,scope:D,options:C})});it("should filter out unspecified params",function(){B({name:"baz",params:["foo"]});var E=D.getCallData([{foo:"bar",bar:"qux"},A,D,C]);expect(E).toEqual({data:{foo:"bar"},callback:A,scope:D,options:C})});it("should not filter params with strict: false",function(){B({name:"blerg",params:[],strict:false});var E=D.getCallData([{foo:"bar",qux:"fred"},A,D,C]);expect(E).toEqual({data:{foo:"bar",qux:"fred",},callback:A,scope:D,options:C})})})});