xdescribe("Ext.event.publisher.Dom",function(){var C=Ext.event.publisher.Dom,A,B;describe("members",function(){beforeEach(function(){A=new C()});describe("hasSubscriber()",function(){it("should return false by default",function(){A.hasSubscriber("#test","keydown");expect(A.hasSubscriber("#test","keydown")).toBe(false)})});describe("getSubscribersCount()",function(){it("should return 0 by default",function(){expect(A.getSubscribersCount("click")).toBe(0)})});describe("subscribe()",function(){it("should return false for unknown event",function(){expect(A.subscribe("#test","unknown")).toBe(false)});it("should NOT return false for a known DOM event",function(){expect(A.subscribe("#test","keydown")).not.toBe(false)});it("should set the subscriber's flag to true for id",function(){A.subscribe("#test","keydown");expect(A.hasSubscriber("#test","keydown")).toBe(true)});it("should set the subscriber's flag to true for className",function(){A.subscribe(".test","keydown");expect(A.hasSubscriber(".test","keydown")).toBe(true)});describe("setting the subscriber's flag to true for selector",function(){it("should handle child selectors",function(){A.subscribe("div > ul > li","keydown");expect(A.hasSubscriber("div > ul > li","keydown")).toBe(true)});it("should handle id with child selectors",function(){A.subscribe("#test > ul > li","keydown");expect(A.subscribers.keydown.selector.length).toBe(1)});it("should handle pseudo selectors",function(){A.subscribe(".test:nth-child(1)","keydown");expect(A.subscribers.keydown.selector.length).toBe(1)})});it("should increment subscribers count",function(){A.subscribe(".foo","keydown");expect(A.getSubscribersCount("keydown")).toBe(1)});it("should NOT increment subscribers count if subscriber already exists",function(){A.subscribe(".foo","keydown");A.subscribe(".foo","keydown");A.subscribe("#foo","keydown");A.subscribe("#foo","keydown");A.subscribe("form > input","keyup");A.subscribe("form > input","keyup");expect(A.getSubscribersCount("keydown")).toBe(2);expect(A.getSubscribersCount("keyup")).toBe(1)})});describe("unsubcribe()",function(){it("should return false for unknown event",function(){expect(A.unsubscribe("#test","unknown")).toBe(false)});it("should NOT return false for a known DOM event",function(){expect(A.unsubscribe("#test","keydown")).not.toBe(false)});it("should remove the subscriber's flag for id",function(){A.subscribe("#test","keydown");expect(A.hasSubscriber("#test","keydown")).toBe(true);A.unsubscribe("#test","keydown");expect(A.hasSubscriber("#test","keydown")).toBe(false)});it("should remove the subscriber's flag for className",function(){A.subscribe(".test","keydown");expect(A.hasSubscriber(".test","keydown")).toBe(true);A.unsubscribe(".test","keydown");expect(A.hasSubscriber(".test","keydown")).toBe(false)});it("should remove the subscriber's flag for selector",function(){A.subscribe("div > span","keydown");expect(A.hasSubscriber("div > span","keydown")).toBe(true);A.unsubscribe("div > span","keydown");expect(A.hasSubscriber("div > span","keydown")).toBe(false)});it("should decrement subscribers count",function(){A.subscribe(".foo","keydown");expect(A.getSubscribersCount("keydown")).toBe(1);A.unsubscribe(".foo","keydown");expect(A.getSubscribersCount("keydown")).toBe(0)});it("should NOT decrement subscribers count if subscriber no longer exists",function(){A.subscribe("form > input","keyup");expect(A.getSubscribersCount("keyup")).toBe(1);A.unsubscribe("form > input","keyup");A.unsubscribe("form > input","keyup");expect(A.getSubscribersCount("keyup")).toBe(0)})});describe("onEvent()",function(){var E,D=document.createElement("div");D.innerHTML='<div class="test foo     bar test   bar"><span id="span1" class="test"><button id="button1">Button 1</button><button id="button2">Button 2</button><input id="input1" name="input1" class="input" /></span><span id="span2" class="test"><button id="button3">Button 3</button><button id="button4" class="foo   foo">Button 4</button></span></div>';beforeEach(function(){E={doDispatchEvent:function(){}};A.setDispatcher(E);spyOn(E,"doDispatchEvent");spyOn(A,"matchesSelector")});describe("id",function(){it("should NOT invoke dispatcher's doDispatchEvent() at all if no subscriber matches the event's target",function(){A.subscribe("#button1","click");A.onEvent({type:"click",target:D.getElementsByTagName("button")[1]});expect(E.doDispatchEvent).not.toHaveBeenCalled()});it("should invoke dispatcher's doDispatchEvent() with target #button1",function(){var F={type:"keydown",target:D.getElementsByTagName("button")[0].childNodes[0]};A.subscribe("#button1","keydown");A.onEvent(F);expect(E.doDispatchEvent.callCount).toBe(1);var G=E.doDispatchEvent.mostRecentCall.args;expect(G[0]).toBe("element");expect(G[1]).toBe("#button1");expect(G[2]).toBe("keydown");expect(G[3][0] instanceof Ext.event.Event).toBe(true);expect(G[3][0].browserEvent).toBe(F)});it("should NOT bubble with id and 'focus' event",function(){var F={type:"focus",target:D.getElementsByTagName("input")[0]};A.subscribe("#input1","focus");A.subscribe("#span1","focus");A.onEvent(F);expect(E.doDispatchEvent.callCount).toBe(1)})});describe("className",function(){it("should NOT invoke dispatcher's doDispatchEvent() at all if no subscriber matches the event's target",function(){A.subscribe(".unknown","click");A.onEvent({type:"keydown",target:D.getElementsByTagName("button")[1]});expect(E.doDispatchEvent).not.toHaveBeenCalled()});it("should invoke dispatcher's doDispatchEvent() with for multiple UNIQUE class names",function(){var G={type:"keydown",target:D.getElementsByTagName("button")[3].childNodes[0]};A.subscribe(".test","keydown");A.subscribe(".foo","keydown");A.subscribe(".bar","keydown");A.onEvent(G);var F=E.doDispatchEvent.calls,H;H=F[0].args;expect(H[0]).toBe("element");expect(H[1]).toBe(".foo");expect(H[2]).toBe("keydown");expect(H[3][0] instanceof Ext.event.Event).toBe(true);expect(H[3][0].browserEvent).toBe(G)});it("should NOT bubble with className and 'keydown' event",function(){var F={type:"keydown",target:D.getElementsByTagName("input")[0]};A.subscribe(".input","keydown");A.subscribe(".test","keydown");A.onEvent(F);expect(E.doDispatchEvent.callCount).toBe(1);var G=E.doDispatchEvent.mostRecentCall.args;expect(G[0]).toBe("element");expect(G[1]).toBe(".input");expect(G[2]).toBe("keydown");expect(G[3][0] instanceof Ext.event.Event).toBe(true);expect(G[3][0].browserEvent).toBe(F)})})})})});