describe("Ext.util.Inflector",function(){var A=Ext.util.Inflector;var B={bus:"buses",word:"words",tomato:"tomatoes",potato:"potatoes",person:"people",alumnus:"alumni",cactus:"cacti",focus:"foci",nucleus:"nuclei",radius:"radii",stimulus:"stimuli",axis:"axes",analysis:"analyses",basis:"bases",crisis:"crises",diagnosis:"diagnoses",ellipsis:"ellipses",hypothesis:"hypotheses",oasis:"oases",paralysis:"paralyses",parenthesis:"parentheses",synthesis:"syntheses",synopsis:"synopses",thesis:"theses",appendix:"appendices",index:"indexes",matrix:"matrices",beau:"beaux",bureau:"bureaux",tableau:"tableaux",child:"children",man:"men",ox:"oxen",woman:"women",bacterium:"bacteria",corpus:"corpora",criterion:"criteria",curriculum:"curricula",datum:"data",genus:"genera",medium:"media",memorandum:"memoranda",phenomenon:"phenomena",stratum:"strata",deer:"deer",fish:"fish",means:"means",offspring:"offspring",series:"series",sheep:"sheep",species:"species",foot:"feet",goose:"geese",tooth:"teeth",antenna:"antennae",formula:"formulae",nebula:"nebulae",vertebra:"vertebrae",vita:"vitae",louse:"lice",mouse:"mice"};describe("pluralizing words",function(){describe("normal words",function(){it("should pluralize the word correctly",function(){for(var C in B){expect(A.pluralize(C)).toEqual(B[C])}})});describe("uncountable words",function(){it("should return the same word",function(){expect(A.pluralize("sheep")).toEqual("sheep")})})});describe("clearing existing pluralizations",function(){var C;beforeEach(function(){C=A.plurals});afterEach(function(){A.plurals=C});it("should remove all singular rule definitions",function(){A.clearPlurals();expect(A.plurals.length).toEqual(0)})});describe("clearing existing singularizations",function(){var C;beforeEach(function(){C=A.singulars});afterEach(function(){A.singulars=C});it("should remove all singular rule definitions",function(){A.clearSingulars();expect(A.singulars.length).toEqual(0)})});describe("adding pluralizations",function(){it("should add to the plurals array",function(){var C=A.plurals.length;A.plural(/^(ox)$/,"$1");expect(A.plurals.length).toEqual(C+1)});it("should recognize the new pluralization correctly",function(){var C=A.plurals;A.plurals=[];expect(A.pluralize("ox")).toEqual("ox");A.plural(/^(ox)$/,"$1en");expect(A.pluralize("ox")).toEqual("oxen");A.plurals=C})});describe("adding singularizations",function(){it("should add to the singulars array",function(){var C=A.singulars.length;A.singular(/^(ox)en$/,"$1");expect(A.singulars.length).toEqual(C+1)});it("should recognize the new singularization correctly",function(){var C=A.singulars;A.singulars=[];expect(A.singularize("oxen")).toEqual("oxen");A.singular(/^(ox)en$/,"$1");expect(A.singularize("oxen")).toEqual("ox");A.singulars=C})});describe("singularizing words",function(){describe("normal words",function(){it("should singularize the word correctly",function(){for(var C in B){expect(A.singularize(B[C])).toEqual(C)}})});describe("uncountable words",function(){it("should return the same word",function(){expect(A.singularize("sheep")).toEqual("sheep")})})});describe("classifying words",function(){var C;beforeEach(function(){C=["user","users","User","Users"]});it("should correctly classify",function(){Ext.each(C,function(D){expect(A.classify(D)).toEqual("User")},this)})});describe("uncountable words",function(){it("should be detected",function(){expect(A.isTransnumeral("sheep")).toEqual(true)});it("should not return false positives",function(){expect(A.isTransnumeral("person")).toEqual(false)})});describe("ordinalizing numbers",function(){it("should add st to numbers ending in 1",function(){expect(A.ordinalize(21)).toEqual("21st")});it("should add nd to numbers ending in 2",function(){expect(A.ordinalize(22)).toEqual("22nd")});it("should add rd to numbers ending in 3",function(){expect(A.ordinalize(23)).toEqual("23rd")});it("should add th to all other numbers",function(){expect(A.ordinalize(24)).toEqual("24th")});it("should add th to all early teens",function(){expect(A.ordinalize(11)).toEqual("11th");expect(A.ordinalize(12)).toEqual("12th");expect(A.ordinalize(13)).toEqual("13th")})})});