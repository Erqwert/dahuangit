describe("Ext.data.association.HasOne_legacy",function(){var A;function E(F){Ext.define("spec.Person",{extend:"Ext.data.Model",fields:["id","profile_id","aField"],hasOne:Ext.apply({model:"spec.Profile"},F)})}function C(H,G,F){A.setProfile(H,G,F)}function B(F,G){return A.getProfile(F,G)}function D(G,F){Ext.Ajax.mockComplete({status:F||200,responseText:Ext.JSON.encode(G)})}beforeEach(function(){MockAjaxManager.addMethods();Ext.data.Model.schema.setNamespace("spec");Ext.define("spec.Profile",{extend:"Ext.data.Model",fields:["id","bio","age"]});Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","profile_id"],hasOne:"spec.Profile"})});afterEach(function(){MockAjaxManager.removeMethods();Ext.undefine("spec.User");Ext.undefine("spec.Profile");Ext.undefine("spec.Person");Ext.data.Model.schema.clear(true);A=null});describe("declarations",function(){afterEach(function(){Ext.undefine("spec.Foo")});var F=function(G,H){var I=spec.Foo.prototype;expect(Ext.isFunction(I[G])).toBe(true);expect(Ext.isFunction(I[H])).toBe(true)};it("should read a single string",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasOne:"spec.Profile"});F("getProfile","setProfile")});it("should read an array of strings",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",hasOne:["spec.Profile","spec.Bar"]});F("getProfile","setProfile");F("getBar","setBar");Ext.undefine("spec.Bar")});it("should read a single object",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasOne:{model:"spec.Profile"}});F("getProfile","setProfile")});it("should read an array of objects",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",hasOne:[{model:"spec.Profile"},{model:"spec.Bar"}]});F("getProfile","setProfile");F("getBar","setBar");Ext.undefine("spec.Bar")});it("should read an associations array",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",associations:[{type:"hasOne",model:"spec.Profile"},{type:"hasOne",model:"spec.Bar"}]});F("getProfile","setProfile");F("getBar","setBar");Ext.undefine("spec.Bar")})});describe("getter",function(){var G,F;beforeEach(function(){F=jasmine.createSpy()});afterEach(function(){F=null});describe("instance already set",function(){beforeEach(function(){A=new spec.User({id:4});G=new spec.Profile({id:2});C(G)});afterEach(function(){G=null});it("should return the same instance",function(){expect(B()).toBe(G)});it("should not attempt to load",function(){F=spyOn(spec.Profile.getProxy(),"read");B();expect(F).not.toHaveBeenCalled()});it("should attempt to reload if called with options.reload",function(){F=spyOn(spec.Profile.getProxy(),"read").andReturn();B({reload:true});expect(F).toHaveBeenCalled()});describe("callbacks",function(){it("should accept a function and default the scope to the model",function(){B(F);var H=F.mostRecentCall;expect(H.args[0]).toBe(G);expect(H.object).toBe(A)});it("should accept a function with a scope",function(){var H={};B(F,H);expect(F.mostRecentCall.object).toBe(H)});it("should accept an options object and call success",function(){B({success:F});var H=F.mostRecentCall;expect(H.args[0]).toBe(G);expect(H.object).toBe(A)});it("should accept an options object and call callback",function(){B({callback:F});var H=F.mostRecentCall;expect(H.args[0]).toBe(G);expect(H.object).toBe(A)})})});describe("instance not set",function(){describe("keys",function(){it("should default the primaryKey to 'id' and set it on the model",function(){A=new spec.User({"profile_id":10});G=B();expect(G.get("id")).toBe(10)});it("should use a custom foreign key",function(){E({foreignKey:"aField"});A=new spec.Person({"aField":12});G=B();expect(G.get("id")).toBe(12)})});describe("callbacks",function(){it("should accept a function and the scope should default to the model",function(){A=new spec.User({"profile_id":3});G=B(F);D({});var H=F.mostRecentCall;expect(H.args[0]).toBe(G);expect(H.object).toBe(A)});it("should accept a function and a scope",function(){A=new spec.User({"profile_id":3});var H={};B(F,H);D({});expect(F.mostRecentCall.object).toBe(H)});it("should pass the options to load",function(){A=new spec.User({"profile_id":3});var H=spyOn(spec.Profile.getProxy(),"read");B({params:{someKey:1}});expect(H.mostRecentCall.args[0].getParams()).toEqual({someKey:1})})});it("should return null if the foreignKey value is empty",function(){A=new spec.User();expect(B()).toBeNull()})})});describe("setter",function(){var F;beforeEach(function(){F=jasmine.createSpy();A=new spec.User({id:7})});afterEach(function(){F=null});describe("instance",function(){it("should have the same record reference",function(){var G=new spec.Profile({id:3});C(G);expect(B()).toBe(G)});it("should set the underlying key value",function(){var G=new spec.Profile({id:3});C(G);expect(A.get("profile_id")).toBe(3)})});describe("value",function(){it("should set the underlying key",function(){C(16);expect(A.get("profile_id")).toBe(16)});it("should keep the same reference if setting the value with a matching id",function(){var G=new spec.Profile({id:3});C(G);C(3);expect(B()).toBe(G)});it("should clear the reference if a model is already set and a new id is passed",function(){var G=new spec.Profile({id:3});C(G);C(13);F=spyOn(spec.Profile.getProxy(),"read");B();expect(F.mostRecentCall.args[0].getId()).toBe(13)});it("should set a custom foreignKey",function(){E({foreignKey:"aField"});A=new spec.Person({id:1});C(13);expect(A.get("aField")).toBe(13)})});describe("callbacks",function(){it("should accept a function as the second arg, scope should default to the model",function(){C(16,F);D({});var G=F.mostRecentCall;expect(G.args[0]).toBe(A);expect(G.object).toBe(A)});it("should accept a function with a scope",function(){var G={};C(16,F,G);D({});expect(F.mostRecentCall.object).toBe(G)});describe("options object",function(){var H,G,I;beforeEach(function(){H=jasmine.createSpy();G=jasmine.createSpy();I=jasmine.createSpy()});afterEach(function(){H=G=I=null});describe("on success",function(){it("should call success/callback and scope should default to the model",function(){C(16,{success:H,callback:I,failure:G});D({});expect(G).not.toHaveBeenCalled();expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled();expect(H.mostRecentCall.object).toBe(A);expect(I.mostRecentCall.object).toBe(A)});it("should use a passed scope",function(){var J={};C(16,{scope:J,success:H,callback:I});D({});expect(H.mostRecentCall.object).toBe(J);expect(I.mostRecentCall.object).toBe(J)})});describe("on failure",function(){it("should call failure/callback and scope should default to the model",function(){C(16,{success:H,callback:I,failure:G});D(null,500);expect(H).not.toHaveBeenCalled();expect(G).toHaveBeenCalled();expect(I).toHaveBeenCalled();expect(G.mostRecentCall.object).toBe(A);expect(I.mostRecentCall.object).toBe(A)});it("should use a passed scope",function(){var J={};C(16,{scope:J,failure:G,callback:I});D(null,500);expect(G.mostRecentCall.object).toBe(J);expect(I.mostRecentCall.object).toBe(J)})})})})});describe("reading nested with assocationKey",function(){it("should default the key to the association name",function(){var F=new Ext.data.reader.Json({model:spec.User});A=F.read([{id:1,"profile":{id:3}}]).getRecords()[0];expect(B().getId()).toBe(3)});it("should read a complex association",function(){E({associationKey:"nested.another[1].two"});var F=new Ext.data.reader.Json({model:spec.Person});A=F.read([{id:1,nested:{another:[{},{two:{id:65}}]}}]).getRecords()[0];expect(B().getId()).toBe(65)})});describe("inverse association",function(){it("should set the record if it has an inverse belongsTo",function(){Ext.define("spec.Parent",{extend:"Ext.data.Model",fields:["id"],hasOne:"spec.Child"});Ext.define("spec.Child",{extend:"Ext.data.Model",fields:["id","parent_id"],belongsTo:"spec.Parent"});var G=new Ext.data.reader.Json({model:spec.Parent});A=G.read([{id:1,"child":{id:17}}]).getRecords()[0];var F=A.getChild();expect(F.getParent()).toBe(A);Ext.undefine("spec.Parent");Ext.undefine("spec.Child")})})});