describe("Ext.data.Model",function(){beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;Ext.data.Model.schema.setNamespace("spec")});afterEach(function(){Ext.ClassManager.enableNamespaceParseCache=true;Ext.data.Model.schema.clear(true)});describe("getField/getFields",function(){var B;beforeEach(function(){B=Ext.define("spec.A",{extend:Ext.data.Model,fields:["id","name","key"]})});afterEach(function(){B=null;Ext.undefine("spec.A")});describe("getFields",function(){it("should return an array",function(){expect(Ext.isArray(B.getFields())).toBe(true)});it("should return all fields in the model",function(){expect(B.getFields().length).toBe(3)});it("should be able to be called on an instance",function(){var A=new B();expect(A.getFields().length).toBe(3)})});describe("getField",function(){it("should return null if no field with a matching name is found",function(){expect(B.getField("foo")).toBeNull()});it("should return the field",function(){expect(B.getField("key").isField).toBe(true)});it("should be able to be called on an instance",function(){var A=new B();expect(A.getField("name").isField).toBe(true)})})});describe("defining models",function(){var D,C;afterEach(function(){D=C=null;Ext.undefine("specModel");Ext.undefine("spec.A");Ext.undefine("spec.B");Ext.undefine("spec.model.sub.C")});describe("entityName",function(){beforeEach(function(){Ext.define("specModel",{extend:"Ext.data.Model"});Ext.define("spec.A",{extend:"Ext.data.Model"});Ext.define("spec.B",{extend:"Ext.data.Model"});Ext.define("spec.model.sub.C",{extend:"Ext.data.Model"})});it("should generate proper default entityName for top-level",function(){expect(specModel.entityName).toBe("specModel")});it("should generate proper default entityName for namespaced entity",function(){expect(spec.A.entityName).toBe("A");expect(spec.B.entityName).toBe("B")});it("should generate proper default entityName for a deep namespaced entity",function(){expect(spec.model.sub.C.entityName).toBe("model.sub.C")})});describe("fields",function(){function B(F,E){E=Ext.apply({extend:Ext.data.Model,fields:F},E);D=Ext.define("spec.A",E)}function A(F,E){E=Ext.apply({extend:D,fields:F},E);C=Ext.define("spec.B",E)}it("should be able to define a string name field and default the type to auto",function(){B(["id"]);var E=D.getField("id");expect(E.isField).toBe(true);expect(E.getType()).toBe("auto");expect(D.getFields().length).toBe(1)});it("should be able to define an object field and default the type to auto",function(){B([{name:"id"}]);var E=D.getField("id");expect(E.isField).toBe(true);expect(E.getType()).toBe("auto");expect(D.getFields().length).toBe(1)});it("should read the type parameter from the field",function(){B([{name:"id",type:"int"}]);expect(D.getField("id").getType()).toBe("int")});it("should retain the field definition order",function(){B(["id","d","a","c","b"]);var F=D.getFields(),E=[];Ext.Array.forEach(F,function(G){E.push(G.getName())});expect(E).toEqual(["id","d","a","c","b"]);expect(F.length).toBe(5)});it("should be able to define a field with a - in the name",function(){B(["the-field"]);var E=D.getField("the-field");expect(E.isField)});describe("id field",function(){it("should create a field matching the idProperty if it doesn't exist",function(){B([]);var E=D.getFields();expect(E.length).toBe(1);expect(E[0].getName()).toBe(D.prototype.idProperty)});it("should append the id field to the end if it doesn't exist",function(){B(["a","b"]);var E=D.getFields();expect(E[2].getName()).toBe("id")});it("should not create an extra field if the idProperty field is already defined",function(){B([{name:"id",type:"int"}]);var E=D.getField("id");expect(E.getType()).toBe("int")});it("should create an idField when the name isn't the default",function(){B([],{idProperty:"name"});expect(D.getField("name").isField).toBe(true)});it("should clear any defaultValue on the idField",function(){B([{name:"id",type:"int"}]);expect(D.getField("id").defaultValue).toBeNull()});it("should set allowNull on the idField",function(){B([{name:"id",type:"int"}]);expect(D.getField("id").allowNull).toBe(true)})});describe("subclassing",function(){it("should inherit the fields from the superclass",function(){B(["id","name"]);A([]);expect(C.getFields().length).toBe(2)});it("should append new fields to the end",function(){B(["id","name"]);A(["foo","bar"]);var E=C.getFields();expect(E.length).toBe(4);expect(E[2].getName()).toBe("foo");expect(E[3].getName()).toBe("bar")});it("should not modify the fields in the superclass",function(){B(["id","name"]);A(["foo","bar"]);var E=D.getFields();expect(E.length).toBe(2);expect(E[0].getName()).toBe("id");expect(E[1].getName()).toBe("name")});it("should be able to override a field in the base",function(){B(["id"]);A([{name:"id",type:"int"}]);expect(D.getField("id").getType()).toBe("auto");expect(C.getField("id").getType()).toBe("int")});it("should create a new idField if it differs from the superclass",function(){B(["id"]);A([],{idProperty:"name"});var E=C.getFields();expect(E.length).toBe(2);expect(E[1].getName()).toBe("name")});it("should copy fields for deep subclasses",function(){B(["id"]);A(["bField"]);Ext.define("spec.C",{extend:C,fields:["cField"]});Ext.define("spec.D",{extend:spec.C,fields:["dField"]});var E=spec.C.getFields();expect(E.length).toBe(3);expect(E[2].getName()).toBe("cField");E=spec.D.getFields();expect(E.length).toBe(4);expect(E[2].getName()).toBe("cField");expect(E[3].getName()).toBe("dField");Ext.undefine("spec.C");Ext.undefine("spec.D")})});describe("configs the model sets on the field",function(){describe("ordinal",function(){function E(G,H,F){F=F||D;var I=F.getField(G);expect(I.ordinal).toBe(H)}it("should set the ordinal for each field in order",function(){B(["foo","bar","baz"]);var F=D.getFields();E("foo",0);E("bar",1);E("baz",2)});it("should append the id field to the end",function(){B(["foo","bar","baz"]);E("id",3)});it("should not move the id field if it exists",function(){B(["id","foo","bar","baz"]);E("id",0)});describe("subclassing",function(){it("should append field to the end",function(){B(["id","foo"]);A(["bar","baz"]);E("bar",2,C);E("baz",3,C)});it("should not move a field if redefined",function(){B(["id","foo"]);A(["bar","baz",{name:"foo",type:"int"}]);E("foo",1,C)});it("should append a custom id field to the end",function(){B(["id","foo"]);A(["bar"],{idProperty:"customId"});E("customId",3,C)})})});describe("definedBy",function(){it("should set the defined class on all fields",function(){B(["foo","bar"]);expect(D.getField("foo").definedBy).toBe(D);expect(D.getField("bar").definedBy).toBe(D)});it("should set the defined class on an id field",function(){B(["foo","bar"]);expect(D.getField("id").definedBy).toBe(D)});describe("subclassing",function(){it("should set the subclass on the field",function(){B(["foo"]);A(["bar"]);expect(C.getField("bar").definedBy).toBe(C)});it("should retain the superclass on the field",function(){B(["foo"]);A(["bar"]);expect(C.getField("foo").definedBy).toBe(D)});it("should set the if the field is redefined",function(){B(["foo"]);A(["bar",{name:"foo",type:"int"}]);expect(C.getField("foo").definedBy).toBe(C)})})})})});describe("proxy",function(){function A(B,E){E=Ext.apply({extend:Ext.data.Model,fields:["id"],proxy:B},E);D=Ext.define("spec.A",E)}it("should ask the API to construct a proxy by default",function(){A();var B=D.schema;spyOn(B,"constructProxy").andCallThrough();D.getProxy();expect(B.constructProxy).toHaveBeenCalled()});it("should create a proxy type string",function(){A("ajax");expect(D.getProxy() instanceof Ext.data.proxy.Ajax).toBe(true)});it("should create a proxy from a config",function(){A({type:"ajax",url:"/foo"});expect(D.getProxy().getUrl()).toBe("/foo")});it("should use a passed instance",function(){var B=new Ext.data.proxy.Ajax();A(B);expect(D.getProxy()).toBe(B);B=null});describe("subclassing",function(){function B(E,F){F=Ext.apply({extend:D},F);if(E){F.proxy=E}C=Ext.define("spec.B",F)}it("should inherit a config from the parent",function(){A({type:"ajax",url:"/foo"});B();expect(C.getProxy().getUrl()).toBe("/foo")});it("should override anything on the parent",function(){A({type:"ajax",url:"/foo"});B({type:"ajax",url:"/bar"});expect(C.getProxy().getUrl()).toBe("/bar")});it("should clone an existing instance",function(){A({type:"ajax",url:"/foo"});D.getProxy();B();expect(C.getProxy()).not.toBe(D.getProxy());expect(C.getProxy().getUrl()).toBe("/foo")});it("should not modify the super instance",function(){A({type:"ajax",url:"/foo"});B();C.getProxy().setUrl("/bar");expect(D.getProxy().getUrl()).toBe("/foo")})})});describe("associations",function(){});describe("identifier",function(){var B;function A(E,G,F){F=Ext.apply({extend:Ext.data.Model,fields:G||["id","name"],identifier:E},F);D=Ext.define("spec.A",F)}afterEach(function(){B=null;var E=Ext.data.identifier.Generator;E.all={uuid:E.all.uuid}});it("should default to identifier.Sequential",function(){A();var E=new D();expect(E.getId()).toBe("A-1");E=new D();expect(E.getId()).toBe("A-2")});it("should create an identifier from a type string",function(){A("negative");var E=new D();expect(E.getId()).toBe(-1);E=new D();expect(E.getId()).toBe(-2)});it("should create an identifier from a config object",function(){A({type:"sequential",prefix:"foo"});var E=new D();expect(E.getId()).toBe("foo1");E=new D();expect(E.getId()).toBe("foo2")});it("should share an instance across models using an id",function(){var F=Ext.define("spec.B",{extend:Ext.data.Model,identifier:{id:"x",prefix:"ID_",seed:1000}});A("x");var G=new D();var E=new F();expect(G.id).toBe("ID_1000");expect(E.id).toBe("ID_1001")});describe("subclassing",function(){function E(F,G){G=Ext.apply({extend:D,identifier:F},G);C=Ext.define("spec.B",G)}describe("defined on the subclass",function(){it("should use a string type",function(){A({type:"negative"});E("sequential");var G=new D();var F=new C();expect(G.id).toBe(-1);expect(F.id).toBe(1)});it("should use an object type",function(){A({type:"negative"});E({type:"sequential"});var G=new D();var F=new C();expect(G.id).toBe(-1);expect(F.id).toBe(1)});it("should use an instance",function(){B=new Ext.data.identifier.Sequential();A({type:"sequential"});E(B);expect(C.identifier).toBe(B)})});describe("inheriting from parent",function(){it("should clone an instance if it's cloneable",function(){A({type:"sequential",prefix:"foo"});E();B=C.identifier;expect(B).not.toBe(D.identifier);expect(B.getPrefix()).toBe("foo")});it("should not clone the instance if it's not cloneable",function(){A("uuid");E();expect(C.identifier).toBe(D.identifier)});it("should not clone if an id is specified",function(){A({type:"sequential",prefix:"ID_",seed:1000,id:"xxx"});E();expect(C.identifier).toBe(D.identifier);var G=new D();var F=new C();expect(G.id).toBe("ID_1000");expect(F.id).toBe("ID_1001")})})})});describe("validators",function(){function A(B,F,E){E=Ext.apply({extend:Ext.data.Model,fields:F||["id","name","rank","email"],validators:B},E);D=Ext.define("spec.A",E)}describe("array style",function(){it("should accept an array of validators",function(){A([{field:"name",type:"presence"}]);var B=D.validators.name;expect(B.length).toBe(1);expect(B[0] instanceof Ext.data.validator.Presence)});it("should accept multiple validators for a single field",function(){A([{field:"name",type:"presence"},{field:"name",type:"format",matcher:/foo/}]);var B=D.validators.name;expect(B.length).toBe(2);expect(B[0] instanceof Ext.data.validator.Presence);expect(B[1] instanceof Ext.data.validator.Format)});it("should be able to pass validators for multiple fields",function(){A([{field:"name",type:"presence"},{field:"email",type:"email"}]);var E=D.validators.name,B=D.validators.email;expect(E.length).toBe(1);expect(B.length).toBe(1);expect(E[0] instanceof Ext.data.validator.Presence);expect(B[0] instanceof Ext.data.validator.Email)});it("should accept a function validator",function(){var B=function(){};A([{field:"name",fn:B}]);var E=D.validators.name[0];expect(E.isValidator).toBe(true);expect(E.validate).toBe(B)})});describe("object style",function(){it("should accept a string",function(){A({name:"presence"});var B=D.validators.name;expect(B.length).toBe(1);expect(B[0] instanceof Ext.data.validator.Presence)});it("should accept a function",function(){var B=function(){};A({name:B});var E=D.validators.name;expect(E.length).toBe(1);expect(E[0].validate).toBe(B)});it("should accept config object",function(){A({name:{type:"format",matcher:/foo/}});var B=D.validators.name;expect(B.length).toBe(1);expect(B[0] instanceof Ext.data.validator.Format)});it("should accept an array of strings",function(){A({name:["presence","email"]});var B=D.validators.name;expect(B.length).toBe(2);expect(B[0] instanceof Ext.data.validator.Presence);expect(B[0] instanceof Ext.data.validator.Email)});it("should accept an array of functions",function(){var E=function(){},F=function(){};A({name:[E,F]});var B=D.validators.name;expect(B.length).toBe(2);expect(B[0].validate).toBe(E);expect(B[1].validate).toBe(F)});it("should accept an array of objects",function(){A({name:[{type:"presence"},{type:"length",min:3}]});var B=D.validators.name;expect(B.length).toBe(2);expect(B[0] instanceof Ext.data.validator.Presence);expect(B[0] instanceof Ext.data.validator.Length)});it("should accept a mixed array",function(){var B=function(){};A({name:["presence",{type:"length",min:3},B]});var E=D.validators.name;expect(E.length).toBe(3);expect(E[0] instanceof Ext.data.validator.Presence);expect(E[1] instanceof Ext.data.validator.Length);expect(E[2].validate).toBe(B)});it("should be able to declare multiple fields at once",function(){A({name:"presence",email:"email"});var E=D.validators.name,B=D.validators.email;expect(E.length).toBe(1);expect(B.length).toBe(1);expect(E[0] instanceof Ext.data.validator.Presence);expect(B[0] instanceof Ext.data.validator.Email)})});describe("subclassing",function(){function B(E,G,F){F=Ext.apply({extend:D,fields:G||[],validators:E},F);C=Ext.define("spec.B",F)}it("should aggregate different types",function(){A({email:"presence"});B({email:"email"});var E=C.validators.email;expect(E.length).toBe(2);expect(E[0] instanceof Ext.data.validator.Presence);expect(E[1] instanceof Ext.data.validator.Email)});it("should not append a string type that already exists",function(){A({email:"email"});B({email:"email"});var E=C.validators.email;expect(E.length).toBe(1);expect(E[0] instanceof Ext.data.validator.Email)});it("should always append functions",function(){var F=function(){},G=function(){};A({name:F});B({name:G});var E=C.validators.name;expect(E.length).toBe(2);expect(E[0].validate).toBe(F);expect(E[1].validate).toBe(G)});it("should merge object types",function(){A({name:{type:"length",min:3}});B({name:{type:"length",max:10}});var E=C.validators.name;expect(E.length).toBe(1);expect(E[0].getMin()).toBe(3);expect(E[0].getMax()).toBe(10)});it("should overwrite options",function(){A({name:{type:"format",matcher:/foo/}});B({name:{type:"format",matcher:/bar/}});var E=C.validators.name;expect(E.length).toBe(1);expect(E[0].getMatcher().source).toBe("bar")});it("should not modify the superclass collection",function(){A({name:"presence"});B({name:{type:"format",matcher:/foo/},email:"email"});var E=D.validators;expect(E.name.length).toBe(1);expect(E.email).toBeUndefined()});it("should not modify superclass validator instances",function(){A({name:{type:"length",min:2}});B({name:{type:"length",min:2,max:7}});var E=D.validators.name[0];expect(E.getMax()).toBeUndefined();C.validators.name[0].setMax(10);expect(E.getMax()).toBeUndefined()});it("should not modify subclass validator instances",function(){A({name:{type:"length",min:2}});B({name:{type:"length",min:2,max:7}});var E=D.validators.name[0].setMax(10);expect(C.validators.name[0].getMax()).toBe(7)})})})});describe("get/setProxy",function(){var C;afterEach(function(){C=null;Ext.undefine("spec.A")});function B(A,D){D=Ext.apply({extend:Ext.data.Model,fields:["id"],proxy:A},D);C=Ext.define("spec.A",D)}it("should be able to set a string type",function(){B();C.setProxy("ajax");expect(C.getProxy() instanceof Ext.data.proxy.Ajax).toBe(true)});it("should be able to set a config",function(){B();C.setProxy({type:"ajax",url:"/foo"});expect(C.getProxy().getUrl()).toBe("/foo")});it("should be able to set an instance",function(){var A=new Ext.data.proxy.Ajax({url:"/foo"});B();C.setProxy(A);expect(C.getProxy()).toBe(A);A=null});it("should have the instance method call the static method",function(){B({type:"ajax",url:"/foo"});var D=C.getProxy();var A=new C();expect(A.getProxy()).toBe(D);D=null})});describe("remote calls",function(){var F,C,B;function D(A,G){G=Ext.apply({extend:Ext.data.Model,fields:["id","name","age"],proxy:A||{type:"ajax",url:"/foo"}},G);F=Ext.define("spec.A",G)}function E(H,G,A){B=new F({id:H},A);if(G){B.load(G)}return B}beforeEach(function(){MockAjaxManager.addMethods()});afterEach(function(){MockAjaxManager.removeMethods();C=F=null;Ext.undefine("spec.A")});describe("load",function(){var G;beforeEach(function(){D();G=spyOn(F.getProxy(),"read").andCallFake(function(H){C=H;return G.originalValue.apply(this,arguments)})});function A(I,H){Ext.Ajax.mockComplete({status:H||200,responseText:Ext.JSON.encode(I)})}it("should throw if the model is a phantom",function(){E();expect(function(){B.load()}).toThrow()});it("should throw if the returned id is different",function(){E(3,{});expect(function(){A({id:100})}).toThrow()});it("should pass the id as part of the operation",function(){E(3,{});expect(C.getId()).toBe(3)});it("should return the operation",function(){E(3);expect(B.load().isOperation).toBe(true)});describe("while loading",function(){it("should return the operation",function(){var H=B.load();expect(B.load()).toBe(H)});it("should not trigger a second load",function(){E(3,{});G.reset();B.load();expect(G).not.toHaveBeenCalled()});describe("callbacks",function(){it("should call success & callback if successful",function(){var H=jasmine.createSpy(),I=jasmine.createSpy();E(3,{});B.load({success:H,callback:I});A({});expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled()});it("should be able to call success/callback multiple times",function(){var I=jasmine.createSpy(),J=jasmine.createSpy(),H=0;E(3,{});for(H=0;H<3;++H){B.load({success:I,callback:J})}A({});expect(I.callCount).toBe(3);expect(J.callCount).toBe(3)});it("should be able to call success/callback in conjunction with the original callbacks",function(){var H=jasmine.createSpy(),J=jasmine.createSpy(),I=jasmine.createSpy(),K=jasmine.createSpy();E(3,{success:H,callback:J});B.load({success:I,callback:K});A({});expect(H).toHaveBeenCalled();expect(J).toHaveBeenCalled();expect(I).toHaveBeenCalled();expect(K).toHaveBeenCalled()});it("should call failure & callback if failed",function(){var H=jasmine.createSpy(),I=jasmine.createSpy();E(3,{});B.load({failure:H,callback:I});A(null,500);expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled()});it("should be able to call failure/callback multiple times",function(){var H=jasmine.createSpy(),J=jasmine.createSpy(),I=0;E(3,{});for(I=0;I<3;++I){B.load({failure:H,callback:J})}A(null,500);expect(H.callCount).toBe(3);expect(J.callCount).toBe(3)})})});describe("setting data",function(){it("should set the data on the model",function(){E(3,{});A({name:"foo",age:20});expect(B.get("name")).toBe("foo");expect(B.get("age")).toBe(20)});it("should only set returned data",function(){E(2,{});A({name:"foo"});expect(B.get("name")).toBe("foo");expect(B.get("age")).toBeUndefined()});it("should overwrite local data",function(){E(2);B.set("name","bar");B.load();A({name:"foo",age:20});expect(B.get("name")).toBe("foo");expect(B.get("age")).toBe(20)});it("should commit the data",function(){E(3,{});A({name:"foo",age:20});expect(B.dirty).toBe(false)});describe("associations",function(){beforeEach(function(){Ext.define("spec.Post",{extend:"Ext.data.Model",entityName:"Post",fields:["id","content",{name:"aId",reference:"A"}]})});afterEach(function(){Ext.undefine("spec.Post")});it("should be able to load associations",function(){E(3,{});A({posts:[{id:1},{id:2},{id:3}]});var H=B.posts();expect(H.getCount()).toBe(3);expect(H.getAt(0).getId()).toBe(1);expect(H.getAt(1).getId()).toBe(2);expect(H.getAt(2).getId()).toBe(3)});describe("with a session",function(){it("should ensure the session is consulted when constructing nested records",function(){Ext.define("spec.Comment",{extend:"Ext.data.Model",entityName:"Comment",fields:["id","content",{name:"postId",reference:"Post"}]});var H=new Ext.data.Session(),I=H.createRecord("Post",{id:2,aId:3,content:"Foo"}),K=H.createRecord("Comment",{id:132,postId:3,content:"Bar"});E(3,{},H);A({posts:[{id:1,aId:3},{id:2,aId:3},{id:3,aId:3,comments:[{id:132}]}]});var J=B.posts();expect(J.getAt(1)).toBe(I);expect(J.getAt(2).comments().first()).toBe(K);H.destroy();Ext.undefine("spec.Comment")})})})});describe("via the static load call",function(){it("should return the created model instance",function(){B=F.load(1);expect(B.getId()).toBe(1);expect(B.self).toBe(F)});it("should call the instance load method and pass options",function(){var H={},I=spyOn(F.prototype,"load");F.load(1,H);expect(I).toHaveBeenCalledWith(H)});it("should create the record in the session if passed",function(){var H=new Ext.data.Session();B=F.load(12,null,H);expect(B.session).toBe(H);expect(H.getRecord("A",12)).toBe(B);H.destroy()})});describe("isLoading",function(){it("should not be loading by default",function(){E(100);expect(B.isLoading()).toBe(false)});it("should be loading when a load is initiated",function(){E(100,{});expect(B.isLoading()).toBe(true)});it("should not be loading when a load has completed",function(){E(100,{});A({});expect(B.isLoading()).toBe(false)});it("should not be loading when a load is aborted",function(){E(100,{});B.abort();expect(B.isLoading()).toBe(false)})});describe("abort",function(){it("should do nothing if not loading",function(){E(100);expect(function(){B.abort()}).not.toThrow()});it("should abort a load operation",function(){E(100,{});var H=B.loadOperation;spyOn(H,"abort");B.abort();expect(H.abort).toHaveBeenCalled()})});describe("operation successful",function(){it("should trigger the success callback",function(){var H=jasmine.createSpy();E(17,{success:H});A({id:17,name:"TheName"});expect(H).toHaveBeenCalled()});it("should pass a record and the operation",function(){var H=jasmine.createSpy();E(17,{success:H});A({id:17,name:"TheName"});var I=H.mostRecentCall.args;expect(I[0]).toBe(B);expect(I[1]).toBe(C)});it("should only pass the first record if the server returns multiple",function(){var H=jasmine.createSpy();E(17,{success:H});A([{id:17,name:"Foo"},{id:107,name:"Bar"}]);expect(H.mostRecentCall.args[0]).toBe(B);expect(H.callCount).toBe(1)});it("should default the scope to the instance",function(){var H=jasmine.createSpy();E(100,{success:H});A({});expect(H.mostRecentCall.object).toBe(B)});it("should use a passed scope",function(){var H={},I=jasmine.createSpy();E(100,{scope:H,success:I});A({});expect(I.mostRecentCall.object).toBe(H)});it("should also fire the callback",function(){var I=jasmine.createSpy(),H=jasmine.createSpy();E(100,{success:H,callback:I});A({});expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled()});describe("with no record returned",function(){it("should fire the failure callback, not success",function(){var I=jasmine.createSpy(),H=jasmine.createSpy();E(100,{failure:H,success:I});A([]);expect(I).not.toHaveBeenCalled();expect(H).toHaveBeenCalled()})})});describe("operation failure",function(){it("should trigger the failure callback",function(){var H=jasmine.createSpy();E(17,{failure:H});A(null,500);expect(H).toHaveBeenCalled()});it("should pass the record and the operation",function(){var H=jasmine.createSpy();E(17,{failure:H});A(null,500);var I=H.mostRecentCall.args;expect(I[0]).toBe(B);expect(I[1]).toBe(C)});it("should default the scope to the instance",function(){var H=jasmine.createSpy();E(100,{failure:H});A(null,500);expect(H.mostRecentCall.object).toBe(B)});it("should use a passed scope",function(){var H={},I=jasmine.createSpy();E(100,{scope:H,failure:I});A(null,500);expect(I.mostRecentCall.object).toBe(H)});it("should also fire the callback",function(){var I=jasmine.createSpy(),H=jasmine.createSpy();E(100,{failure:H,callback:I});A(null,500);expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled()})});describe("callback",function(){it("should default the scope to the instance",function(){var H=jasmine.createSpy();E(100,{callback:H});A({});expect(H.mostRecentCall.object).toBe(B)});it("should use a passed scope",function(){var H={},I=jasmine.createSpy();E(100,{scope:H,callback:I});A({});expect(I.mostRecentCall.object).toBe(H)});it("should receive the model, operation & success=true when successful",function(){var H=jasmine.createSpy();E(17,{callback:H});A({});var I=H.mostRecentCall.args;expect(I[0]).toBe(B);expect(I[1]).toBe(C);expect(I[2]).toBe(true)});it("should receive rec, operation & success=false when failed",function(){var H=jasmine.createSpy();E(17,{callback:H});A(null,500);var I=H.mostRecentCall.args;expect(I[0]).toBe(B);expect(I[1]).toBe(C);expect(I[2]).toBe(false)});it("should be called last when successful",function(){var H=[];E(17,{success:function(){H.push("success")},callback:function(){H.push("callback")}});A({});expect(H).toEqual(["success","callback"])});it("should be called last when failed",function(){var H=[];E(17,{failure:function(){H.push("fail")},callback:function(){H.push("callback")}});A(null,500);expect(H).toEqual(["fail","callback"])})})});describe("save",function(){var A,G;function H(I){spyOn(F.getProxy(),"doRequest").andCallFake(function(J){C=J;if(I){J.process(new Ext.data.ResultSet({success:true}))}else{J.setException("Failed")}})}beforeEach(function(){D();A=new F({id:17});G=jasmine.createSpy()});describe("operation types",function(){it("should create a destroy operation if the record is dropped",function(){A=new F();A.drop();var I=A.save();expect(I instanceof Ext.data.operation.Destroy).toBe(true)});it("should create a create operation if the record is a phantom",function(){A=new F();var I=A.save();expect(I instanceof Ext.data.operation.Create).toBe(true)});it("should create an update operation if the record is not phantom and not dropped",function(){var I=A.save();expect(I instanceof Ext.data.operation.Update).toBe(true)})});describe("callbacks",function(){describe("success",function(){beforeEach(function(){H(true)});it("should pass the record and the operation",function(){A.save({success:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(true)});it("should default the scope to the model",function(){A.save({success:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var I={};A.save({success:G,scope:I});expect(G.mostRecentCall.object).toBe(I)});it("should not call failure",function(){A.save({failure:G});expect(G).not.toHaveBeenCalled()})});describe("failure",function(){beforeEach(function(){H(false)});it("should pass the record and the operation",function(){A.save({failure:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(false)});it("should default the scope to the model",function(){A.save({failure:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var I={};A.save({failure:G,scope:I});expect(G.mostRecentCall.object).toBe(I)});it("should not call success",function(){A.save({success:G});expect(G).not.toHaveBeenCalled()})});describe("callback",function(){describe("on success",function(){it("should pass the record, operation & success",function(){H(true);A.save({callback:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(true);expect(I[2]).toBe(true)})});describe("on failure",function(){it("should pass the record, operation & success",function(){H(false);A.save({callback:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(false);expect(I[2]).toBe(false)})});it("should default the scope to the model",function(){H(true);A.save({callback:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){H(true);var I={};A.save({callback:G,scope:I});expect(G.mostRecentCall.object).toBe(I)})})})});describe("erase",function(){var G,A;beforeEach(function(){D();G=jasmine.createSpy()});describe("phantom",function(){beforeEach(function(){A=new F()});it("should not make a call to the proxy",function(){var H=F.getProxy();spyOn(H,"erase");A.erase();expect(H.erase).not.toHaveBeenCalled()});it("should return an operation, it should be completed",function(){var H=A.erase();expect(H.isOperation).toBe(true);expect(H.isComplete()).toBe(true)});it("should call afterErase",function(){spyOn(A,"callJoined");A.erase();expect(A.callJoined).toHaveBeenCalled();expect(A.callJoined.mostRecentCall.args[0]).toBe("afterErase")});it("should set the erased property",function(){A.erase();expect(A.erased).toBe(true)});describe("callbacks",function(){describe("success",function(){it("should fire before the function returns",function(){var I=false,H;A.erase({success:function(){H=I}});I=true;expect(H).toBe(false)});it("should pass the record and the operation",function(){A.erase({success:G});var I=G.mostRecentCall.args,H=I[1];expect(I[0]).toBe(A);expect(H instanceof Ext.data.operation.Destroy).toBe(true);expect(H.getRecords()).toEqual([A]);expect(H.wasSuccessful()).toBe(true)});it("should default the scope to the model",function(){A.erase({success:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var H={};A.erase({success:G,scope:H});expect(G.mostRecentCall.object).toBe(H)})});describe("failure",function(){it("should never call this",function(){A.erase({failure:G});expect(G).not.toHaveBeenCalled()})});describe("callback",function(){it("should fire before the function returns",function(){var I=false,H;A.erase({callback:function(){H=I}});I=true;expect(H).toBe(false)});it("should pass the record, operation & success",function(){A.erase({callback:G});var I=G.mostRecentCall.args,H=I[1];expect(I[0]).toBe(A);expect(H instanceof Ext.data.operation.Destroy).toBe(true);expect(H.getRecords()).toEqual([A]);expect(H.wasSuccessful()).toBe(true);expect(I[2]).toBe(true)});it("should default the scope to the model",function(){A.erase({callback:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var H={};A.erase({callback:G,scope:H});expect(G.mostRecentCall.object).toBe(H)})})})});describe("non-phantom",function(){function H(I){spyOn(F.getProxy(),"erase").andCallFake(function(J){C=J;if(I){J.process(new Ext.data.ResultSet({success:true}))}else{J.setException("Failed")}})}beforeEach(function(){A=new F({id:17})});it("should call the proxy erase method",function(){G=spyOn(F.getProxy(),"erase").andReturn();A.erase();expect(G).toHaveBeenCalled()});it("should return an operation, it should not be completed",function(){var I=A.erase();expect(I.isOperation).toBe(true);expect(I.isComplete()).toBe(false)});describe("when successful",function(){it("should call afterErase",function(){spyOn(A,"callJoined");H(true);A.erase();expect(A.callJoined).toHaveBeenCalled();expect(A.callJoined.mostRecentCall.args[0]).toBe("afterErase")});it("should set the erased property",function(){H(true);A.erase();expect(A.erased).toBe(true)})});describe("when not successful",function(){it("should not call afterErase",function(){spyOn(A,"callJoined");H(false);A.erase();expect(A.callJoined).not.toHaveBeenCalledWith("afterErase")});it("should not set the erased property",function(){H(false);A.erase();expect(A.erased).toBe(false)})});describe("callbacks",function(){describe("success",function(){beforeEach(function(){H(true)});it("should pass the record and the operation",function(){A.erase({success:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(true)});it("should default the scope to the model",function(){A.erase({success:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var I={};A.erase({success:G,scope:I});expect(G.mostRecentCall.object).toBe(I)});it("should not call failure",function(){A.erase({failure:G});expect(G).not.toHaveBeenCalled()})});describe("failure",function(){beforeEach(function(){H(false)});it("should pass the record and the operation",function(){A.erase({failure:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(false)});it("should default the scope to the model",function(){A.erase({failure:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){var I={};A.erase({failure:G,scope:I});expect(G.mostRecentCall.object).toBe(I)});it("should not call success",function(){A.erase({success:G});expect(G).not.toHaveBeenCalled()})});describe("callback",function(){describe("on success",function(){it("should pass the record, operation & success",function(){H(true);A.erase({callback:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(true);expect(I[2]).toBe(true)})});describe("on failure",function(){it("should pass the record, operation & success",function(){H(false);A.erase({callback:G});var I=G.mostRecentCall.args;expect(I[0]).toBe(A);expect(I[1]).toBe(C);expect(C.wasSuccessful()).toBe(false);expect(I[2]).toBe(false)})});it("should default the scope to the model",function(){H(true);A.erase({callback:G});expect(G.mostRecentCall.object).toBe(A)});it("should use the passed scope",function(){H(true);var I={};A.erase({callback:G,scope:I});expect(G.mostRecentCall.object).toBe(I)})})})})})});describe("the initial id",function(){var D,B;function C(A,E){D=Ext.define(null,{extend:"Ext.data.Model",fields:[{name:"id",type:A||"auto",dateFormat:E}]})}afterEach(function(){D=null});describe("auto",function(){beforeEach(function(){C()});it("should auto generate an id when not specified and be phantom",function(){B=new D();var A=B.self.identifier.getPrefix();expect(B.id).toBe(A+"1");expect(B.phantom).toBe(true)});it("should use a specified idand not be phantom",function(){B=new D({id:"foo"});expect(B.id).toBe("foo");expect(B.phantom).toBe(false)})});describe("string",function(){beforeEach(function(){C("string")});it("should auto generate an id when not specified and be phantom",function(){B=new D();var A=B.self.identifier.getPrefix();expect(B.id).toBe(A+"1");expect(B.phantom).toBe(true)});it("should use a specified id and not be phantom",function(){B=new D({id:"foo"});expect(B.id).toBe("foo");expect(B.phantom).toBe(false)});it("should run the converter and not be phantom",function(){B=new D({id:2});expect(B.id).toBe("2");expect(B.phantom).toBe(false)})});describe("int",function(){beforeEach(function(){C("int")});it("should auto generate an id when not specified and be phantom",function(){B=new D();var A=B.self.identifier.getPrefix();expect(B.id).toBe(A+"1");expect(B.phantom).toBe(true)});it("should use a specified id and not be phantom",function(){B=new D({id:32});expect(B.id).toBe(32);expect(B.phantom).toBe(false)});it("should run the converter and not be phantom",function(){B=new D({id:"600"});expect(B.id).toBe(600);expect(B.phantom).toBe(false)})});describe("date",function(){beforeEach(function(){C("date","Y-m-d")});it("should auto generate an id when not specified and be phantom",function(){B=new D();var A=B.self.identifier.getPrefix();expect(B.id).toBe(A+"1");expect(B.phantom).toBe(true)});it("should use a specified id and not be phantom",function(){var A=new Date();B=new D({id:A});expect(B.id).toBe(A);expect(B.phantom).toBe(false)});it("should run the converter and not be phantom",function(){var A=new Date().getTime();B=new D({id:"2012-01-01"});expect(Ext.Date.format(B.id,"Y-m-d")).toBe("2012-01-01");expect(B.phantom).toBe(false)})})});describe("constructing",function(){var C=new Date(),H=[],I={},G,F,K,D,L,E,J;beforeEach(function(){J=false;G=Ext.define("spec.A",{extend:Ext.data.Model,fields:["nothing",{name:"convertOnly",convert:function(A){D=true;if(J){return E}else{return A}}},{name:"convertAndDefaultValue",convert:function(A){L=true;if(J){return E}else{return A}},defaultValue:16},{name:"defaultOnly",defaultValue:"foo"},{name:"objField",defaultValue:{}},{name:"arrField",defaultValue:[]},{name:"dateField",defaultValue:C}]});L=D=false});afterEach(function(){Ext.undefine("spec.A");G=F=K=null;E=undefined});it("should accept no params",function(){expect(function(){K=new G()}).not.toThrow()});it("should assign an underlying data object",function(){K=new G({nothing:"Foo"});expect(K.get("nothing")).toBe("Foo")});it("should read the field if it has a hyphen in the name",function(){var A=Ext.define(null,{extend:"Ext.data.Model",fields:[{name:"the-field",convert:Ext.identityFn}]});K=new A({"the-field":"foo"});expect(K.get("the-field")).toBe("foo")});describe("id",function(){describe("with no value",function(){describe("with no identifier config",function(){it("should generate a new id",function(){spyOn(G.identifier,"generate").andReturn("x");K=new G();expect(K.id).toBe("x")});it("should set phantom: true",function(){K=new G();expect(K.phantom).toBe(true)});it("should put the id on the idProperty field",function(){spyOn(G.identifier,"generate").andReturn("x");K=new G();expect(K.get("id")).toBe("x")})});describe("with identifier config",function(){it("should generate an id",function(){spyOn(G.identifier,"generate").andReturn("Foo");K=new G();expect(K.id).toBe("Foo")});it("should set phantom: true",function(){spyOn(G.identifier,"generate").andReturn("Foo");K=new G();expect(K.phantom).toBe(true)});it("should put the id on the idProperty field",function(){spyOn(G.identifier,"generate").andReturn("Foo");K=new G();expect(K.get("id")).toBe("Foo")})})});describe("with a value",function(){it("should set the id",function(){K=new G({id:3});expect(K.id).toBe(3)});it("should set phantom: false",function(){K=new G({id:3});expect(K.phantom).toBe(false)});it("should modify the idProperty field",function(){K=new G({id:3});expect(K.get("id")).toBe(3)});it("should not call the id generator",function(){spyOn(G.identifier,"generate");K=new G({id:1});expect(G.identifier.generate).not.toHaveBeenCalled()})});it("should convert the ID according to the idField's convert function",function(){var A=Ext.define(null,{extend:"Ext.data.Model",fields:[{name:"pageId"},{name:"browserId"},{name:"id",convert:function(N,M){return M.get("pageId")+M.get("browserId")}}]});var B=new A({pageId:"foo",browserId:"bar",id:"xx"});expect(B.getId()).toBe("foobar")})});describe("convert",function(){it("should call the convert method",function(){J=true;E=10;K=new G({});expect(D).toBe(true);expect(K.get("convertOnly")).toBe(10)});it("should ignore the value from convert if it returns undefined",function(){J=true;E=undefined;K=new G({convertOnly:"foo"});expect(D).toBe(true);expect(K.get("convertOnly")).toBe("foo")})});describe("defaultValue",function(){it("should assign the defaultValue",function(){K=new G({});expect(K.get("defaultOnly")).toBe("foo")});it("should only assign the defaultValue if the value is undefined",function(){K=new G({defaultOnly:null});expect(K.get("defaultOnly")).toBeNull();K=new G({defaultOnly:""});expect(K.get("defaultOnly")).toBe("");K=new G({defaultOnly:false});expect(K.get("defaultOnly")).toBe(false);K=new G({defaultOnly:0});expect(K.get("defaultOnly")).toBe(0)});describe("object types",function(){it("should copy objects",function(){K=new G({});var A=K.get("objField");expect(A).not.toBe(I);expect(A).toEqual(I)});it("should copy dates",function(){K=new G({});var A=K.get("dateField");expect(A).not.toBe(C);expect(A).toEqual(C)});it("should copy arrays",function(){K=new G({});var A=K.get("arrField");expect(A).not.toBe(H);expect(A).toEqual(H)})})});describe("both",function(){it("should call convert if the value is defined",function(){K=new G({convertAndDefaultValue:11});expect(L).toBe(true);expect(K.get("convertAndDefaultValue")).toBe(11)});it("should not call convert if the value is undefined",function(){K=new G({});expect(L).toBe(false)});it("should assign the default if the value is undefined",function(){K=new G({});expect(K.get("convertAndDefaultValue")).toBe(16)});it("should assign the defaultValue if convert returns null",function(){J=true;E=undefined;K=new G({convertAndDefaultValue:11});expect(L).toBe(true);expect(K.get("convertAndDefaultValue")).toBe(16)})})});describe("getting values",function(){var C,B;beforeEach(function(){C=Ext.define("spec.A",{extend:Ext.data.Model,fields:["aField"]})});afterEach(function(){Ext.undefine("spec.A");C=B=null});it("should return a value that was in the fields collection",function(){B=new C({aField:"foo"});expect(B.get("foo"))});it("should return a value not in the fields collection",function(){B=new C({other:"foo"});expect(B.get("other"))});it("should return the value unchanged",function(){var A={};B=new C({aField:A});expect(B.get("aField")).toBe(A)})});describe("setting values",function(){var A,B;var C=function(D){D=Ext.apply({extend:Ext.data.Model,fields:[{name:"id",type:"int"},"name",{name:"dob",type:"date"},{name:"rank",type:"int"}]},D);A=Ext.define("spec.Person",D)};afterEach(function(){Ext.undefine("spec.Person");A=B=null});describe("without dependencies",function(){it("should set a single key/value",function(){C();B=new A();var D=B.set("rank",3);expect(B.get("rank")).toBe(3);expect(D).toEqual(["rank"])});it("should set a key value pairs",function(){C();B=new A();var D=B.set({name:"Foo",rank:4});expect(B.get("name")).toBe("Foo");expect(B.get("rank")).toBe(4);expect(D).toEqual(["name","rank"])});it("should set a value not in the fields collection",function(){C();B=new A();var D=B.set("other",1);expect(B.get("other")).toBe(1);expect(D).toEqual(["other"])});it("should only return fields that were modified",function(){C();B=new A({name:"Foo",rank:3});var D=B.set({name:"Bar",rank:3});expect(D).toEqual(["name"])})});describe("with dependencies",function(){var E;var D=function(G,F){F=Ext.apply({extend:Ext.data.Model,fields:G},F);E=Ext.define("spec.A",F)};afterEach(function(){E=null});it("should not trigger any dependencies if setting a field that doesn't require it",function(){var G=jasmine.createSpy();D(["name","age",{name:"doubleAge",depends:"age",convert:G}]);B=new E();G.reset();var F=B.set("name","foo");expect(G).not.toHaveBeenCalled();expect(F).toEqual(["name"])});it("should not trigger the dependency if the value doesn't change",function(){var F=jasmine.createSpy();D(["a",{name:"b",depends:"a",convert:F}]);B=new E({a:1});F.reset();B.set("a",1);expect(F).not.toHaveBeenCalled()});it("should trigger a simple dependency",function(){var F=false;D(["name","age",{name:"doubleAge",depends:"age",convert:function(I,H){F=true;return H.get("age")*2}}]);B=new E();var G=B.set("age",10);expect(F).toBe(true);expect(B.get("doubleAge")).toBe(20);expect(G).toEqual(["age","doubleAge"])});it("should not trigger the convert until all dependent fields are set",function(){D(["a","b",{name:"c",depends:["a","b"],convert:function(H,G){return G.get("a")+G.get("b")}}]);B=new E();var F=B.set({a:1,b:3});expect(B.get("c")).toBe(4);expect(F).toEqual(["a","b","c"])});it("should trigger the convert function if either of the dependent fields are set",function(){D(["a","b",{name:"c",depends:["a","b"],convert:function(H,G){return G.get("a")+G.get("b")}}]);B=new E({a:1,b:1});var F=B.set("a",2);expect(B.get("c")).toBe(3);expect(F).toEqual(["a","c"]);F=B.set("b",2);expect(B.get("c")).toBe(4);expect(F).toEqual(["b","c"])});it("should trigger cascading converts",function(){D(["a",{name:"b",depends:"a",convert:function(H,G){return G.get("a")+1}},{name:"c",depends:"b",convert:function(H,G){return G.get("b")+1}},{name:"d",depends:"c",convert:function(H,G){return G.get("c")+1}}]);B=new E();var F=B.set("a",1);expect(B.get("b")).toBe(2);expect(B.get("c")).toBe(3);expect(B.get("d")).toBe(4);expect(F).toEqual(["a","b","c","d"])});it("should allow setting a calculated value",function(){D(["a",{name:"b",depends:"a",convert:function(H,G){return G.get("a")+1}},{name:"c",depends:"b",convert:function(H,G){return G.get("b")+1}}]);B=new E();var F=B.set("b",3,{convert:false});expect(B.get("c")).toBe(4);expect(F).toEqual(["b","c"])});it("should be able to set independent calculated fields at once",function(){D(["a",{name:"b",depends:"a",convert:function(H,G){return G.get("a")+1}},"c",{name:"d",depends:"c",convert:function(H,G){return G.get("c")+1}}]);B=new E();var F=B.set({a:1,c:1});expect(B.get("b")).toBe(2);expect(B.get("d")).toBe(2);expect(F).toEqual(["a","c","b","d"])});it("should allow setting a value its calculated dependent",function(){D(["a",{name:"b",depends:"a",convert:function(G,F){return F.get("a")+1}},{name:"c",depends:"b",convert:function(G,F){return F.get("b")+1}}]);B=new E();B.set({a:1,b:100});expect(B.get("b")).toBe(2);expect(B.get("c")).toBe(3)})});describe("associations",function(){it("should be able to set a foreign key value for a not-loaded association",function(){C({fields:[{name:"addressId",reference:"Address",unique:true}]});B=new A();expect(function(){B.set("addressId",1)}).not.toThrow()})});it("should update the id property if the id changes",function(){C();B=new A();B.set("id",1);expect(B.id).toBe(1)});it("should not call the store while the editing flag is set",function(){C();B=new A();spyOn(B,"callJoined");B.beginEdit();B.set("rank",1);expect(B.callJoined).not.toHaveBeenCalled()});it("should not call the store if there are no modified fields",function(){C();B=new A({rank:1});spyOn(B,"callJoined");B.set("rank",1);expect(B.callJoined).not.toHaveBeenCalled()});describe("options",function(){describe("convert",function(){it("should convert by default",function(){C();B=new A();B.set("rank","1");expect(B.get("rank")).toBe(1)});it("should be convert when passed into the method",function(){C();B=new A();B.set("rank","1",{convert:true});expect(B.get("rank")).toBe(1)});it("should not convert when passed false",function(){C();B=new A();B.set("rank","1",{convert:false});expect(B.get("rank")).toBe("1")});it("should accept options when using the object form",function(){C();B=new A();B.set({rank:"1"},{convert:true});expect(B.get("rank")).toBe(1)})});describe("commit",function(){beforeEach(function(){C()});var D={commit:true};it("should default to false",function(){B=new A();B.set("rank",1);expect(B.dirty).toBe(true)});it("should have no modified fields",function(){B=new A({rank:1});B.set("rank",2,D);expect(B.isModified("rank")).toBe(false)});it("should not be dirty",function(){B=new A({rank:1});B.set("rank",2,D);expect(B.dirty).toBe(false)});it("should call commit even if no fields were modified",function(){B=new A({rank:1});spyOn(B,"commit");B.set("rank",1,D);expect(B.commit).toHaveBeenCalled()});it("should pass the modified fields to commit",function(){B=new A({rank:1});spyOn(B,"commit");B.set({name:"Foo",rank:2},D);expect(B.commit.mostRecentCall.args[1]).toEqual(["name","rank"])});it("should call commit with silent: true if the silent option is passed",function(){B=new A({rank:1});spyOn(B,"commit");B.set("rank",2,{commit:true,silent:true});expect(B.commit.mostRecentCall.args[0]).toBe(true)});it("should not trigger the normal after edit call",function(){B=new A({rank:1});spyOn(B,"callJoined");B.set("rank",2,D);expect(B.callJoined).not.toHaveBeenCalledWith("afterEdit")})});describe("dirty",function(){it("should still return fields in the modified collection with dirty: false",function(){C();B=new A();var D=B.set("rank",1,{dirty:false});expect(D).toEqual(["rank"])})});describe("silent",function(){it("should not trigger the store if the silent flag is set",function(){C();B=new A();spyOn(B,"callJoined");B.set("rank",1,{silent:true});expect(B.callJoined).not.toHaveBeenCalled()})})})});describe("calculated fields",function(){var B,C,A;beforeEach(function(){B=Ext.define(null,{extend:"Ext.data.Model",fields:["name","rank","serialNumber",{name:"calc",calculate:function(D){return D.name+D.rank+D.serialNumber}}]});C=B.getField("calc");A=new B({name:"Don",rank:"Peon",serialNumber:"1234"})});it("should determine the depends by parsing the method",function(){expect(C.depends).toEqual(["name","rank","serialNumber"]);expect(A.data.calc).toBe("DonPeon1234")});it("should react to changes in dependent fields",function(){var D,E;A.join({afterEdit:function(F,G){D=F;E=G;G.sort()}});A.set({name:"Evan",serialNumber:"4321"});expect(D).toBe(A);expect(E).toEqual(["calc","name","serialNumber"]);expect(A.data.calc).toBe("EvanPeon4321");expect(A.getPrevious("name")).toBe("Don");expect(A.getPrevious("calc")).toBe("DonPeon1234")})});describe("value tracking",function(){var A,B;beforeEach(function(){A=Ext.define("spec.Person",{extend:Ext.data.Model,fields:[{name:"id",type:"int"},"name",{name:"dob",type:"date"},{name:"rank",type:"int"},{name:"active",persist:false}]})});afterEach(function(){A=B=null});describe("simple modifications",function(){describe("dirty",function(){it("should not be dirty when constructed",function(){B=new A();expect(B.dirty).toBe(false)});it("should not be dirty when constructed with values",function(){B=new A({id:1,name:"Foo",rank:3});expect(B.dirty).toBe(false)});it("should not be dirty when setting a value and it doesn't change",function(){B=new A({rank:1});B.set("rank",1);expect(B.dirty).toBe(false)});it("should not be dirty if setting a non-persistent field",function(){B=new A();B.set("active",false);expect(B.dirty).toBe(false)});it("should be dirty if a field changes value",function(){B=new A();B.set("rank",1);expect(B.dirty).toBe(true)});it("should be dirty if a non-field changes value",function(){B=new A();B.set("notField",2);expect(B.dirty).toBe(true)});it("should be dirty when setting multiple fields",function(){B=new A();B.set({name:"X",rank:17});expect(B.dirty).toBe(true)});it("should be dirty when reverting only a single modified field",function(){B=new A({rank:1,name:"Foo"});B.set({rank:2,name:"Bar"});B.set("rank",1);expect(B.dirty).toBe(true)});it("should be not dirty when reverting all modified fields",function(){B=new A({rank:1,name:"Foo"});B.set({rank:2,name:"Bar"});B.set("rank",1);B.set("name","Foo");expect(B.dirty).toBe(false)});it("should not set dirty if the dirty: false option is passed",function(){B=new A();B.set("rank",1,{dirty:false});expect(B.dirty).toBe(false)})});describe("modified",function(){describe("isModified",function(){it("should not have modified fields when constructed with no vales",function(){B=new A();expect(B.isModified("name")).toBe(false);expect(B.isModified("rank")).toBe(false)});it("should not have modified fields when constructed with data",function(){B=new A({name:"Foo",rank:1});expect(B.isModified("name")).toBe(false);expect(B.isModified("rank")).toBe(false)});it("should not have a modified field if the value doesn't change",function(){B=new A({name:"Foo",rank:1});B.set("name","Foo");expect(B.isModified("name")).toBe(false)});it("should not have a modified field if it's persist: false",function(){B=new A();B.set("active","true");expect(B.isModified("active")).toBe(false)});it("should have a modified field if a field changes value",function(){B=new A();B.set("rank",1);expect(B.isModified("rank")).toBe(true)});it("should have modified fields if multiple fields change",function(){B=new A();B.set({name:"Foo",rank:3});expect(B.isModified("name")).toBe(true);expect(B.isModified("rank")).toBe(true)});it("should have a modified field if a non-field changes",function(){B=new A();B.set("other","foo");expect(B.isModified("other")).toBe(true)});it("should not be modified when reverting a field",function(){B=new A({name:"Foo",rank:1});B.set({name:"Bar",rank:3});B.set("name","Foo");expect(B.isModified("name")).toBe(false);expect(B.isModified("rank")).toBe(true)});it("should not be modified when passing dirty: false",function(){B=new A();B.set("rank",1,{dirty:false});expect(B.isModified("rank")).toBe(false)})});describe("getModified",function(){it("should return undefined if there's no modified value",function(){B=new A();expect(B.getModified("name")).toBeUndefined()});it("should return the previous value when modified",function(){B=new A({rank:1});B.set("rank",2);expect(B.getModified("rank")).toBe(1)});it("should return the original value when modified",function(){B=new A({rank:1});B.set("rank",2);B.set("rank",3);B.set("rank",4);expect(B.getModified("rank")).toBe(1)});it("should return undefined if the modified value is set back to the original",function(){B=new A({rank:1});B.set("rank",2);B.set("rank",1);expect(B.getModified("rank")).toBeUndefined()})})});describe("previousValue",function(){it("should return undefined if there's no previous value",function(){B=new A();expect(B.getPrevious("name")).toBeUndefined()});it("should return the previous value when the value changes",function(){B=new A({name:"Foo"});B.set("name","Bar");expect(B.getPrevious("name")).toBe("Foo")});it("should return the most recent previous value when the value changes",function(){B=new A({name:"Foo"});B.set("name","Bar");B.set("name","Baz");expect(B.getPrevious("name")).toBe("Bar");B.set("name","Blah");expect(B.getPrevious("name")).toBe("Baz")});it("should not update the previousValue if the value doesn't change",function(){B=new A({name:"Foo"});B.set("name","Bar");B.set("name","Bar");expect(B.getPrevious("name")).toBe("Foo")})})});describe("editing",function(){it("should set the editing flag when beginEdit is called",function(){B=new A();B.beginEdit();expect(B.editing).toBe(true)});it("should update the modified values during editing",function(){B=new A({name:"Foo",rank:1});B.beginEdit();B.set("name","Bar");expect(B.getModified("name")).toBe("Foo")});it("should update the previous values during editing",function(){B=new A({name:"Foo",rank:1});B.beginEdit();B.set("name","Bar");expect(B.getPrevious("name")).toBe("Foo")});it("should update the dirty state during editing",function(){B=new A();B.beginEdit();B.set("name","Foo");expect(B.dirty).toBe(true)});describe("cancelEdit",function(){it("should clear the editing flag when cancelEdit is called",function(){B=new A();B.beginEdit();B.cancelEdit();expect(B.editing).toBe(false)});it("should restore data values to the previous state",function(){B=new A({name:"Name1",rank:1});B.beginEdit();B.set({name:"Name2",rank:2});B.cancelEdit();expect(B.get("name")).toBe("Name1");expect(B.get("rank")).toBe(1)});it("should restore modified values to the previous state",function(){B=new A({name:"Name1",rank:1});B.set("name","Name2");B.beginEdit();B.set("rank",2);B.cancelEdit();expect(B.getModified("name")).toBe("Name1");expect(B.isModified("rank")).toBe(false)});it("should restore the previousValues state",function(){B=new A({name:"Name1",rank:1});B.set("name","Name2");B.set({name:"Name3",rank:3});B.beginEdit();B.set({name:"Name4",rank:4});B.set({name:"Name5",rank:5});B.cancelEdit();expect(B.getPrevious("Name2"));expect(B.getPrevious("rank")).toBe(1)});it("should restore the dirty state",function(){B=new A();B.beginEdit();B.set("name","Foo");B.cancelEdit();expect(B.dirty).toBe(false)})});describe("endEdit",function(){it("should clear the editing flag when endEdit is called",function(){B=new A();B.beginEdit();B.endEdit();expect(B.editing).toBe(false)});it("should not modify the data values",function(){B=new A({name:"Name1",rank:1});B.beginEdit();B.set({name:"Name2",rank:2});B.endEdit();expect(B.get("name")).toBe("Name2");expect(B.get("rank")).toBe(2)});it("should not modify the modified values",function(){B=new A({name:"Name1",rank:1});B.set("name","Name2");B.beginEdit();B.set("rank",2);B.endEdit();expect(B.getModified("name")).toBe("Name1");expect(B.getModified("rank")).toBe(1)});it("should restore the previousValues",function(){B=new A({name:"Name1",rank:1});B.set("name","Name2");B.beginEdit();B.set({name:"Name3",rank:3});B.set({name:"Name4",rank:4});B.endEdit();expect(B.getPrevious("name")).toBe("Name1");expect(B.getPrevious("rank")).toBeUndefined()});it("should not modify the dirty state",function(){B=new A({name:"Name1",rank:1});B.beginEdit();B.set("rank",2);B.endEdit();expect(B.dirty).toBe(true)});it("should call the store if the record is dirty with the modified fields",function(){var C,D;B=new A();B.join({afterEdit:function(E,F){C=E;D=F;F.sort()}});B.beginEdit();B.set("name","Foo");B.set("rank",1);B.endEdit();expect(C).toBe(B);expect(D).toEqual(["name","rank"])});it("should not call the store if the record is not dirty",function(){B=new A();B.beginEdit();spyOn(B,"callJoined");B.endEdit();expect(B.callJoined).not.toHaveBeenCalled()});describe("options",function(){it("should not call the store if silent is passed & it's dirty",function(){B=new A();B.beginEdit();B.set("name","Foo");spyOn(B,"callJoined");B.endEdit(true);expect(B.callJoined).not.toHaveBeenCalled()});it("should not call the store if silent is modified fields are passed",function(){B=new A();B.beginEdit();B.set("name","Foo");spyOn(B,"callJoined");B.endEdit(true,["foo"]);expect(B.callJoined).not.toHaveBeenCalled()});it("should call the store even if not dirty if modified fields are passed",function(){var C,D;B=new A();B.join({afterEdit:function(E,F){C=E;D=F}});B.beginEdit();B.endEdit(false,["foo"]);expect(C).toBe(B);expect(D).toEqual(["foo"])})})})});describe("commit",function(){it("should clear the dirty state",function(){B=new A();B.set("rank",1);B.commit();expect(B.dirty).toBe(false)});it("should clear the editing flag",function(){B=new A();B.beginEdit();B.set("rank",1);B.commit();expect(B.editing).toBe(false)});it("should have no modified fields",function(){B=new A({name:"Name1",rank:1});B.set({name:"Name2",rank:2});B.commit();expect(B.isModified("name")).toBe(false);expect(B.isModified("rank")).toBe(false)});it("should have no effect on previous values",function(){B=new A({name:"Name1",rank:1});expect(B.getPrevious("name")).toBeUndefined();expect(B.getPrevious("rank")).toBeUndefined();B.set({name:"Name2",rank:2});expect(B.getPrevious("name")).toBe("Name1");expect(B.getPrevious("rank")).toBe(1);B.commit();expect(B.getPrevious("name")).toBe("Name1");expect(B.getPrevious("rank")).toBe(1)});describe("calling the store with afterCommit",function(){it("should be called",function(){B=new A();spyOn(B,"callJoined");B.commit();expect(B.callJoined).toHaveBeenCalled();expect(B.callJoined.mostRecentCall.args[0]).toBe("afterCommit")});it("should not be called if silent is passed",function(){B=new A();spyOn(B,"callJoined");B.commit(true);expect(B.callJoined).not.toHaveBeenCalled()});it("should pass the modified fields if passed",function(){var C,D;B=new A();B.join({afterCommit:function(E,F){C=E;D=F}});B.commit(false,["foo"]);expect(C).toBe(B);expect(D).toEqual(["foo"])})})});describe("reject",function(){it("should clear the dirty state",function(){B=new A();B.set("rank",1);B.reject();expect(B.dirty).toBe(false)});it("should clear the editing flag",function(){B=new A();B.beginEdit();B.set("rank",1);B.reject();expect(B.editing).toBe(false)});it("should have no modified fields",function(){B=new A({name:"Name1",rank:1});B.set({name:"Name2",rank:2});B.reject();expect(B.isModified("name")).toBe(false);expect(B.isModified("rank")).toBe(false)});it("should update previous values",function(){B=new A({name:"Name1",rank:1});expect(B.getPrevious("name")).toBeUndefined();expect(B.getPrevious("rank")).toBeUndefined();B.set({name:"Name2",rank:2});expect(B.getPrevious("name")).toBe("Name1");expect(B.getPrevious("rank")).toBe(1);B.reject();expect(B.getPrevious("name")).toBe("Name2");expect(B.getPrevious("rank")).toBe(2)});describe("after reject",function(){it("should be called",function(){B=new A();spyOn(B,"callJoined");B.reject();expect(B.callJoined).toHaveBeenCalled();expect(B.callJoined.mostRecentCall.args[0]).toBe("afterReject")});it("should not be called if silent is passed",function(){B=new A();spyOn(B,"callJoined");B.reject(true);expect(B.callJoined).not.toHaveBeenCalled()})});describe("other callbacks",function(){it("should not call afterEdit/afterCommit",function(){B=new A();B.set("name","Foo");spyOn(B,"callJoined");B.reject();expect(B.callJoined.callCount).toBe(1);expect(B.callJoined.mostRecentCall.args[0]).toBe("afterReject")})})})});describe("getData",function(){var B;beforeEach(function(){B=Ext.define(null,{extend:"Ext.data.Model",fields:["id","name"]})});afterEach(function(){B=null});it("should return all the fields in the model",function(){var A=new B({id:1,name:"Foo"});expect(A.getData()).toEqual({id:1,name:"Foo"})});it("should include non-field data",function(){var A=new B({id:1,other:"val"});expect(A.getData().other).toBe("val")});describe("with associations",function(){var A;function C(D,F){var E=new Ext.data.reader.Json({model:D});return E.read(F).getRecords()[0]}describe("basic many to one",function(){var D,E;beforeEach(function(){D=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});E=Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["id","content",{name:"userId",reference:"User"}]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Post");D=E=null});describe("the one",function(){it("should not include the key if the item does not exist",function(){A=C(E,{id:1});var F=A.getAssociatedData();expect(F).toEqual({})});it("should not trigger the item to load",function(){A=C(E,{id:1});A.getAssociatedData();var F=A.getAssociatedData();expect(F).toEqual({})});it("should include the single record",function(){A=C(E,{id:1,user:{id:17,name:"Foo"}});var F=A.getAssociatedData();expect(F).toEqual({user:{id:17,name:"Foo"}})});it("should not include the many on each item",function(){A=C(E,{id:1,user:{id:17,name:"Foo"}});expect(A.getAssociatedData().user.posts).toBeUndefined()})});describe("the many",function(){it("should not include the key if the store does not exist",function(){A=C(D,{id:1});var F=A.getAssociatedData();expect(F).toEqual({})});it("should not trigger the item to load",function(){A=C(D,{id:1});A.getAssociatedData();var F=A.getAssociatedData();expect(F).toEqual({})});it("should include the key if the store exists but is empty",function(){A=C(D,{id:1,posts:[]});var F=A.getAssociatedData();expect(F).toEqual({posts:[]})});it("should include the many records",function(){A=C(D,{id:17,posts:[{id:1,content:"PostA",userId:17},{id:2,content:"PostB",userId:17},{id:3,content:"PostC",userId:17}]});var F=A.getAssociatedData();expect(F).toEqual({posts:[{id:1,content:"PostA",userId:17},{id:2,content:"PostB",userId:17},{id:3,content:"PostC",userId:17}]})});it("should not include the one on each many",function(){A=C(D,{id:17,posts:[{id:1,content:"PostA",userId:17},{id:2,content:"PostB",userId:17}]});var G=A.posts();var I=G.getAt(0);var F=G.getAt(1);expect(I.user).toBe(A);expect(F.user).toBe(A);var H=A.getAssociatedData().posts;expect(H[0].user).toBeUndefined();expect(H[1].user).toBeUndefined()});it("should not recurse from many to one to many",function(){A=C(D,{id:17,posts:[{id:1,content:"PostA",userId:17},{id:2,content:"PostB",userId:17}]});var F=A.posts();var G=F.getAt(0);var H=G.getData({associated:true});expect(H).toEqual({id:1,content:"PostA",userId:17,user:{id:17,posts:[{id:1,content:"PostA",userId:17},{id:2,content:"PostB",userId:17}]}})})})});describe("basic one to one",function(){var D,E;beforeEach(function(){D=Ext.define("spec.Person",{extend:"Ext.data.Model",fields:["id","name",{name:"passportId",unique:true,reference:"Passport"}]});E=Ext.define("spec.Passport",{extend:"Ext.data.Model",fields:["id","expires"]})});afterEach(function(){Ext.undefine("spec.Person");Ext.undefine("spec.Passport");D=E=null});describe("the key holder",function(){it("should not include the key if the item does not exist",function(){A=C(D,{id:1});var F=A.getAssociatedData();expect(F).toEqual({})});it("should not trigger the item to load",function(){A=C(D,{id:1});A.getAssociatedData();var F=A.getAssociatedData();expect(F).toEqual({})});it("should include the single record",function(){A=C(D,{id:1,passport:{id:22,expires:"2000-01-01"}});var F=A.getAssociatedData();expect(F).toEqual({passport:{id:22,expires:"2000-01-01"}})});it("should not include the key holder on each non-key holder",function(){A=C(D,{id:1,passport:{id:22,expires:"2000-01-01"}});var F=A.getAssociatedData();expect(F.passport.user).toBeUndefined()})});describe("the non key holder",function(){it("should not include the key if the item does not exist",function(){A=C(E,{id:1});var F=A.getAssociatedData();expect(F).toEqual({})});it("should not trigger the item to load",function(){A=C(E,{id:1});A.getAssociatedData();var F=A.getAssociatedData();expect(F).toEqual({})});it("should include the single record",function(){A=C(E,{id:1,person:{id:45,name:"Foo"}});var F=A.getAssociatedData();expect(F).toEqual({person:{id:45,name:"Foo"}})});it("should not include the non-key holder on each key holder",function(){A=C(E,{id:1,person:{id:45,name:"Foo"}});A.person.passport=A;var F=A.getAssociatedData();expect(F.person.passport).toBeUndefined()})})});describe("basic many to many",function(){var F,D,E;beforeEach(function(){F=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name",{name:"profileId",reference:"Profile",unique:true}],manyToMany:"Group"});D=Ext.define("spec.Group",{extend:"Ext.data.Model",fields:["id","name",{name:"profileId",reference:"Profile",unique:true}]});Profile=Ext.define("spec.Profile",{extend:"Ext.data.Model",fields:["id","content"]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Group");Ext.undefine("spec.Profile");Profile=F=D=null});describe("the left",function(){it("should not include the key if the item is not loaded",function(){A=C(F,{id:1});var G=A.getAssociatedData();expect(G).toEqual({})});it("should not trigger the item to load",function(){A=C(F,{id:1});A.getAssociatedData();var G=A.getAssociatedData();expect(G).toEqual({})});it("should include the key if the store exists but is empty",function(){A=C(F,{id:1,groups:[]});var G=A.getAssociatedData();expect(G).toEqual({groups:[]})});it("should include the child records",function(){A=C(F,{id:100,groups:[{id:1,name:"GroupA"},{id:2,name:"GroupB"},{id:3,name:"GroupC"}]});var G=A.getAssociatedData();expect(G).toEqual({groups:[{id:1,name:"GroupA"},{id:2,name:"GroupB"},{id:3,name:"GroupC"}]})});it("should not include the inverse on each child",function(){A=C(F,{id:100,groups:[{id:1,name:"GroupA"},{id:2,name:"GroupB"}]});var H=A.groups(),G=H.first().users(),I=H.last().users();H=A.getAssociatedData().groups;expect(H[0].users).toBeUndefined();expect(H[1].users).toBeUndefined()});it("should include other associations on the children",function(){A=C(F,{id:100,groups:[{id:1,name:"GroupA",profile:{id:22,content:"Foo"}},{id:2,name:"GroupB",profile:{id:33,content:"Bar"}}]});var G=A.getAssociatedData();expect(G).toEqual({groups:[{id:1,name:"GroupA",profile:{id:22,content:"Foo"}},{id:2,name:"GroupB",profile:{id:33,content:"Bar"}}]})})});describe("the right",function(){it("should not include the key if the item is not loaded",function(){A=C(D,{id:1});var G=A.getAssociatedData();expect(G).toEqual({})});it("should not trigger the item to load",function(){A=C(D,{id:1});A.getAssociatedData();var G=A.getAssociatedData();expect(G).toEqual({})});it("should include the key if the store exists but is empty",function(){A=C(D,{id:1,users:[]});var G=A.getAssociatedData();expect(G).toEqual({users:[]})});it("should include the child records",function(){A=C(D,{id:100,users:[{id:1,name:"UserA"},{id:2,name:"UserB"},{id:3,name:"UserC"}]});var G=A.getAssociatedData();expect(G).toEqual({users:[{id:1,name:"UserA"},{id:2,name:"UserB"},{id:3,name:"UserC"}]})});it("should not include the inverse on each child",function(){A=C(D,{id:100,users:[{id:1,name:"UserA"},{id:2,name:"UserB"}]});var I=A.users(),G=I.first().groups(),H=I.last().groups();I=A.getAssociatedData().users;expect(I[0].groups).toBeUndefined();expect(I[1].groups).toBeUndefined()});it("should include other associations on the children",function(){A=C(D,{id:100,users:[{id:1,name:"UserA",profile:{id:22,content:"Foo"}},{id:2,name:"UserB",profile:{id:33,content:"Bar"}}]});var G=A.getAssociatedData();expect(G).toEqual({users:[{id:1,name:"UserA",profile:{id:22,content:"Foo"}},{id:2,name:"UserB",profile:{id:33,content:"Bar"}}]})})})});describe("complex cases",function(){describe("nested data",function(){var D;beforeEach(function(){D=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});Ext.define("spec.Order",{extend:"Ext.data.Model",fields:["id","date",{name:"userId",reference:"User"}]});Ext.define("spec.OrderItem",{extend:"Ext.data.Model",fields:["id","price",{name:"orderId",reference:"Order"},{name:"productId",unique:true,reference:"Product"}]});Ext.define("spec.Product",{extend:"Ext.data.Model",fields:["id","name"]})});afterEach(function(){D=null;Ext.undefine("spec.User");Ext.undefine("spec.Order");Ext.undefine("spec.OrderItem");Ext.undefine("spec.Product")});it("should load nested associations",function(){A=C(D,{id:1,orders:[{id:1,date:"2010-01-01",orderItems:[{id:1,price:20,productId:1,product:{id:1,name:"Product1"}},{id:2,price:30,productId:2,product:{id:2,name:"Product2"}},{id:3,price:40,productId:1,product:{id:1,name:"Product1"}}]},{id:2,date:"2008-01-01",orderItems:[{id:4,price:50,productId:2,product:{id:2,name:"Product2"}},{id:5,price:60,productId:3,product:{id:3,name:"Product3"}},{id:6,price:70,productId:1,product:{id:1,name:"Product1"}}]}]});var E=A.getAssociatedData();expect(E).toEqual({orders:[{id:1,date:"2010-01-01",userId:1,orderItems:[{id:1,price:20,productId:1,orderId:1,product:{id:1,name:"Product1"}},{id:2,price:30,productId:2,orderId:1,product:{id:2,name:"Product2"}},{id:3,price:40,productId:1,orderId:1,product:{id:1,name:"Product1"}}]},{id:2,date:"2008-01-01",userId:1,orderItems:[{id:4,price:50,productId:2,orderId:2,product:{id:2,name:"Product2"}},{id:5,price:60,productId:3,orderId:2,product:{id:3,name:"Product3"}},{id:6,price:70,productId:1,orderId:2,product:{id:1,name:"Product1"}}]}]})})});describe("multiple associations of the same type",function(){var D;beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model"});D=Ext.define("spec.Ticket",{extend:"Ext.data.Model",fields:["id",{name:"creatorId",unique:true,reference:{type:"User",role:"creator"}},{name:"ownerId",unique:true,reference:{type:"User",role:"owner"}}]})});afterEach(function(){D=null;Ext.undefine("spec.User");Ext.undefine("spec.Ticket")});it("should be able to have multiple associations of the same type",function(){A=C(D,{id:1,creator:{id:1,name:"Foo"},owner:{id:2,name:"Bar"}});var E=A.getAssociatedData();expect(E).toEqual({creator:{id:1,name:"Foo"},owner:{id:2,name:"Bar"}})})});describe("recursive associations",function(){var D;beforeEach(function(){D=Ext.define("spec.Node",{extend:"Ext.data.Model",fields:["id","text",{name:"parentId",reference:{type:"Node",role:"parent",inverse:{role:"children"}}}]})});it("should read recursive associations",function(){A=C(D,{id:1,text:"Root",children:[{id:2,text:"Child1",children:[{id:5,text:"Child1.1"},{id:6,text:"Child1.2"}]},{id:3,text:"Child2",children:[{id:7,text:"Child2.1"}]},{id:4,text:"Child3",children:[{id:8,text:"Child3.1"},{id:9,text:"Child3.2"},{id:10,text:"Child3.3"}]}]});var E=A.getAssociatedData();expect(E).toEqual({children:[{id:2,parentId:1,text:"Child1",children:[{id:5,parentId:2,text:"Child1.1"},{id:6,parentId:2,text:"Child1.2"}]},{id:3,parentId:1,text:"Child2",children:[{id:7,parentId:3,text:"Child2.1"}]},{id:4,parentId:1,text:"Child3",children:[{id:8,parentId:4,text:"Child3.1"},{id:9,parentId:4,text:"Child3.2"},{id:10,parentId:4,text:"Child3.3"}]}]})})});describe("repeating records",function(){var D;beforeEach(function(){D=Ext.define("spec.Organization",{extend:"Ext.data.Model",fields:["id","name"]});Ext.define("spec.Group",{extend:"Ext.data.Model",fields:["id","name",{name:"organizationId",reference:"Organization"}]});Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name",{name:"groupId",reference:"Group"}]})});afterEach(function(){D=null;Ext.undefine("spec.Organization");Ext.undefine("spec.Group");Ext.undefine("spec.User")});it("should be able to repeat records with the same id",function(){A=C(D,{id:1,name:"Org",groups:[{id:1,name:"Group1",users:[{id:1,name:"Foo"}]},{id:2,name:"Group2",users:[{id:1,name:"Foo"}]},{id:3,name:"Group3",users:[{id:1,name:"Foo"}]}]});var E=A.getAssociatedData().groups;expect(E[0].users[0]).toEqual({id:1,groupId:1,name:"Foo"});expect(E[1].users[0]).toEqual({id:1,groupId:2,name:"Foo"});expect(E[2].users[0]).toEqual({id:1,groupId:3,name:"Foo"})})})})})});describe("validation",function(){var D,B;function C(A,F,E){E=Ext.apply({extend:Ext.data.Model,fields:F||["id","name","rank"],validators:A},E);D=Ext.define("spec.A",E)}afterEach(function(){D=B=null;Ext.undefine("spec.A")});describe("calling field validate/validators",function(){it("should call the field validate method if it exists and pass the value",function(){C();var E=D.getFields()[1];var A;E.validate=function(F){A=F;return true};B=new D({name:"Foo"});B.validate();expect(A).toBe("Foo")});it("should call a validator for a field, passing the value & record",function(){C({name:"presence"});var E=D.validators.name[0];spyOn(E,"validate");var A=new D({name:"Bar"});A.validate();expect(E.validate).toHaveBeenCalledWith("Bar",A)});it("should check all validators for a field",function(){C({name:["presence","email"]});var E=new D({});var F=Ext.data.validator.Validator.all,A=E.validate(),G=A.getByField("name");expect(G[0].message).toBe(F.presence.config.message);expect(G[1].message).toBe(F.email.config.message)});it("should call field.validate & a validator at the same time",function(){C({name:"presence"});var F=D.getFields()[1];var A;F.validate=function(G){A=G;return true};var E=D.validators.name[0];spyOn(E,"validate");B=new D({name:"Foo"});B.validate();expect(A).toBe("Foo");expect(E.validate).toHaveBeenCalledWith("Foo",B)});it("should call validate for each validator",function(){C({id:"presence",name:"presence"});var E=D.validators.id[0],F=D.validators.name[0];spyOn(E,"validate");spyOn(F,"validate");var A=new D({id:7,name:"Bar"});A.validate();expect(E.validate).toHaveBeenCalledWith(7,A);expect(F.validate).toHaveBeenCalledWith("Bar",A)})});describe("return types from validators",function(){var A;describe("field.validate",function(){it("should not add a message if true is returned",function(){C();var E=D.getFields()[1];E.validate=function(){};spyOn(E,"validate").andReturn(true);B=new D({name:"Foo"});A=B.validate();expect(A.get("name")).toBeUndefined()});it("should add a message if a message is returned",function(){C();var E=D.getFields()[1];E.validate=function(){};spyOn(E,"validate").andReturn("Failed");B=new D({name:"Foo"});A=B.validate();expect(A.get("name").getMessage()).toBe("Failed")});it("should add an empty error if false is returned",function(){C();var E=D.getFields()[1];E.validate=function(){};spyOn(E,"validate").andReturn(false);B=new D({name:"Foo"});A=B.validate();expect(A.get("name").getMessage()).toBeUndefined()})});describe("validator",function(){it("should not add a message if true is returned",function(){C({name:"presence"});var E=D.validators.name[0];spyOn(E,"validate").andReturn(true);B=new D({name:"Foo"});A=B.validate();expect(A.get("name")).toBeUndefined()});it("should add a message if a message is returned",function(){C({name:"presence"});var E=D.validators.name[0];spyOn(E,"validate").andReturn("Failed");B=new D({name:"Foo"});A=B.validate();expect(A.get("name").getMessage()).toBe("Failed")});it("should add an empty error if false is returned",function(){C({name:"presence"});var E=D.validators.name[0];spyOn(E,"validate").andReturn(false);B=new D({name:"Foo"});A=B.validate();expect(A.get("name").getMessage()).toBeUndefined()});it("should return an array of errors if there are more than 1",function(){C({name:["presence","email"]});var E=D.validators.name[0],F=D.validators.name[1];spyOn(E,"validate").andReturn("Fail1");spyOn(F,"validate").andReturn("Fail2");B=new D({name:"Foo"});A=B.validate();expect(A.get("name")[0].getMessage()).toBe("Fail1");expect(A.get("name")[1].getMessage()).toBe("Fail2")})});it("should allow field.validate & validator to push errors at the same time",function(){C({name:"presence"});var F=D.getFields()[1];F.validate=function(){};spyOn(F,"validate").andReturn("Fail1");var E=D.validators.name[0];spyOn(E,"validate").andReturn("Fail2");B=new D({name:"Foo"});A=B.validate();expect(A.get("name")[0].getMessage()).toBe("Fail1");expect(A.get("name")[1].getMessage()).toBe("Fail2")});it("should return an Ext.data.ErrorCollection object",function(){C();B=new D();expect(B.validate() instanceof Ext.data.ErrorCollection).toBe(true)})});describe("isValid",function(){it("should return true if the model is valid",function(){C({name:"presence"});var A=new D({name:"Foo"});expect(A.isValid()).toBe(true)});it("should return false if the model is not valid",function(){C({name:"presence"});var A=new D({name:null});expect(A.isValid()).toBe(false)})})});describe("synchronize validators with the Validation record",function(){var B,A;beforeEach(function(){B=Ext.define(null,{extend:Ext.data.Model,fields:[{name:"first",type:"string"},{name:"last",type:"string",convert:null},{name:"email",type:"string"},{name:"formatField",type:"string"},{name:"phone",type:"string",convert:null},{name:"color",type:"string"},{name:"description",type:"string"},{name:"initial",type:"string"}],validators:{last:"presence",description:{type:"length",min:10,max:200},color:{type:"inclusion",list:["red","white","blue"]},first:{type:"exclusion",list:["Ed"]},formatField:{type:"format",matcher:/123/},email:"email",phone:{type:"presence",message:"Phone number required"}},doValidate:function(){}})});describe("the legacy Errors object",function(){var D=Ext.data.validator.Validator.all,C;beforeEach(function(){A=new B({description:"too short",color:"not a valid color",first:"Ed",formatField:"abc",email:"abc"});C=A.validate()});it("should report valid object as having no errors",function(){A=new B({description:"long enough",color:"red",first:"Don",last:"Griffin",formatField:"123",email:"don@sencha.com",phone:"555-1212"});C=A.validate();expect(C.length).toEqual(0)});it("should collect failing validations into an Errors object",function(){expect(C instanceof Ext.data.Errors).toBe(true)});it("should produce ErrorCollection as an alias for Errors",function(){expect(C instanceof Ext.data.ErrorCollection).toBe(true)});it("should have the correct number of error messages",function(){expect(C.length).toEqual(7)});it("should hold Errors in an items array",function(){expect(C.items.length).toEqual(7)});it("should have the correct non-presence message",function(){var E=C.getByField("last")[0];expect(E.message).toEqual(D.presence.config.message)});it("should have the correct bad length message",function(){var E=C.getByField("description")[0];expect(E.message).toEqual("Length must be between 10 and 200")});it("should have the correct bad format message",function(){var E=C.getByField("formatField")[0];expect(E.message).toEqual(D.format.config.message)});it("should have the correct non-inclusion message",function(){var E=C.getByField("color")[0];expect(E.message).toEqual(D.inclusion.config.message)});it("should have the correct non-exclusion message",function(){var E=C.getByField("first")[0];expect(E.message).toEqual(D.exclusion.config.message)});it("should have the correct bad email format message",function(){var E=C.getByField("email")[0];expect(E.message).toEqual(D.email.config.message)});it("should allow user-defined error messages",function(){var E=C.getByField("phone")[0];expect(E.message).toEqual("Phone number required")})})});describe("support for legacy validations",function(){var E,B,D=function(G){return G},C=function(G){return G},A=function(G){return G},F=function(G){return G?G.toUpperCase():""};beforeEach(function(){E=Ext.define(null,{extend:Ext.data.Model,fields:[{name:"id"},{name:"first",type:"string",convert:D},{name:"last",type:"string",convert:null},{name:"email",type:"string"},{name:"formatField",type:"string"},{name:"phone",type:"string",convert:C},{name:"color",type:"string"},{name:"description",type:"string",convert:A},{name:"nopersist",type:"string",persist:false},{name:"initial",type:"string",convert:F}],validations:[{type:"presence",field:"last"},{type:"length",field:"description",min:10,max:200},{type:"inclusion",field:"color",list:["red","white","blue"]},{type:"exclusion",field:"first",list:["Ed"]},{type:"format",field:"formatField",matcher:/123/},{type:"email",field:"email"},{type:"presence",field:"phone",message:"Phone number required"}],doValidate:function(){}})});describe("the Errors object",function(){var H=Ext.data.validator.Validator.all,G;beforeEach(function(){B=new E({description:"too short",color:"not a valid color",first:"Ed",formatField:"abc",email:"abc"});G=B.validate()});it("should report valid object as having no errors",function(){B=new E({description:"long enough",color:"red",first:"Don",last:"Griffin",formatField:"123",email:"don@sencha.com",phone:"555-1212"});G=B.validate();expect(G.length).toEqual(0)});it("should collect failing validations into an Errors object",function(){expect(G instanceof Ext.data.Errors).toBe(true)});it("should produce ErrorCollection as an alias for Errors",function(){expect(G instanceof Ext.data.ErrorCollection).toBe(true)});it("should have the correct number of error messages",function(){expect(G.length).toEqual(7)});it("should hold Errors in an items array",function(){expect(G.items.length).toEqual(7)});it("should have the correct non-presence message",function(){var I=G.getByField("last")[0];expect(I.message).toEqual(H.presence.config.message)});it("should have the correct bad length message",function(){var I=G.getByField("description")[0];expect(I.message).toEqual("Length must be between 10 and 200")});it("should have the correct bad format message",function(){var I=G.getByField("formatField")[0];expect(I.message).toEqual(H.format.config.message)});it("should have the correct non-inclusion message",function(){var I=G.getByField("color")[0];expect(I.message).toEqual(H.inclusion.config.message)});it("should have the correct non-exclusion message",function(){var I=G.getByField("first")[0];expect(I.message).toEqual(H.exclusion.config.message)});it("should have the correct bad email format message",function(){var I=G.getByField("email")[0];expect(I.message).toEqual(H.email.config.message)});it("should allow user-defined error messages",function(){var I=G.getByField("phone")[0];expect(I.message).toEqual("Phone number required")})})});describe("copy/clone",function(){var B,D,C,A;beforeEach(function(){B=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["name","age","startDate"]})});afterEach(function(){Ext.destroy(A);Ext.undefine("spec.User");B=D=C=A=null});describe("copy",function(){it("should return a model of the same type",function(){D=new B();C=D.copy();expect(C.self).toBe(D.self)});it("should copy data across and retain types, but the data object should be different",function(){var E=new Date();D=new B({name:"Foo",age:12,startDate:E});C=D.copy();expect(C.get("name")).toBe("Foo");expect(C.get("age")).toBe(12);expect(C.get("startDate")).toBe(E);expect(C.data).not.toBe(D.data)});it("should copy across non-fields",function(){D=new B({nonField:100});C=D.copy();expect(C.get("nonField")).toBe(100)});it("should not be dirty/phantom/modified",function(){D=new B({name:"Foo"});D.set("name","Bar");C=D.copy();expect(C.phantom).toBe(false);expect(C.dirty).toBe(false);expect(C.isModified("name")).toBe(false)});describe("the id",function(){it("should copy the id",function(){D=new B({id:1});C=D.copy();expect(C.id).toBe(1)});it("should generate a new id when null is passed",function(){D=new B();C=D.copy(null);expect(C.id).not.toBe(D.id)});it("should use a passed id",function(){D=new B({id:10});C=D.copy(20);expect(C.id).toBe(20)});it("should allow an id of 0",function(){D=new B({id:1});C=D.copy(0);expect(C.id).toBe(0)})});describe("session",function(){beforeEach(function(){A=new Ext.data.Session()});it("should add the record to the passed session",function(){D=new B();C=D.copy(null,A);expect(A.peekRecord("User",C.id)).toBe(C)});it("should not copy a session by default",function(){D=new B({id:1},A);C=D.copy();expect(C.session).toBeNull()})})});describe("clone",function(){it("should return a model of the same type",function(){D=new B();C=D.clone();expect(C.self).toBe(D.self)});it("should copy data across and retain types, but the data object should be different",function(){var E=new Date();D=new B({name:"Foo",age:12,startDate:E});C=D.clone();expect(C.get("name")).toBe("Foo");expect(C.get("age")).toBe(12);expect(C.get("startDate")).toBe(E);expect(C.data).not.toBe(D.data)});it("should copy across non-fields",function(){D=new B({nonField:100});C=D.clone();expect(C.get("nonField")).toBe(100)});describe("model states",function(){it("should copy across phantom state",function(){D=new B();C=D.clone();expect(C.phantom).toBe(true)});it("should copy across the modified state",function(){D=new B({name:"Foo"});D.set("name","Bar");C=D.clone();expect(C.isModified("name")).toBe(true)});it("should copy across the dirty state",function(){D=new B({name:"Foo"});D.set("name","Bar");C=D.clone();expect(C.dirty).toBe(true)});it("should copy the dropped state",function(){D=new B();D.drop();C=D.clone();expect(C.dropped).toBe(true)})});describe("session",function(){beforeEach(function(){A=new Ext.data.Session()});it("should add the record to the passed session",function(){D=new B();C=D.clone(A);expect(A.peekRecord("User",C.id)).toBe(C)});it("should not copy a session by default",function(){D=new B({id:1},A);C=D.clone();expect(C.session).toBeNull()})})})})});