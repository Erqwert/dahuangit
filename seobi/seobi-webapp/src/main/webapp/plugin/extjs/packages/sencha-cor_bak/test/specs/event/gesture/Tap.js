describe("Ext.event.gesture.Tap",function(){var B=Ext.event.gesture.Tap,A;describe("constructor()",function(){});describe("members",function(){beforeEach(function(){A=new B()});describe("onTouchStart()",function(){it("should invoke fail() with reason NOT_SINGLE_TOUCH if the number of touches is not 1",function(){spyOn(A,"fail");var C=Ext.testHelper.createTouchEvent({changedTouches:[{x:0,y:0}],touches:[{},{}]});A.onTouchStart(C);expect(A.fail).toHaveBeenCalledWith(B.NOT_SINGLE_TOUCH)})});describe("onTouchMove()",function(){it("should not invoke fail() if the distance if less than 'moveDistance' config",function(){spyOn(A,"fail");A.setMoveDistance(10);A.onTouchStart(Ext.testHelper.createTouchEvent({changedTouches:[{pageX:0,pageY:0}]}));A.onTouchMove(Ext.testHelper.createTouchEvent({changedTouches:[{pageX:0,pageY:9}]}));expect(A.fail).not.toHaveBeenCalled()});it("should invoke fail() with reason TOUCH_MOVED if the distance if greater than or equal to 'moveDistance' config",function(){spyOn(A,"fail");A.setMoveDistance(10);A.onTouchStart(Ext.testHelper.createTouchEvent({changedTouches:[{pageX:0,pageY:0}]}));A.onTouchMove(Ext.testHelper.createTouchEvent({changedTouches:[{pageX:0,pageY:10}]}));expect(A.fail).toHaveBeenCalledWith(B.TOUCH_MOVED)})});describe("onTouchEnd()",function(){it("should invoke fire() with 4 arguments: 'tap', the event object, touch list, keyed object with touch list",function(){spyOn(A,"fire");var C=Ext.testHelper.createTouchEvent();A.onTouchEnd(C);expect(A.fire).toHaveBeenCalledWith("tap",C,{touch:undefined})})})});describe("scenarios",function(){beforeEach(function(){A=new B();spyOn(A,"fail").andCallThrough()});it("should FAIL if there are more than 1 touches in touchstart initially",function(){Ext.testHelper.recognize(A,[{type:"touchstart",touches:[{},{}],changedTouches:[{},{}]},{type:"touchmove",touches:[{},{}],changedTouches:[{},{}]},{type:"touchend",changedTouches:[{},{}]}]);expect(A.fail).toHaveBeenCalledWith(B.NOT_SINGLE_TOUCH)});it("should FAIL if there is another touchstart after the first one",function(){Ext.testHelper.recognize(A,[{type:"touchstart",touches:[{}],changedTouches:[{}]},{type:"touchstart",touches:[{},{}],changedTouches:[{}]},{type:"touchmove",touches:[{},{}],changedTouches:[{},{}]},{type:"touchend",changedTouches:[{},{}]}]);expect(A.fail).toHaveBeenCalledWith(B.NOT_SINGLE_TOUCH)});xit("should FAIL if there is any touchmove before touchend over the touch threshhold",function(){Ext.testHelper.recognize(A,[{type:"touchstart",touches:[{}],changedTouches:[{}]},{type:"touchmove",touches:[{}],changedTouches:[{x:20,y:20}]},{type:"touchend",changedTouches:[{}]}]);expect(A.fail).toHaveBeenCalledWith(B.TOUCH_MOVED)});it("should PASS if there is one and only one touchstart, no touchmove, and then touchend",function(){spyOn(A,"fire");Ext.testHelper.recognize(A,[{type:"touchstart",touches:[{}],changedTouches:[{}]},{type:"touchend",changedTouches:[{}]}]);expect(A.fire).toHaveBeenCalled();expect(A.fire.mostRecentCall.args[0]).toBe("tap")})});describe("functional specs",function(){var L=Ext.testHelper,J=Ext.event.Dispatcher.getInstance().getPublisher("gesture").getRecognizers().tap,K=J.getMoveDistance(),M,I,G,C;function F(N){L.touchStart(M,N)}function E(N){L.touchMove(M,N)}function H(N){L.touchEnd(M,N)}function D(N){L.touchCancel(M,N)}beforeEach(function(){M=Ext.getBody().createChild();I=jasmine.createSpy();G=jasmine.createSpy();I.andCallFake(function(N){C=N});G.andCallFake(function(N){C=N});M.on("tap",I);M.on("tapcancel",G)});afterEach(function(){M.destroy()});it("should fire tap when there is no movement",function(){waits(100);runs(function(){F({id:1,x:10,y:10});H({id:1,x:10,y:10})});waitsForAnimation();runs(function(){expect(I).toHaveBeenCalled();expect(C.type).toBe("tap");expect(C.getX()).toBe(10);expect(C.getY()).toBe(10)})});it("should fire tap if movement is within moveDistance",function(){waits(100);runs(function(){F({id:1,x:10,y:10});E({id:1,x:9+K,y:10});H({id:1,x:9+K,y:10})});waitsForAnimation();runs(function(){expect(I).toHaveBeenCalled();expect(C.type).toBe("tap");expect(C.getX()).toBe(9+K);expect(C.getY()).toBe(10)})});it("should not fire tap, and should fire tapcancel if movement is greater than or equal to moveDistance",function(){waits(100);runs(function(){F({id:1,x:10,y:10});E({id:1,x:10,y:10+K});H({id:1,x:10,y:10+K})});waitsForAnimation();runs(function(){expect(I).not.toHaveBeenCalled();expect(G).toHaveBeenCalled();expect(C.type).toBe("tapcancel")})});if(Ext.supports.Touch){it("should not fire tap if a second touch is initiated",function(){runs(function(){F({id:1,x:10,y:10});F({id:2,x:30,y:30});H({id:1,x:10,y:10})});waitsForAnimation();runs(function(){H({id:2,x:30,y:30})});waitsForAnimation();runs(function(){expect(I).not.toHaveBeenCalled()})});it("should not fire tap and should fire tapcancel if a cancel event is received",function(){runs(function(){F({id:1,x:10,y:10})});waitsForAnimation();runs(function(){D({id:1,x:10,y:10})});waitsForAnimation();runs(function(){expect(I).not.toHaveBeenCalled();expect(G).toHaveBeenCalled();expect(C.type).toBe("tapcancel")})})}it("should not fire tap and should fire tapcancel if movement exceeds moveDistance, but the pointer is moved back within the moveDistance before touchend",function(){runs(function(){F({id:1,x:10,y:10});E({id:1,x:10,y:11+K})});waitsForAnimation();runs(function(){E({id:1,x:10,y:10});H({id:1,x:10,y:10})});waitsForAnimation();runs(function(){expect(I).not.toHaveBeenCalled();expect(G).toHaveBeenCalled();expect(C.type).toBe("tapcancel")})})})});