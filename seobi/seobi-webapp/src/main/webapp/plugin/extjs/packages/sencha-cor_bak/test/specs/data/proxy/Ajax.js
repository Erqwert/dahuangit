describe("Ext.data.proxy.Ajax",function(){var B;function A(C){C=C||{};C=Ext.applyIf(C,{url:"/foo"});B=new Ext.data.proxy.Ajax(C)}afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.Company");B=null});describe("instantiation",function(){beforeEach(function(){A()});it("should extend Ext.data.proxy.Server",function(){expect(B.superclass).toBe(Ext.data.proxy.Server.prototype)});it("should have correct actionMethods",function(){expect(B.getActionMethods()).toEqual({create:"POST",read:"GET",update:"POST",destroy:"POST"})})});describe("parameters",function(){var C,D;beforeEach(function(){spyOn(Ext.Ajax,"request").andCallFake(function(E){C=E});D=new Ext.data.operation.Read()});afterEach(function(){C=D=null});describe("binary",function(){it("should default to binary false",function(){A();B.read(D);expect(C.binary).toBe(false)});it("should pass binary when set on the proxy",function(){A({binary:true});B.read(D);expect(C.binary).toBe(true)})});describe("headers",function(){it("should default to no headers",function(){A();B.read(D);expect(C.headers).toBeUndefined()});it("should pass headers",function(){A({headers:{"Content-Type":"text/plain"}});B.read(D);expect(C.headers).toEqual({"Content-Type":"text/plain"})})});describe("timeout",function(){it("should use the default timeout",function(){A();B.read(D);expect(C.timeout).toBe(B.getTimeout())});it("should use a passed timeout",function(){A({timeout:1000});B.read(D);expect(C.timeout).toBe(1000)})});describe("useDefaultXhrHeader",function(){it("should default to true",function(){A();B.read(D);expect(C.useDefaultXhrHeader).toBe(true)});it("should pass along useDefaultXhrHeader",function(){A({useDefaultXhrHeader:true});B.read(D);expect(C.useDefaultXhrHeader).toBe(true)})});describe("withCredentials",function(){it("should default to false",function(){A();B.read(D);expect(C.withCredentials).toBe(false)});it("should should pass the username/password",function(){A({withCredentials:true,username:"foo",password:"bar"});B.read(D);expect(C.withCredentials).toBe(true);expect(C.username).toBe("foo");expect(C.password).toBe("bar")})});describe("paramsAsJson",function(){it("should always send as params when using get",function(){B=new Ext.data.proxy.Ajax({url:"fake",paramsAsJson:true});D.setParams({id:1});B.read(D);expect(C.params.id).toBe(1);expect(C.jsonData).toBeUndefined()});it("should send as params when paramsAsJson is false",function(){B=new Ext.data.proxy.Ajax({url:"fake",paramsAsJson:false});D=new Ext.data.operation.Create();D.setParams({id:1});B.create(D);expect(C.params.id).toBe(1);expect(C.jsonData).toBeUndefined()});it("should send as jsonData with non-get action and paramsAsJson: true",function(){B=new Ext.data.proxy.Ajax({url:"fake",paramsAsJson:true});D=new Ext.data.operation.Create();D.setParams({id:1});B.create(D);expect(C.jsonData).toEqual({id:1});expect(C.params).toBeUndefined()});it("should not overwrite existing jsonData, but merge them",function(){B=new Ext.data.proxy.Ajax({url:"fake",paramsAsJson:true,writer:{type:"json",writeRecordId:false}});var E=Ext.define(null,{extend:"Ext.data.Model",fields:["name"]});D=new Ext.data.operation.Create({records:[new E({name:"X"})]});D.setParams({foo:1});B.create(D);expect(C.jsonData).toEqual({name:"X",foo:1})})})});describe("request result",function(){var E,C;function D(G,F,H){Ext.Ajax.mockComplete({status:G||200,statusText:F||"",responseText:H||'{"success": true, "data": []}'})}beforeEach(function(){Ext.define("spec.AjaxModel",{extend:"Ext.data.Model",fields:["id"]});MockAjaxManager.addMethods();E=new Ext.data.operation.Read();A({model:spec.AjaxModel,reader:{type:"json",rootProperty:"data",successProperty:"success"}})});afterEach(function(){C=E=null;MockAjaxManager.removeMethods();Ext.undefine("spec.AjaxModel")});describe("successful request",function(){it("should call afterRequest with the request & the success status",function(){C=B.read(E);spyOn(B,"afterRequest");D(200);expect(B.afterRequest).toHaveBeenCalledWith(C,true)});describe("reader success",function(){it("should process the operation",function(){B.read(E);spyOn(E,"process");D(200);expect(E.process).toHaveBeenCalled()});it("should not fire the exception event",function(){var F=jasmine.createSpy();B.on("exception",F);B.read(E);D(200);expect(F).not.toHaveBeenCalled()})});describe("reader failure",function(){it("should process the operation",function(){spyOn(E,"process");B.read(E);D(200,"",'{"success": false}');expect(E.process).toHaveBeenCalled()});it("should fire the exception event",function(){var F=jasmine.createSpy();B.on("exception",F);B.read(E);D(200,"",'{"success": false}');var G=F.mostRecentCall.args;expect(G[0]).toBe(B);expect(G[1].responseText).toBe('{"success": false}');expect(G[2]).toBe(E)})})});describe("failed request",function(){it("should call afterRequest with the request & the success status",function(){C=B.read(E);spyOn(B,"afterRequest");D(500);expect(B.afterRequest).toHaveBeenCalledWith(C,false)});describe("server error",function(){beforeEach(function(){B.read(E)});it("should set an exception on the operation",function(){D(500,"failStatus");expect(E.wasSuccessful()).toBe(false);expect(E.getError()).toEqual({status:500,statusText:"failStatus",response:jasmine.any(Object)})});it("should fire the exception event and pass the proxy, response & operation",function(){var F=jasmine.createSpy();B.on("exception",F);D(500,"","someResponse");var G=F.mostRecentCall.args;expect(G[0]).toBe(B);expect(G[1].responseText).toBe("someResponse");expect(G[2]).toBe(E)})});describe("timeout",function(){it("should set an exception on the operation",function(){B.setTimeout(1);C=B.read(E);waitsFor(function(){return E.isComplete()},"Operation never completed");runs(function(){expect(E.wasSuccessful()).toBe(false);expect(E.getError()).toEqual({status:0,statusText:"communication failure",response:jasmine.any(Object)})})});it("should fire the exception event and pass the proxy, response & operation",function(){var F=jasmine.createSpy();B.on("exception",F);B.setTimeout(1);C=B.read(E);waitsFor(function(){return E.isComplete()},"Operation never completed");runs(function(){var G=F.mostRecentCall.args;expect(G[0]).toBe(B);expect(G[1].statusText).toBe("communication failure");expect(G[2]).toBe(E)})})})})});describe("getMethod",function(){var C;beforeEach(function(){A();C=new Ext.data.Request({url:"/",action:"read"})});it("should return the HTTP method name for a given request",function(){expect(B.getMethod(C)).toBe("GET")});it("should return a the default action method if the actionMethods property is overridden",function(){B.setActionMethods({update:"PUT"});expect(B.getMethod(C)).toBe("GET")});it("should return a value when actionMethods is undefined/null",function(){B.setActionMethods(undefined);expect(B.getMethod(C)).toBe("GET")})})});