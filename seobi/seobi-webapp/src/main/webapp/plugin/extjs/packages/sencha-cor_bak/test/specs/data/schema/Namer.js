describe("Ext.data.schema.Namer",function(){var J,I,A,C,F,E,B,G,D,H;beforeEach(function(){G=Ext.data.Model.schema;D=[];H=[];G.setNamespace("spec.data.namer");J=Ext.define("spec.data.namer.Base",{extend:"Ext.data.Model",schema:{namespace:"spec.data.namer"}});I=Ext.define("spec.data.namer.Company",{extend:"spec.data.namer.Base",fields:["name"]});A=Ext.define("spec.data.namer.Department",{extend:"spec.data.namer.Base",fields:["name",{name:"companyId",reference:"Company"},{name:"managerId",reference:"User",unique:true}],manyToMany:[{type:"User",relation:"approved"},{type:"User",relation:"qualified"}]});C=Ext.define("spec.data.namer.User",{extend:"spec.data.namer.Base",fields:["name",{name:"companyId",reference:"Company"},{name:"departmentId",reference:"Department"}],manyToMany:"#Group"});F=Ext.define("spec.data.namer.Group",{extend:"spec.data.namer.Base",fields:["name"],manyToMany:"User#"});E=Ext.define("spec.data.namer.Ticket",{extend:"spec.data.namer.Base",fields:["description",{name:"creatorId",reference:"User"},{name:"assigneeId",reference:"User"}]});B=Ext.define("spec.data.namer.Comment",{extend:"spec.data.namer.Base",fields:["name",{name:"ticketId",reference:{parent:"Ticket"}},{name:"userId",reference:"User"}]});G.eachAssociation(function(K){D.push(K)});G.eachEntity(function(K){H.push(K)});D.sort();H.sort()});afterEach(function(){Ext.Array.forEach(H,function(K){Ext.undefine("spec.data.namer."+K)});G.setNamespace(null);G.clear();J=I=A=C=F=E=B=G=D=H=null});describe("Schema",function(){it("should have the right number of associations",function(){expect(D.length).toBe(11)});it("should have the right number of entities",function(){expect(H.length).toBe(7)})});describe("Company",function(){describe("departments",function(){it("should have the association",function(){expect(I.associations.departments.isRole).toBe(true)});it("should properly name the association",function(){expect(I.associations.departments.association.name).toBe("CompanyDepartments")});it("association kind should be many-to-one",function(){expect(I.associations.departments.association.kind).toBe("many-to-one")});it("association has Company on the right",function(){expect(I.associations.departments.association.right.type).toBe("Company")});it("association should refer to target type",function(){expect(I.associations.departments.cls).toBe(A);expect(I.associations.departments.type).toBe("Department")});it("should have a getter",function(){expect(typeof I.prototype.departments).toBe("function")});it("should not have a setter",function(){expect(I.prototype.setDepartments).toBe(undefined)})});describe("users",function(){it("should have the association",function(){expect(I.associations.users.isRole).toBe(true)});it("should properly name the users association",function(){expect(I.associations.users.association.name).toBe("CompanyUsers")});it("users association should be many-to-one",function(){expect(I.associations.users.association.kind).toBe("many-to-one")});it("users has Company on the right",function(){expect(I.associations.users.association.right.type).toBe("Company")});it("users association should refer to User",function(){expect(I.associations.users.cls).toBe(C);expect(I.associations.users.type).toBe("User")});it("should have a users getter",function(){expect(typeof I.prototype.users).toBe("function")});it("should not have a departments setter",function(){expect(I.prototype.setUsers).toBe(undefined)})})});describe("Department",function(){describe("company",function(){it("should have the association",function(){expect(A.associations.company.isRole).toBe(true)});it("should properly name the company association",function(){expect(A.associations.company.association.name).toBe("CompanyDepartments")});it("company association should be many-to-one",function(){expect(A.associations.company.association.kind).toBe("many-to-one")});it("company has Department on the left",function(){expect(A.associations.company.association.left.type).toBe("Department")});it("company association should refer to User",function(){expect(A.associations.company.cls).toBe(I);expect(A.associations.company.type).toBe("Company")});it("should have an company getter",function(){expect(typeof A.prototype.getCompany).toBe("function")});it("should have an company setter",function(){expect(typeof A.prototype.setCompany).toBe("function")})});describe("approvedUsers",function(){it("should have the association",function(){expect(A.associations.approvedUsers.isRole).toBe(true)});it("should properly name the approvedUsers association",function(){expect(A.associations.approvedUsers.association.name).toBe("ApprovedDepartmentUsers")});it("approvedUsers association should be many-to-many",function(){expect(A.associations.approvedUsers.association.kind).toBe("many-to-many")});it("approvedUsers has Department on the left",function(){expect(A.associations.approvedUsers.association.left.type).toBe("Department")});it("approvedUsers association should refer to User",function(){expect(A.associations.approvedUsers.cls).toBe(C);expect(A.associations.approvedUsers.type).toBe("User")});it("should have an approvedUsers getter",function(){expect(typeof A.prototype.approvedUsers).toBe("function")});it("should not have an approvedUsers setter",function(){expect(A.prototype.setApprovedUsers).toBe(undefined)})});describe("qualifiedUsers",function(){it("should have the association",function(){expect(A.associations.qualifiedUsers.isRole).toBe(true)});it("should properly name the qualifiedUsers association",function(){expect(A.associations.qualifiedUsers.association.name).toBe("QualifiedDepartmentUsers")});it("qualifiedUsers association should be many-to-many",function(){expect(A.associations.qualifiedUsers.association.kind).toBe("many-to-many")});it("qualifiedUsers has Department on the left",function(){expect(A.associations.qualifiedUsers.association.left.type).toBe("Department")});it("qualifiedUsers association should refer to User",function(){expect(A.associations.qualifiedUsers.cls).toBe(C);expect(A.associations.qualifiedUsers.type).toBe("User")});it("should have a qualifiedUsers getter",function(){expect(typeof A.prototype.qualifiedUsers).toBe("function")});it("should not have a qualifiedUsers setter",function(){expect(A.prototype.setQualifiedUsers).toBe(undefined)})});describe("manager",function(){it("should have the association",function(){expect(A.associations.manager.isRole).toBe(true)});it("should properly name the manager association",function(){expect(A.associations.manager.association.name).toBe("UserManagerDepartment")});it("association should be one-to-one",function(){expect(A.associations.manager.association.kind).toBe("one-to-one")});it("manager has Department on the left",function(){expect(A.associations.manager.association.left.type).toBe("Department")});it("manager association should refer to User",function(){expect(A.associations.manager.cls).toBe(C);expect(A.associations.manager.type).toBe("User")});it("should have a manager getter",function(){expect(typeof A.prototype.getManager).toBe("function")});it("should have a manager setter",function(){expect(typeof A.prototype.setManager).toBe("function")})});describe("users",function(){it("should have the association",function(){expect(A.associations.users.isRole).toBe(true)});it("should properly name the users association",function(){expect(A.associations.users.association.name).toBe("DepartmentUsers")});it("association should be many-to-one",function(){expect(A.associations.users.association.kind).toBe("many-to-one")});it("users has Department on the right",function(){expect(A.associations.users.association.right.type).toBe("Department")});it("users association should refer to User",function(){expect(A.associations.users.cls).toBe(C);expect(A.associations.users.type).toBe("User")});it("should have a users getter",function(){expect(typeof A.prototype.users).toBe("function")});it("should not have a users setter",function(){expect(A.prototype.setUsers).toBe(undefined)})})});describe("User",function(){describe("company",function(){it("should have the association",function(){expect(C.associations.company.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.company.association.name).toBe("CompanyUsers")});it("association should be many-to-one",function(){expect(C.associations.company.association.kind).toBe("many-to-one")});it("should have User on the left",function(){expect(C.associations.company.association.left.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.company.cls).toBe(I);expect(C.associations.company.type).toBe("Company")});it("should have a getter",function(){expect(typeof C.prototype.getCompany).toBe("function")});it("should have a setter",function(){expect(typeof C.prototype.setCompany).toBe("function")})});describe("assigneeTickets",function(){it("should have the association",function(){expect(C.associations.assigneeTickets.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.assigneeTickets.association.name).toBe("UserAssigneeTickets")});it("association should be many-to-one",function(){expect(C.associations.assigneeTickets.association.kind).toBe("many-to-one")});it("should have User on the right",function(){expect(C.associations.assigneeTickets.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.assigneeTickets.cls).toBe(E);expect(C.associations.assigneeTickets.type).toBe("Ticket")});it("should have a getter",function(){expect(typeof C.prototype.assigneeTickets).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setAssigneeTickets).toBe("undefined")})});describe("creatorTickets",function(){it("should have the association",function(){expect(C.associations.creatorTickets.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.creatorTickets.association.name).toBe("UserCreatorTickets")});it("association should be many-to-one",function(){expect(C.associations.creatorTickets.association.kind).toBe("many-to-one")});it("should have User on the right",function(){expect(C.associations.creatorTickets.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.creatorTickets.cls).toBe(E);expect(C.associations.creatorTickets.type).toBe("Ticket")});it("should have a getter",function(){expect(typeof C.prototype.creatorTickets).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setCreatorTickets).toBe("undefined")})});describe("department",function(){it("should have the association",function(){expect(C.associations.department.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.department.association.name).toBe("DepartmentUsers")});it("association should be many-to-one",function(){expect(C.associations.department.association.kind).toBe("many-to-one")});it("should have User on the left",function(){expect(C.associations.department.association.left.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.department.cls).toBe(A);expect(C.associations.department.type).toBe("Department")});it("should have a getter",function(){expect(typeof C.prototype.getDepartment).toBe("function")});it("should have a setter",function(){expect(typeof C.prototype.setDepartment).toBe("function")})});describe("groups",function(){it("should have the association",function(){expect(C.associations.groups.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.groups.association.name).toBe("UserGroups")});it("association should be many-to-many",function(){expect(C.associations.groups.association.kind).toBe("many-to-many")});it("should have User on the left",function(){expect(C.associations.groups.association.left.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.groups.cls).toBe(F);expect(C.associations.groups.type).toBe("Group")});it("should have a getter",function(){expect(typeof C.prototype.groups).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setGroups).toBe("undefined")})});describe("approvedDepartments",function(){it("should have the association",function(){expect(C.associations.approvedDepartments.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.approvedDepartments.association.name).toBe("ApprovedDepartmentUsers")});it("association should be many-to-many",function(){expect(C.associations.approvedDepartments.association.kind).toBe("many-to-many")});it("should have User on the right",function(){expect(C.associations.approvedDepartments.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.approvedDepartments.cls).toBe(A);expect(C.associations.approvedDepartments.type).toBe("Department")});it("should have a getter",function(){expect(typeof C.prototype.approvedDepartments).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setApprovedDepartments).toBe("undefined")})});describe("qualifiedDepartments",function(){it("should have the association",function(){expect(C.associations.qualifiedDepartments.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.approvedDepartments.association.name).toBe("ApprovedDepartmentUsers")});it("association should be many-to-many",function(){expect(C.associations.qualifiedDepartments.association.kind).toBe("many-to-many")});it("should have User on the right",function(){expect(C.associations.qualifiedDepartments.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.qualifiedDepartments.cls).toBe(A);expect(C.associations.qualifiedDepartments.type).toBe("Department")});it("should have a getter",function(){expect(typeof C.prototype.qualifiedDepartments).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setQualifiedDepartments).toBe("undefined")})});describe("managerDepartment",function(){it("should have the association",function(){expect(C.associations.managerDepartment.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.managerDepartment.association.name).toBe("UserManagerDepartment")});it("association should be one-to-one",function(){expect(C.associations.managerDepartment.association.kind).toBe("one-to-one")});it("should have User on the right",function(){expect(C.associations.managerDepartment.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.managerDepartment.cls).toBe(A);expect(C.associations.managerDepartment.type).toBe("Department")});it("should have a getter",function(){expect(typeof C.prototype.getManagerDepartment).toBe("function")});it("should have a setter",function(){expect(typeof C.prototype.setManagerDepartment).toBe("function")})});describe("comments",function(){it("should have the association",function(){expect(C.associations.comments.isRole).toBe(true)});it("should properly name the association",function(){expect(C.associations.comments.association.name).toBe("UserComments")});it("association should be many-to-one",function(){expect(C.associations.comments.association.kind).toBe("many-to-one")});it("should have User on the right",function(){expect(C.associations.comments.association.right.type).toBe("User")});it("association should refer to proper entity",function(){expect(C.associations.comments.cls).toBe(B);expect(C.associations.comments.type).toBe("Comment")});it("should have a getter",function(){expect(typeof C.prototype.comments).toBe("function")});it("should not have a setter",function(){expect(typeof C.prototype.setComments).toBe("undefined")})})});describe("Group",function(){describe("users",function(){it("should have the association",function(){expect(F.associations.users.isRole).toBe(true)});it("should properly name the association",function(){expect(F.associations.users.association.name).toBe("UserGroups")});it("association should be many-to-many",function(){expect(F.associations.users.association.kind).toBe("many-to-many")});it("should have Group on the right",function(){expect(F.associations.users.association.right.type).toBe("Group")});it("association should refer to proper entity",function(){expect(F.associations.users.cls).toBe(C);expect(F.associations.users.type).toBe("User")});it("should have a getter",function(){expect(typeof F.prototype.users).toBe("function")});it("should not have a setter",function(){expect(typeof F.prototype.setUsers).toBe("undefined")})})});describe("Ticket",function(){describe("comments",function(){it("should have the association",function(){expect(E.associations.comments.isRole).toBe(true)});it("should properly name the association",function(){expect(E.associations.comments.association.name).toBe("TicketComments")});it("association should be many-to-one",function(){expect(E.associations.comments.association.kind).toBe("many-to-one")});it("should have the proper side",function(){expect(E.associations.comments.association.right.type).toBe("Ticket")});it("association should refer to proper entity",function(){expect(E.associations.comments.cls).toBe(B);expect(E.associations.comments.type).toBe("Comment")});it("should have a getter",function(){expect(typeof E.prototype.comments).toBe("function")});it("should not have a setter",function(){expect(typeof E.prototype.setComments).toBe("undefined")})});describe("assignee",function(){it("should have the association",function(){expect(E.associations.assignee.isRole).toBe(true)});it("should properly name the association",function(){expect(E.associations.assignee.association.name).toBe("UserAssigneeTickets")});it("association should be many-to-one",function(){expect(E.associations.assignee.association.kind).toBe("many-to-one")});it("should have the proper side",function(){expect(E.associations.assignee.association.left.type).toBe("Ticket")});it("association should refer to proper entity",function(){expect(E.associations.assignee.cls).toBe(C);expect(E.associations.assignee.type).toBe("User")});it("should have a getter",function(){expect(typeof E.prototype.getAssignee).toBe("function")});it("should have a setter",function(){expect(typeof E.prototype.setAssignee).toBe("function")})});describe("creator",function(){it("should have the association",function(){expect(E.associations.creator.isRole).toBe(true)});it("should properly name the association",function(){expect(E.associations.creator.association.name).toBe("UserCreatorTickets")});it("association should be many-to-one",function(){expect(E.associations.creator.association.kind).toBe("many-to-one")});it("should have the proper side",function(){expect(E.associations.creator.association.left.type).toBe("Ticket")});it("association should refer to proper entity",function(){expect(E.associations.creator.cls).toBe(C);expect(E.associations.creator.type).toBe("User")});it("should have a getter",function(){expect(typeof E.prototype.getCreator).toBe("function")});it("should have a setter",function(){expect(typeof E.prototype.setCreator).toBe("function")})})});describe("Comment",function(){describe("ticket",function(){it("should have the association",function(){expect(B.associations.ticket.isRole).toBe(true)});it("should properly name the association",function(){expect(B.associations.ticket.association.name).toBe("TicketComments")});it("association should be many-to-one",function(){expect(B.associations.ticket.association.kind).toBe("many-to-one")});it("should have Comment on the left",function(){expect(B.associations.ticket.association.left.type).toBe("Comment")});it("association should refer to proper entity",function(){expect(B.associations.ticket.cls).toBe(E);expect(B.associations.ticket.type).toBe("Ticket")});it("should have a getter",function(){expect(typeof B.prototype.getTicket).toBe("function")});it("should have a setter",function(){expect(typeof B.prototype.setTicket).toBe("function")})});describe("user",function(){it("should have the association",function(){expect(B.associations.user.isRole).toBe(true)});it("should properly name the association",function(){expect(B.associations.user.association.name).toBe("UserComments")});it("association should be many-to-one",function(){expect(B.associations.user.association.kind).toBe("many-to-one")});it("should have Comment on the left",function(){expect(B.associations.user.association.left.type).toBe("Comment")});it("association should refer to proper entity",function(){expect(B.associations.user.cls).toBe(C);expect(B.associations.user.type).toBe("User")});it("should have a getter",function(){expect(typeof B.prototype.getUser).toBe("function")});it("should have a setter",function(){expect(typeof B.prototype.setUser).toBe("function")})})})});