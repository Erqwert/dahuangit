describe("Ext.data.Store",function(){function P(R){return R*-1}var L={},D,H,J,M,O,I,E,C,F,N=Ext.define(null,{extend:"Ext.data.Model",idProperty:"email",fields:[{name:"name",type:"string"},{name:"email",type:"string"},{name:"evilness",type:"int"},{name:"group",type:"string"},{name:"old",type:"boolean"},{name:"valid",type:"string"},{name:"age",type:"int",sortType:P}]});function B(){F.add(E,O,I,C);J=F.getAt(0);D=F.getAt(1);H=F.getAt(2);M=F.getAt(3)}function G(R,S){if(Ext.isObject(R)){S=R}else{S=S||{};if(!S.email){S.email=R}}return new N(S)}function A(R){R=R||{};F=new Ext.data.Store(Ext.applyIf(R,{model:N}))}function K(R){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(R)})}function Q(R,S){Ext.Ajax.mockComplete({status:R,responseText:""})}beforeEach(function(){MockAjaxManager.addMethods();E={name:"Ed Spencer",email:"ed@sencha.com",evilness:100,group:"code",old:false,age:25,valid:"yes"};O={name:"Abe Elias",email:"abe@sencha.com",evilness:70,group:"admin",old:false,age:20,valid:"yes"};I={name:"Aaron Conran",email:"aaron@sencha.com",evilness:5,group:"admin",old:true,age:26,valid:"yes"};C={name:"Tommy Maintz",email:"tommy@sencha.com",evilness:-15,group:"code",old:true,age:70,valid:"yes"}});afterEach(function(){MockAjaxManager.removeMethods();Ext.data.Model.schema.clear();F.destroy();F=null});describe("initializing",function(){describe("store manager",function(){it("should register if a storeId is passed",function(){A({storeId:"foo"});expect(Ext.data.StoreManager.get("foo")).toBe(F)})});describe("proxy",function(){describe("configured on the store",function(){it("should create from a string",function(){A({proxy:"jsonp"});expect(F.getProxy() instanceof Ext.data.proxy.JsonP).toBe(true)});it("should create from a config",function(){A({proxy:{type:"ajax",url:"foo"}});var R=F.getProxy();expect(R instanceof Ext.data.proxy.Ajax);expect(R.getUrl()).toBe("foo")});it("should accept an instance",function(){var R=new Ext.data.proxy.Memory();A({proxy:R});expect(F.getProxy()).toBe(R)})});describe("configured on the model",function(){it("should use the proxy from the model",function(){Ext.define("spec.ProxyWithModel",{extend:"Ext.data.Model",fields:[],proxy:{type:"ajax"}});A({model:"spec.ProxyWithModel"});expect(F.getProxy()).toBe(spec.ProxyWithModel.getProxy());Ext.undefine("spec.ProxyWithModel")})});describe("configured on both",function(){it("should favour the store proxy",function(){Ext.define("spec.ProxyWithModel",{extend:"Ext.data.Model",fields:[],proxy:{type:"ajax"}});var R=new Ext.data.proxy.Ajax();A({model:"spec.ProxyWithModel",proxy:R});expect(F.getProxy()).toBe(R);Ext.undefine("spec.ProxyWithModel")})});describe("memory with data",function(){it("should load the data instantly",function(){A({proxy:{type:"memory"},data:[E,O]});expect(F.getCount()).toBe(2)})})});describe("autoLoad",function(){it("should not auto load by default",function(){A();spyOn(F,"load").andReturn();waits(50);runs(function(){expect(F.load).not.toHaveBeenCalled()})});describe("autoLoad: true",function(){it("should load the store",function(){A({autoLoad:true});spyOn(F,"load").andReturn();waitsFor(function(){return F.load.callCount>0},"Load never called");runs(function(){expect(F.load).toHaveBeenCalled()})});it("should pass the options if autoLoad is an object",function(){var R={};A({autoLoad:R});spyOn(F,"load").andReturn();waitsFor(function(){return F.load.callCount>0});runs(function(){expect(F.load).toHaveBeenCalledWith(R)})})})});describe("fields",function(){it("should create a model with the configured fields",function(){A({fields:["id","height","width"]});var R=F.getModel(),S=R.getFields();expect(R.prototype.isModel).toBe(true);expect(S[0].getName()).toBe("id");expect(S[1].getName()).toBe("height");expect(S[2].getName()).toBe("width")});it("should not be created with a class name",function(){A({fields:["id","height","width"]});var R=F.getModel();expect(R.$className).toBe(null)})});describe("data",function(){describe("with no proxy",function(){it("should add any inline data",function(){A({data:[E,O]});expect(F.first().id).toBe("ed@sencha.com");expect(F.last().id).toBe("abe@sencha.com")});it("should not fire any events",function(){var R=jasmine.createSpy();A({listeners:{clear:R,add:R,load:R,datachanged:R,refresh:R},data:[E,O,C]});expect(R).not.toHaveBeenCalled()})});describe("with a proxy",function(){describe("with a memory proxy",function(){it("should load the data and call proxy.read",function(){var R=new Ext.data.proxy.Memory();spyOn(R,"read").andCallThrough();A({proxy:R,data:[O,C]});expect(F.first().id).toBe("abe@sencha.com");expect(F.last().id).toBe("tommy@sencha.com");expect(R.read).toHaveBeenCalled()});it("should not fire any events",function(){var S=jasmine.createSpy();var R=new Ext.data.proxy.Memory();A({proxy:R,data:[O,C],listeners:{clear:S,add:S,load:S,datachanged:S,refresh:S}});expect(S).not.toHaveBeenCalled()})});describe("with a server proxy",function(){it("should load the data and not call proxy.read",function(){var R=new Ext.data.proxy.Ajax();spyOn(R,"read").andCallThrough();A({proxy:R,data:[I,E]});expect(F.first().id).toBe("aaron@sencha.com");expect(F.last().id).toBe("ed@sencha.com");expect(R.read).not.toHaveBeenCalled()});it("should not fire any events",function(){var S=jasmine.createSpy();var R=new Ext.data.proxy.Ajax();A({proxy:R,data:[I,E],listeners:{clear:S,add:S,load:S,datachanged:S,refresh:S}});expect(S).not.toHaveBeenCalled()})})})});describe("buffered stores",function(){it("should create a BufferedStore if given buffered:true",function(){A({buffered:true});expect(F.isBufferedStore).toBe(true);expect(F instanceof Ext.data.BufferedStore).toBe(true)});it("should create a BufferedStore if given type:buffered",function(){F=Ext.Factory.store({type:"buffered"});expect(F.isBufferedStore).toBe(true);expect(F instanceof Ext.data.BufferedStore).toBe(true)})})});describe("getting records",function(){beforeEach(function(){A();B()});describe("first",function(){it("should return the first record",function(){expect(F.first()).toBe(J)});it("should return null with an empty store",function(){A();expect(F.first()).toBeNull()})});describe("last",function(){it("should return the last record",function(){expect(F.last()).toBe(M)});it("should return null with an empty store",function(){A();expect(F.last()).toBeNull()})});describe("getAt",function(){it("should return the record at the specified index",function(){expect(F.getAt(1)).toBe(D)});it("should return null when the index is outside the store bounds",function(){expect(F.getAt(100)).toBe(null)});it("should return null when the store is empty",function(){A();expect(F.getAt(0)).toBe(null)})});describe("getById",function(){it("should return the record with the matching id",function(){expect(F.getById("tommy@sencha.com")).toBe(M)});it("should return null if a matching id is not found",function(){expect(F.getById("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){A();expect(F.getById("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){F.filter("email","ed@sencha.com");expect(F.getById("aaron@sencha.com")).toBe(H)})});describe("getByInternalId",function(){it("should return the record with the matching id",function(){expect(F.getByInternalId(M.internalId)).toBe(M)});it("should return null if a matching id is not found",function(){expect(F.getByInternalId("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){A();expect(F.getByInternalId("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){F.filter("email","ed@sencha.com");expect(F.getByInternalId(H.internalId)).toBe(H)})});describe("getRange",function(){it("should default to the full store range",function(){expect(F.getRange()).toEqual([J,D,H,M])});it("should return from the start index",function(){expect(F.getRange(2)).toEqual([H,M])});it("should use the end index, and include it",function(){expect(F.getRange(0,2)).toEqual([J,D,H])});it("should ignore an end index greater than the store range",function(){expect(F.getRange(1,100)).toEqual([D,H,M])})});describe("query",function(){var S,R;it("should return records with group: 'coder'",function(){S=F.query("group","code");expect(S.length).toBe(2);expect(S.contains(J)).toBe(true);expect(S.contains(M)).toBe(true);expect(S.contains(H)).toBe(false);expect(S.contains(D)).toBe(false)});it("should return null if a matching id is not found",function(){R=F.query("group","slackers");expect(R.length).toBe(0)});it("should return null when the store is empty",function(){A();S=F.query("group","code");expect(S.length).toBe(0)});it("should ignore filters",function(){F.filter("email","ed@sencha.com");expect(F.getCount()).toBe(1);S=F.query("group","code");expect(S.length).toBe(2);expect(S.contains(J)).toBe(true);expect(S.contains(M)).toBe(true);expect(S.contains(H)).toBe(false);expect(S.contains(D)).toBe(false)})})});describe("finding",function(){beforeEach(function(){A();B()});describe("find",function(){it("should find by the field",function(){expect(F.find("email","tommy@sencha.com")).toBe(3)});it("should find the first matching index",function(){expect(F.find("group","admin")).toBe(1)});it("should return -1 if value is empty",function(){expect(F.find("id",null)).toBe(-1);expect(F.find("id","")).toBe(-1);expect(F.find("id",undefined)).toBe(-1);expect(F.find("id",[])).toBe(-1);expect(F.find("id","foo")).toBe(-1)})});describe("findRecord",function(){it("should return the record instance",function(){expect(F.findRecord("name","Ed Spencer")).toBe(J)});it("should find the first matching record",function(){expect(F.findRecord("group","code")).toBe(J)});it("should return null when not found",function(){expect(F.findRecord("name","Derp")).toBeNull()})});describe("finding exact",function(){it("should find the first exact matching record",function(){expect(F.findExact("name","Aaron Conran")).toBe(2)});it("should return -1 if there is no match",function(){expect(F.findExact("name","Bed Spencer")).toBe(-1)});it("should honor the start index",function(){expect(F.findExact("group","admin",1)).toBe(1)});it("should not do any type coercion",function(){expect(F.findExact("evilness","70")).toBe(-1)})});describe("findBy",function(){it("should find by the matching FN",function(){var R=F.findBy(function(S){return S.get("email")==="abe@sencha.com"});expect(R).toBe(1)})});describe("collect",function(){it("should collect values in order",function(){expect(F.collect("age")).toEqual([25,20,26,70])});it("should ignore filtered out values",function(){F.filter("group","code");expect(F.collect("age")).toEqual([25,70])});it("should bypass the filter if we pass the bypass param",function(){F.filter("group","code");expect(F.collect("age",true,true)).toEqual([25,20,26,70])})})});describe("iterating",function(){var R;beforeEach(function(){A();B();R=jasmine.createSpy()});describe("each",function(){it("should iterate over each record",function(){F.each(R);expect(R.callCount).toBe(4)});it("should pass the record, index & total length",function(){F.each(R);var S=R.calls[0].args;expect(S[0]).toBe(J);expect(S[1]).toBe(0);expect(S[2]).toBe(4);S=R.calls[1].args;expect(S[0]).toBe(D);expect(S[1]).toBe(1);expect(S[2]).toBe(4);S=R.calls[2].args;expect(S[0]).toBe(H);expect(S[1]).toBe(2);expect(S[2]).toBe(4);S=R.calls[3].args;expect(S[0]).toBe(M);expect(S[1]).toBe(3);expect(S[2]).toBe(4)});it("should stop iterating if false is returned",function(){var S=0;F.each(function(T,U){if(U>1){return false}++S});expect(S).toBe(2)});it("should default the scope to the record",function(){F.each(R);expect(R.mostRecentCall.object).toBe(F.last())});it("should use the passed scope",function(){F.each(R,L);expect(R.mostRecentCall.object).toBe(L)})})});describe("index",function(){beforeEach(function(){A();B()});describe("indexOf",function(){it("should return the index of a record that exists in the store",function(){expect(F.indexOf(D)).toBe(1)});it("should return -1 when the record does not exist in the store",function(){expect(F.indexOf(G("foo@sencha.com"))).toBe(-1)});it("should return -1 when the store is empty",function(){F.removeAll();expect(F.indexOf(J)).toBe(-1)});it("should return -1 when the passed record is null",function(){expect(F.indexOf(null)).toBe(-1)})});describe("indexOfId",function(){it("should return the record with matching index",function(){expect(F.indexOfId("aaron@sencha.com")).toBe(2)});it("should return -1 when the id does not exist in the store",function(){expect(F.indexOfId("foo@sencha.com")).toBe(-1)});it("should return -1 when the store is empty",function(){F.removeAll();expect(F.indexOfId("ed@sencha.com")).toBe(-1)})})});describe("counting",function(){describe("getCount",function(){beforeEach(function(){A()});it("should return 0 when the store is empty",function(){expect(F.getCount()).toBe(0)});it("should return the number of records currently in the store",function(){B();expect(F.getCount()).toBe(4)})});describe("getTotalCount",function(){it("should default to 0",function(){A();expect(F.getTotalCount()).toBe(0)});it("should set a value returned from a proxy read",function(){A({proxy:{type:"memory",data:{total:1234},reader:"json"}});F.load();expect(F.getTotalCount()).toBe(1234)})})});describe("adding records",function(){describe("add",function(){beforeEach(function(){A()});describe("position",function(){it("should add to the end of the store",function(){B();var R=G("foo@sencha.com");F.add(R);expect(F.getAt(4)).toBe(R)})});describe("arg values",function(){it("should add a model instance",function(){var R=G("foo@sencha.com");F.add(R);expect(F.first()).toBe(R)});it("should create a model from an object config",function(){F.add({email:"foo@sencha.com",name:"Foo"});var R=F.first();expect(R.isModel).toBe(true);expect(R.get("name")).toBe("Foo")})});describe("adding multiple",function(){it("should add an array of records",function(){F.add([{email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"}]);expect(F.first().get("name")).toBe("Person A");expect(F.last().get("name")).toBe("Person B")});it("should add multiple arguments",function(){F.add({email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"});expect(F.first().get("name")).toBe("Person A");expect(F.last().get("name")).toBe("Person B")})});describe("return value",function(){it("should return an array when adding a single item",function(){var R=G("foo@sencha.com");expect(F.add(R)).toEqual([R])});it("should return an array when adding an array, should not mutate the array",function(){var R=G("foo@sencha.com"),T=[R],S=F.add(T);expect(S).toEqual([R]);expect(S).not.toBe(T)});it("should return an array when adding multiple args",function(){var S=G("user1@sencha.com"),R=G("user2@sencha.com");expect(F.add(S,R)).toEqual([S,R])});it("should return an empty array if nothing was passed",function(){expect(F.add()).toEqual([])});it("should return an empty array if an empty array was passed",function(){expect(F.add([])).toEqual([])})});describe("events",function(){var T,S,R;beforeEach(function(){B();T=jasmine.createSpy();S=G("user1@sencha.com");R=G("user2@sencha.com")});describe("a single item",function(){it("should fire the add event, passing the store, the records & the added index",function(){F.on("add",T);F.add(S);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F);expect(U[1]).toEqual([S]);expect(U[2]).toBe(4)});it("should fire the datachanged event",function(){F.on("datachanged",T);F.add(S,R);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F)})});describe("multiple items",function(){describe("contiguous range",function(){it("should fire the add event, passing the store, the records & the added index",function(){F.on("add",T);F.add(S,R);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F);expect(U[1]).toEqual([S,R]);expect(U[2]).toBe(4)});it("should fire the datachanged event",function(){F.on("datachanged",T);F.add(S,R);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F)})});describe("discontiguous range",function(){var U;beforeEach(function(){F.removeAll();F.sort("email");F.add(G("e@sencha.com"),G("j@sencha.com"),G("o@sencha.com"),G("t@sencha.com"));U=[G("a@sencha.com"),G("b@sencha.com"),G("f@sencha.com"),G("g@sencha.com"),G("h@sencha.com"),G("l@sencha.com"),G("p@sencha.com"),G("q@sencha.com"),G("r@sencha.com"),G("s@sencha.com")]});it("should fire the add event, passing the store, the records & the added index for each chunk",function(){F.on("add",T);F.add(U[6],U[1],U[9],U[4],U[3],U[7],U[5],U[2],U[8],U[0]);expect(T.callCount).toBe(4);var V=T.calls[0].args;expect(V[0]).toBe(F);expect(V[1]).toEqual([U[0],U[1]]);expect(V[2]).toBe(0);V=T.calls[1].args;expect(V[0]).toBe(F);expect(V[1]).toEqual([U[2],U[3],U[4]]);expect(V[2]).toBe(3);V=T.calls[2].args;expect(V[0]).toBe(F);expect(V[1]).toEqual([U[5]]);expect(V[2]).toBe(7);V=T.calls[3].args;expect(V[0]).toBe(F);expect(V[1]).toEqual([U[6],U[7],U[8],U[9]]);expect(V[2]).toBe(9)});it("should fire the datachanged event",function(){F.on("datachanged",T);F.add(U[6],U[1],U[9],U[4],U[3],U[7],U[5],U[2],U[8],U[0]);var V=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(V[0]).toBe(F)})})});describe("invalid cases",function(){it("should not call the event when the record is null",function(){F.on({add:T,datachanged:T});F.add(null);expect(T).not.toHaveBeenCalled()});it("should not call the event when the array is empty",function(){F.on({add:T,datachanged:T});F.add([]);expect(T).not.toHaveBeenCalled()})})})});describe("insert",function(){beforeEach(function(){A()});describe("position",function(){it("should add at the specified position",function(){B();var R=G("foo@sencha.com");F.insert(2,R);expect(F.getAt(2)).toBe(R)});it("should add to the end if the index is larger than the bounds",function(){var R=G("foo@sencha.com");F.insert(100,R);expect(F.first()).toBe(R)})});describe("arg values",function(){it("should add a model instance",function(){var R=G("foo@sencha.com");F.insert(0,R);expect(F.first()).toBe(R)});it("should create a model from an object config",function(){F.insert(0,{email:"foo@sencha.com",name:"Foo"});var R=F.first();expect(R.isModel).toBe(true);expect(R.get("name")).toBe("Foo")})});describe("adding multiple",function(){it("should add an array of records",function(){F.insert(0,[{email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"}]);expect(F.first().get("name")).toBe("Person A");expect(F.last().get("name")).toBe("Person B")})});describe("return value",function(){it("should return an array when adding a single item",function(){var R=G("foo@sencha.com");expect(F.insert(0,R)).toEqual([R])});it("should return an array when adding an array, should not mutate the array",function(){var R=G("foo@sencha.com"),T=[R],S=F.insert(0,T);expect(S).toEqual([R]);expect(S).not.toBe(T)});it("should return an empty array if nothing was passed",function(){expect(F.insert(0)).toEqual([])});it("should return an empty array if an empty array was passed",function(){expect(F.insert(0,[])).toEqual([])})});describe("events",function(){var T,S,R;beforeEach(function(){B();T=jasmine.createSpy();S=G("user1@sencha.com");R=G("user2@sencha.com")});it("should fire the add event, passing the store, the records & the added index",function(){F.on("add",T);F.insert(0,[S,R]);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F);expect(U[1]).toEqual([S,R]);expect(U[2]).toBe(0)});it("should correct the added index when it exceeds the bounds of the store",function(){F.on("add",T);F.insert(50,[S,R]);var U=T.mostRecentCall.args;expect(U[2]).toBe(4)});it("should fire the datachanged event",function(){F.on("datachanged",T);F.insert(0,[S,R]);var U=T.mostRecentCall.args;expect(T.callCount).toBe(1);expect(U[0]).toBe(F)});describe("invalid cases",function(){it("should not call the event when the record is null",function(){F.on({add:T,datachanged:T});F.insert(0,null);expect(T).not.toHaveBeenCalled()});it("should not call the event when the array is empty",function(){F.on({add:T,datachanged:T});F.insert(0,[]);expect(T).not.toHaveBeenCalled()})})})})});describe("removing",function(){beforeEach(function(){A();B()});describe("remove",function(){describe("single record",function(){it("should remove a single record",function(){F.remove(D);expect(F.getCount()).toBe(3);expect(F.indexOf(D)).toBe(-1)});it("should return an array",function(){expect(F.remove(H)).toEqual([H])});it("should return an empty array if the item is not in the store",function(){var R=G("foo@sencha.com");expect(F.remove(R)).toEqual([])})});describe("array of records",function(){it("should remove an array",function(){F.remove([D,M]);expect(F.getCount()).toBe(2);expect(F.indexOf(D)).toBe(-1);expect(F.indexOf(M)).toBe(-1)});it("should return an array, not mutated",function(){var R=[J,H],S=F.remove(R);expect(S).toEqual([J,H]);expect(S).not.toBe(R)});it("should return an empty array if the array is empty",function(){expect(F.remove([])).toEqual([])});it("should only return records that could be removed",function(){var R=G("foo@sencha.com");expect(F.remove([J,R,M])).toEqual([J,M])})});it("should shift other items into the correct position",function(){F.remove([J,M]);expect(F.indexOf(D)).toBe(0);expect(F.indexOf(H)).toBe(1)});describe("events",function(){var R;beforeEach(function(){R=jasmine.createSpy()});describe("a single record",function(){it("should fire the remove event, passing the store, array of records & index",function(){F.on("remove",R);F.remove(H);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1]).toEqual([H]);expect(S[2]).toBe(2)});it("should fire the datachanged event",function(){F.on("datachanged",R);F.remove(J);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F)});describe("invalid cases",function(){it("should not fire an event if the record is null",function(){F.on("remove",R);F.remove(null);expect(R).not.toHaveBeenCalled()});it("should not fire an event if the record is not in the store",function(){F.on("remove",R);F.remove(G("foo@sencha.com"));expect(R).not.toHaveBeenCalled()})})});describe("multiple records",function(){describe("contiguous range",function(){it("should fire the remove event, passing the store, array of records & index",function(){F.on("remove",R);F.remove([D,H]);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1]).toEqual([D,H]);expect(S[2]).toBe(1)});it("should fire the datachanged event",function(){F.on("datachanged",R);F.remove([D,H]);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F)})});describe("discontiguous range",function(){var S;beforeEach(function(){F.removeAll();S=[];for(var T=0;T<10;++T){S.push(G("user"+T+"@sencha.com"))}F.add(S)});it("should fire a remove event for each contiguous chunk, with highest indexes first",function(){F.on("remove",R);F.remove([S[1],S[4],S[2],S[6],S[7],S[0]]);expect(R.callCount).toBe(3);var T=R.calls[0].args;expect(T[0]).toBe(F);expect(T[1]).toEqual([S[6],S[7]]);expect(T[2]).toBe(6);T=R.calls[1].args;expect(T[0]).toBe(F);expect(T[1]).toEqual([S[4]]);expect(T[2]).toBe(4);T=R.calls[2].args;expect(T[0]).toBe(F);expect(T[1]).toEqual([S[0],S[1],S[2]]);expect(T[2]).toBe(0)});it("should fire a single datachanged event",function(){F.on("datachanged",R);F.remove([S[1],S[4],S[2],S[6],S[7],S[0]]);expect(R.callCount).toBe(1)})});describe("invalid cases",function(){it("should not fire when the array is empty",function(){F.on({remove:R,datachanged:R});F.on("remove",R);F.remove([]);expect(R).not.toHaveBeenCalled()});it("should not fire when the array is stripped of items not in the store",function(){F.on({remove:R,datachanged:R});F.remove([G("foo@sencha.com")]);expect(R).not.toHaveBeenCalled()})})})})});describe("removeAt",function(){it("should remove the record at the specified index",function(){F.removeAt(1);expect(F.indexOf(D)).toBe(-1)});it("should do nothing if the index is larger than the store size",function(){F.removeAt(100);expect(F.getCount()).toBe(4)});describe("with count",function(){it("should remove a single item with count = 1",function(){F.removeAt(2,1);expect(F.getCount()).toBe(3);expect(F.indexOf(H)).toBe(-1)});it("should remove the counted amount of items",function(){F.removeAt(0,3);expect(F.getCount()).toBe(1);expect(F.indexOf(J)).toBe(-1);expect(F.indexOf(D)).toBe(-1);expect(F.indexOf(H)).toBe(-1)});it("should clip the count to the collection size",function(){F.removeAt(2,50);expect(F.getCount()).toBe(2);expect(F.indexOf(H)).toBe(-1);expect(F.indexOf(M)).toBe(-1)})});describe("events",function(){var R;beforeEach(function(){R=jasmine.createSpy()});it("should fire a remove event with the removed records",function(){F.on("remove",R);F.removeAt(1,2);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1]).toEqual([D,H]);expect(S[2]).toBe(1)});it("should fire a datachanged event",function(){F.on("datachanged",R);F.removeAt(1,2);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(F)});describe("invalid cases",function(){it("should not fire when the index is greater than the store bounds",function(){F.on({remove:R,datachanged:R});F.removeAt(100);expect(R).not.toHaveBeenCalled()})})})});describe("removeAll",function(){it("should remove all records from the store",function(){F.removeAll();expect(F.getCount()).toBe(0)});it("should do nothing if the store is empty",function(){A();F.removeAll();expect(F.getCount()).toBe(0)});describe("events",function(){var R;beforeEach(function(){R=jasmine.createSpy()});it("should not fire any remove events",function(){F.on("remove",R);F.removeAll();expect(R).not.toHaveBeenCalled()});it("should fire the clear event and pass the current records",function(){var S=F.getRange();F.on("clear",R);F.removeAll();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toBe(F);expect(R.mostRecentCall.args[1]).toEqual(S)});it("should fire the datachanged event",function(){F.on("datachanged",R);F.removeAll();expect(R).toHaveBeenCalled()});describe("with silent: true",function(){it("should not fire the clear event",function(){F.on("clear",R);F.removeAll(true);expect(R).not.toHaveBeenCalled()});it("should not fire the datachanged event",function(){F.on("datachanged",R);F.removeAll(true);expect(R).not.toHaveBeenCalled()})})})})});describe("loading",function(){describe("loadCount",function(){it("should default to 0",function(){A();expect(F.loadCount).toBe(0)});describe("construction",function(){it("should increment the loadCount when passing data with no proxy",function(){A({data:[O]});expect(F.loadCount).toBe(1)});it("should increment the loadCount when passing data with a memory proxy",function(){A({proxy:{type:"memory"},data:[O]});expect(F.loadCount).toBe(1)})});describe("with no proxy",function(){beforeEach(function(){A()});it("should increment when using loadRecords",function(){F.loadRecords([G("foo@sencha.com")]);expect(F.loadCount).toBe(1)});it("should increment when using loadData",function(){F.loadData([C]);expect(F.loadCount).toBe(1)})});describe("with a proxy",function(){beforeEach(function(){A({proxy:{type:"ajax",url:"/foo"}})});it("should increment on a successful load with no records",function(){F.load();K([]);expect(F.loadCount).toBe(1)});it("should increment on a successful load with records",function(){F.load();K([O,I]);expect(F.loadCount).toBe(1)});it("should not increment on an unsuccessful load",function(){F.load();Q(500);expect(F.loadCount).toBe(0)})});it("should increment for each load",function(){A({proxy:{type:"ajax",url:"/foo"}});for(var R=0;R<5;++R){F.load();K([])}expect(F.loadCount).toBe(5)})});describe("local data",function(){describe("loadData",function(){beforeEach(function(){A()});it("should create model instances",function(){F.loadData([E,O]);expect(F.first().get("name")).toBe("Ed Spencer");expect(F.last().get("name")).toBe("Abe Elias");expect(F.getCount()).toBe(2)});it("should accept model instances",function(){J=G(E);D=G(O);H=G(I);F.loadData([J,D,H]);expect(F.first()).toBe(J);expect(F.getAt(1)).toBe(D);expect(F.last()).toBe(H);expect(F.getCount()).toBe(3)});it("should clear existing records by default",function(){B();F.loadData([{email:"foo@sencha.com"}]);expect(F.first().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){B();F.loadData([{email:"foo@sencha.com"}],true);expect(F.last().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(5)});describe("events",function(){var R;beforeEach(function(){R=jasmine.createSpy()});it("should fire a datachanged event",function(){F.on("datachanged",R);F.loadData([E]);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should fire a refresh event",function(){F.on("refresh",R);F.loadData([E]);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should not fire any add events",function(){F.on("add",R);F.loadData([C]);expect(R).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){F.on("remove",R);F.loadData([C]);expect(R).not.toHaveBeenCalled()})})});describe("loadRecords",function(){beforeEach(function(){A()});it("should accept model instances",function(){J=G(E);D=G(O);H=G(I);F.loadRecords([J,D,H]);expect(F.first()).toBe(J);expect(F.getAt(1)).toBe(D);expect(F.last()).toBe(H);expect(F.getCount()).toBe(3)});it("should clear existing records by default",function(){B();var R=G("foo@sencha.com");F.loadRecords([R]);expect(F.first().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){B();var R=G("foo@sencha.com");F.loadRecords([R],{addRecords:true});expect(F.last()).toBe(R);expect(F.getCount()).toBe(5)});describe("events",function(){var R;beforeEach(function(){R=jasmine.createSpy()});it("should fire a datachanged event",function(){F.on("datachanged",R);F.loadRecords([G(E)]);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should fire a refresh event",function(){F.on("refresh",R);F.loadRecords([G(E)]);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should not fire any add events",function(){F.on("add",R);F.loadRecords([G(C)]);expect(R).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){F.on("remove",R);F.loadRecords([G(C)]);expect(R).not.toHaveBeenCalled()})})});describe("loadRawData",function(){beforeEach(function(){Ext.define("spec.UserWithReader",{extend:"Ext.data.Model",idProperty:"email",fields:["email",{name:"name",mapping:"person"}],proxy:{type:"memory",reader:{type:"json",rootProperty:"data",successProperty:"success",totalProperty:"myTotal"}}});A({model:"spec.UserWithReader"})});afterEach(function(){Ext.undefine("spec.UserWithReader")});describe("reader processing",function(){it("should pass the data through the proxy reader",function(){F.loadRawData({success:true,data:[{email:"foo@sencha.com",person:"The name"}]});var R=F.first();expect(R.$className).toBe("spec.UserWithReader");expect(R.get("name")).toBe("The name")});it("should read the totalCount",function(){F.loadRawData({success:true,myTotal:9876,data:[]});expect(F.getTotalCount()).toBe(9876)});it("should return true when the records are read",function(){var R=F.loadRawData({success:true,data:[{email:"foo@sencha.com",person:"The name"}]});expect(R).toBe(true)});it("should return false if the reader can't read the data and load no records",function(){var R=F.loadRawData({success:false,data:[{email:"foo@sencha.com",person:"Name1"}]});expect(R).toBe(false);expect(F.getCount()).toBe(0)})});it("should clear existing records by default",function(){B();F.loadRawData({success:true,data:[{email:"foo@sencha.com"}]});expect(F.first().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){B();F.loadRawData({success:true,data:[{email:"foo@sencha.com"}]},{addRecords:true});expect(F.last().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(5)});describe("events",function(){var R,S;beforeEach(function(){R=jasmine.createSpy();S={success:true,data:[{email:"foo@sencha.com"}]}});it("should fire a datachanged event",function(){F.on("datachanged",R);F.loadRawData(S);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should fire a refresh event",function(){F.on("refresh",R);F.loadRawData(S);expect(R.callCount).toBe(1);expect(R.mostRecentCall.args[0]).toBe(F)});it("should not fire any add events",function(){F.on("add",R);F.loadRawData(S);expect(R).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){F.on("remove",R);F.loadRawData(S);expect(R).not.toHaveBeenCalled()})})})});describe("loading remote data",function(){var R;beforeEach(function(){R={success:true,data:[{email:"foo@sencha.com"}]};A({proxy:{type:"ajax",url:"foo",reader:{type:"json",successProperty:"success",rootProperty:"data"}}})});describe("setting options on the operation",function(){var T,U;function S(){return T.mostRecentCall.args[0]}beforeEach(function(){T=spyOn(F.getProxy(),"read").andReturn();U=spyOn(F.getData(),"sortItems")});describe("sorters",function(){function V(X,W){return{property:X,direction:W}}it("should pass along sorters if remoteSort: true",function(){F.setRemoteSort(true);F.getSorters().add(V("email","ASC"));F.getSorters().add(V("evilness","DESC"));F.load();var W=S().getSorters();expect(W[0].getProperty()).toBe("email");expect(W[0].getDirection()).toBe("ASC");expect(W[1].getProperty()).toBe("evilness");expect(W[1].getDirection()).toBe("DESC");expect(U).not.toHaveBeenCalled()});it("should not pass sorters if there are none",function(){F.setRemoteSort(true);F.load();expect(S().getSorters()).toBeUndefined();expect(U).not.toHaveBeenCalled()});it("should not pass sorters if remoteSort: false",function(){F.setRemoteSort(false);F.getSorters().add(V("email","ASC"));F.getSorters().add(V("evilness","DESC"));F.load();expect(S().getSorters()).toBeUndefined();expect(U).toHaveBeenCalled()})});describe("grouper",function(){function V(X,W){return{property:X,direction:W}}it("should pass along the grouper if remoteSort: true",function(){F.setRemoteSort(true);F.setGrouper(V("group","ASC"));F.load();var W=S().getGrouper();expect(W.getProperty()).toBe("group");expect(W.getDirection()).toBe("ASC")});it("should pass the grouper if there isn't one",function(){F.setRemoteSort(true);F.load();expect(S().getGrouper()).toBeUndefined()});it("should pass the grouper if remoteSort: false",function(){F.setRemoteSort(false);F.setGrouper(V("group","ASC"));F.load();expect(S().getGrouper()).toBeUndefined()});it("should sort a grouped store according to the group field and then sorters",function(){var W=0,X=Ext.define(null,{extend:"Ext.data.Model",idProperty:"taskId",fields:[{name:"projectId",type:"int"},{name:"project",type:"string"},{name:"taskId",type:"int"},{name:"description",type:"string"},{name:"estimate",type:"float"},{name:"rate",type:"float"},{name:"due",type:"date",dateFormat:"m/d/Y"}]});var Y=[{projectId:100,project:"Ext Forms: Field Anchoring",taskId:112,description:"Integrate 2.0 Forms with 2.0 Layouts",estimate:6,rate:150,due:"06/24/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:113,description:"Implement AnchorLayout",estimate:4,rate:150,due:"06/25/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:114,description:"Add support for multiple<br>types of anchors",estimate:4,rate:150,due:"06/27/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:115,description:"Testing and debugging",estimate:8,rate:0,due:"06/29/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:101,description:'Add required rendering "hooks" to GridView',estimate:6,rate:100,due:"07/01/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:102,description:"Extend GridView and override rendering functions",estimate:6,rate:100,due:"07/03/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:103,description:"Extend Store with grouping functionality",estimate:4,rate:100,due:"07/04/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:121,description:"Default CSS Styling",estimate:2,rate:100,due:"07/05/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:104,description:"Testing and debugging",estimate:6,rate:100,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:105,description:"Ext Grid plugin integration",estimate:4,rate:125,due:"07/01/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:106,description:"Summary creation during rendering phase",estimate:4,rate:125,due:"07/02/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:107,description:"Dynamic summary updates in editor grids",estimate:6,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:108,description:"Remote summary integration",estimate:4,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:109,description:"Summary renderers and calculators",estimate:4,rate:125,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:110,description:"Integrate summaries with GroupingView",estimate:10,rate:125,due:"07/11/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:111,description:"Testing and debugging",estimate:8,rate:125,due:"07/15/2007"}];F=Ext.create("Ext.data.Store",{model:X,data:Y,sorters:{property:"due",direction:"ASC"},groupField:"project"});expect(F.getAt(0).get("taskId")).toBe(112);expect(F.getAt(1).get("taskId")).toBe(113);expect(F.getAt(2).get("taskId")).toBe(114);expect(F.getAt(3).get("taskId")).toBe(115);expect(F.getAt(4).get("taskId")).toBe(101);expect(F.getAt(5).get("taskId")).toBe(102);expect(F.getAt(6).get("taskId")).toBe(103);expect(F.getAt(7).get("taskId")).toBe(121);expect(F.getAt(8).get("taskId")).toBe(104);expect(F.getAt(9).get("taskId")).toBe(105);expect(F.getAt(10).get("taskId")).toBe(106);expect(F.getAt(11).get("taskId")).toBe(107);expect(F.getAt(12).get("taskId")).toBe(108);expect(F.getAt(13).get("taskId")).toBe(109);expect(F.getAt(14).get("taskId")).toBe(110);expect(F.getAt(15).get("taskId")).toBe(111);F.on({sort:function(){expect(F.getAt(0).get("taskId")).toBe(113);expect(F.getAt(1).get("taskId")).toBe(114);expect(F.getAt(2).get("taskId")).toBe(112);expect(F.getAt(3).get("taskId")).toBe(115);expect(F.getAt(4).get("taskId")).toBe(121);expect(F.getAt(5).get("taskId")).toBe(103);expect(F.getAt(6).get("taskId")).toBe(101);expect(F.getAt(7).get("taskId")).toBe(102);expect(F.getAt(8).get("taskId")).toBe(104);expect(F.getAt(9).get("taskId")).toBe(105);expect(F.getAt(10).get("taskId")).toBe(106);expect(F.getAt(11).get("taskId")).toBe(108);expect(F.getAt(12).get("taskId")).toBe(109);expect(F.getAt(13).get("taskId")).toBe(107);expect(F.getAt(14).get("taskId")).toBe(111);expect(F.getAt(15).get("taskId")).toBe(110);W++}});F.sort("estimate",undefined,"replace");expect(W).toBe(1)})});describe("filters",function(){function V(W,X){return{property:W,value:X}}it("should pass along filters if remoteFilter: true",function(){F.setRemoteFilter(true);F.getFilters().add(V("email","ed@sencha.com"));F.getFilters().add(V("evilness",100));F.load();var W=S().getFilters();expect(W[0].getProperty()).toBe("email");expect(W[0].getValue()).toBe("ed@sencha.com");expect(W[1].getProperty()).toBe("evilness");expect(W[1].getValue()).toBe(100)});it("should not pass filters if there are none",function(){F.setRemoteFilter(true);F.load();expect(S().getFilters()).toBeUndefined()});it("should not pass filters if remoteFilter: false",function(){F.setRemoteFilter(false);F.getFilters().add(V("email","ed@sencha.com"));F.getFilters().add(V("evilness",100));F.load();expect(S().getFilters()).toBeUndefined()})});describe("params",function(){it("should pass along params",function(){F.load({params:{foo:"bar"}});expect(S().getParams()).toEqual({foo:"bar"})})});describe("paging",function(){describe("page",function(){it("should use the passed page",function(){F.load({page:7});expect(S().getPage()).toBe(7)});it("should default to the current page in the store",function(){F.load();expect(S().getPage()).toBe(F.currentPage)})});describe("start",function(){it("should use the passed start",function(){F.load({start:100});expect(S().getStart()).toBe(100)});it("should calculate the start based on the page & pageSize",function(){F.setPageSize(50);F.currentPage=13;F.load();expect(S().getStart()).toBe(600)})});describe("limit",function(){it("should used the passed limit",function(){F.load({limit:12});expect(S().getLimit()).toBe(12)});it("should default to the page size",function(){F.load();expect(S().getLimit()).toBe(F.getPageSize())})});describe("with paging disabled",function(){beforeEach(function(){F.setPageSize(0)});describe("page",function(){it("should use the passed page",function(){F.load({page:7});expect(S().getPage()).toBe(7)});it("should not default a page param",function(){F.load();expect(S().getPage()).toBeUndefined()})});describe("start",function(){it("should use the passed start",function(){F.load({start:100});expect(S().getStart()).toBe(100)});it("should not default the start",function(){F.load();expect(S().getStart()).toBeUndefined()})});describe("limit",function(){it("should used the passed limit",function(){F.load({limit:12});expect(S().getLimit()).toBe(12)});it("should not default the limit",function(){F.load();expect(S().getLimit()).toBeUndefined()})})})})});describe("isLoading",function(){it("should not be loading by default",function(){expect(F.isLoading()).toBe(false)});it("should be loading once a remote request is triggered",function(){F.load();expect(F.isLoading()).toBe(true)});it("should not be loading when the server returns a successful response",function(){F.load();K(R);expect(F.isLoading()).toBe(false)});it("should not be loading when the server returns a failed response",function(){F.load();K({success:false});expect(F.isLoading()).toBe(false)})});describe("callbacks",function(){var S;beforeEach(function(){S=jasmine.createSpy()});describe("function paramter",function(){it("should accept a function",function(){F.load(S);K(R);expect(S).toHaveBeenCalled()});it("should default the scope to the store",function(){F.load(S);K(R);expect(S.mostRecentCall.object).toBe(F)})});describe("object paramter",function(){it("should take a callback parameter",function(){F.load({callback:S});K(R);expect(S).toHaveBeenCalled()});it("should use a passed scope",function(){F.load({callback:S,scope:L});K(R);expect(S.mostRecentCall.object).toBe(L)});it("should default the scope to the store",function(){F.load({callback:S});K(R);expect(S.mostRecentCall.object).toBe(F)})});describe("arguments",function(){var T;beforeEach(function(){T=spyOn(F.getProxy(),"read").andCallThrough()});describe("on success",function(){it("should pass the records, the operation and success status",function(){F.load(S);K({success:true,data:[{email:"user1@sencha.com"},{email:"user2@sencha.com"}]});var U=S.mostRecentCall.args;expect(U[0][0].get("email")).toBe("user1@sencha.com");expect(U[0][1].get("email")).toBe("user2@sencha.com");expect(U[1]).toBe(T.mostRecentCall.args[0]);expect(U[2]).toBe(true)})});describe("on failure",function(){it("should pass empty records, the operation and success status",function(){F.load(S);K({success:false});var U=S.mostRecentCall.args;expect(U[0]).toEqual([]);expect(U[1]).toBe(T.mostRecentCall.args[0]);expect(U[2]).toBe(false)})})});describe("when the callback is triggered",function(){it("should not have the store loading",function(){var T;F.load(function(){T=F.isLoading()});K(R);expect(T).toBe(false)});it("should have populated the store",function(){var T;F.load(function(){T=F.getCount()});K(R);expect(T).toBe(1)});it("should fire after the load event",function(){var U,T=jasmine.createSpy();F.on("load",T);F.load(function(){U=T.callCount===1});K(R);expect(U).toBe(true)})})});describe("events",function(){var T,S;beforeEach(function(){T=jasmine.createSpy();S=spyOn(F.getProxy(),"read").andCallThrough()});describe("beforeload",function(){it("should fire the beforeload event",function(){F.on("beforeload",T);F.load();expect(T).toHaveBeenCalled()});it("should pass the store and the operation",function(){F.on("beforeload",T);F.load();var U=T.mostRecentCall.args;expect(U[0]).toBe(F);expect(U[1] instanceof Ext.data.operation.Read).toBe(true)});it("should not be loading when the beforeload event is fired",function(){var U;F.on("beforeload",function(){U=F.isLoading()});F.load();expect(U).toBe(false)});it("should not continue with the load if false is returned",function(){F.on("beforeload",function(){return false});F.load();expect(F.isLoading()).toBe(false);expect(S).not.toHaveBeenCalled()})});describe("load",function(){describe("on success",function(){it("should fire with the store, records and the success param",function(){F.on("load",T);F.load();K(R);var U=T.mostRecentCall.args;expect(U[0]).toBe(F);expect(U[1][0].get("email")).toBe("foo@sencha.com");expect(U[2]).toBe(true)})});describe("on failure",function(){it("should fire with the store, an empty record array and the success param",function(){F.on("load",T);F.load();K({success:false});var U=T.mostRecentCall.args;expect(U[0]).toBe(F);expect(U[1]).toEqual([]);expect(U[2]).toBe(false)})});describe("when the event is triggered",function(){it("should not be loading",function(){var U;F.on("load",function(){U=F.isLoading()});F.load();K(R);expect(U).toBe(false)});it("should be populated with records",function(){var U;F.on("load",function(){U=F.getCount()});F.load();K(R);expect(U).toBe(1)})})})});describe("after the load completes",function(){it("should clear existing records by default",function(){B();F.load();K(R);expect(F.first().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){B();F.load({addRecords:true});K(R);expect(F.last().get("email")).toBe("foo@sencha.com");expect(F.getCount()).toBe(5)});describe("events",function(){var S;beforeEach(function(){S=jasmine.createSpy()});it("should fire a datachanged event",function(){F.on("datachanged",S);F.load();K(R);expect(S.callCount).toBe(1);expect(S.mostRecentCall.args[0]).toBe(F)});it("should fire a refresh event",function(){F.on("refresh",S);F.load();K(R);expect(S.callCount).toBe(1);expect(S.mostRecentCall.args[0]).toBe(F)});it("should not fire any add events",function(){F.on("add",S);F.load();K(R);expect(S).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){F.on("remove",S);F.load();K(R);expect(S).not.toHaveBeenCalled()})})});describe("reload",function(){it("should be able to be called if load was never called",function(){var S=jasmine.createSpy();F.reload({callback:S});K(R);expect(S).toHaveBeenCalled()});it("should use the params from the last load",function(){F.load({params:{foo:"bar"}});K(R);var S=spyOn(F.getProxy(),"read").andReturn();F.reload();expect(S.mostRecentCall.args[0].getParams()).toEqual({foo:"bar"})})})})});describe("paging",function(){var R,S;function T(){return S.mostRecentCall.args[0]}beforeEach(function(){R={success:true,data:[{email:"foo@sencha.com"}]};A({proxy:{type:"ajax",url:"foo",reader:{type:"json",successProperty:"success",rootProperty:"data"}}});S=spyOn(F.getProxy(),"read").andCallThrough()});it("should default the current page to 1",function(){expect(F.currentPage).toBe(1)});describe("previousPage",function(){it("should call loadPage with the current page - 1 and pass the options",function(){var U={};spyOn(F,"loadPage").andReturn();F.currentPage=9;F.previousPage(U);expect(F.loadPage).toHaveBeenCalledWith(8,U)})});describe("nextPage",function(){it("should call loadPage with the current page + 1 and pass the options",function(){var U={};spyOn(F,"loadPage").andReturn();F.currentPage=3;F.nextPage(U);expect(F.loadPage).toHaveBeenCalledWith(4,U)})});describe("params passed to the proxy",function(){describe("page",function(){it("should favour a passed page param",function(){F.loadPage(10,{page:1234});expect(T().getPage()).toBe(1234)});it("should use the passed the page",function(){F.loadPage(10);expect(T().getPage()).toBe(10)})});describe("start",function(){it("should favour a passed start param",function(){F.loadPage(3,{start:789});expect(T().getStart()).toBe(789)});it("should calculate the start based off the pageSize",function(){F.loadPage(2);expect(T().getStart()).toBe(25)})});describe("limit",function(){it("should favour a passed limit param",function(){F.loadPage(3,{limit:456});expect(T().getLimit()).toBe(456)});it("should set the limit to be the pageSize",function(){F.loadPage(2);expect(T().getLimit()).toBe(F.getPageSize())})});describe("other params",function(){it("should pass the params object",function(){F.loadPage(1,{params:{custom:true}});expect(T().getParams()).toEqual({custom:true})})})});describe("after load",function(){it("should set the currentPage",function(){F.loadPage(12);expect(F.currentPage).toBe(12)});it("should clear existing records when using clearOnPageLoad: true",function(){F.setClearOnPageLoad(true);F.setPageSize(1);F.loadPage(1);K({success:true,data:[{email:"user1@sencha.com"}]});F.loadPage(2);K({success:true,data:[{email:"user2@sencha.com"}]});expect(F.getCount()).toBe(1);expect(F.indexOfId("user1@sencha.com")).toBe(-1);expect(F.indexOfId("user2@sencha.com")).toBe(0)});it("should not clear existing records when using clearOnPageLoad: false",function(){F.setClearOnPageLoad(false);F.setPageSize(1);F.loadPage(1);K({success:true,data:[{email:"user1@sencha.com"}]});F.loadPage(2);K({success:true,data:[{email:"user2@sencha.com"}]});expect(F.getCount()).toBe(2);expect(F.indexOfId("user1@sencha.com")).toBe(0);expect(F.indexOfId("user2@sencha.com")).toBe(1)})})});describe("sorting",function(){describe("sort method",function(){beforeEach(function(){A()});it("should accept a field name, default direction to ASC",function(){F.sort("name");var R=F.getSorters().first();expect(R.getProperty()).toBe("name");expect(R.getDirection()).toBe("ASC")});it("should accept a field nameand direction",function(){F.sort("name","DESC");var R=F.getSorters().first();expect(R.getProperty()).toBe("name");expect(R.getDirection()).toBe("DESC")});it("should toggle the direction if we pass a string name and no direction for an existing sorter",function(){F.sort("name");F.sort("name");var R=F.getSorters().first();expect(R.getProperty()).toBe("name");expect(R.getDirection()).toBe("DESC")});it("should clear any existing sorters",function(){F.sort("name");F.sort("evilness");var R=F.getSorters().first();expect(F.getSorters().getCount()).toBe(1);expect(R.getProperty()).toBe("evilness")});it("should not throw an error when the store has no model",function(){F.destroy();F=new Ext.data.Store();expect(function(){F.sort("something","ASC")}).not.toThrow()})});describe("isSorted",function(){beforeEach(function(){A()});it("should default to false",function(){expect(F.isSorted()).toBe(false)});it("should return true when sorters are added",function(){F.sort("evilness");expect(F.isSorted()).toBe(true)});it("should return false when all sorters are removed",function(){F.sort("evilness");F.getSorters().remove("evilness");expect(F.isSorted()).toBe(false)});it("should return true if there are groupers and no sorters",function(){F.setGrouper({property:"group"});expect(F.isSorted()).toBe(true)})});describe("local",function(){describe("during construction",function(){it("should sort an initial data set",function(){A({remoteSort:false,sorters:[{property:"email"}],data:[E,C,I,O]});expect(F.first().get("email")).toBe("aaron@sencha.com")})});describe("dynamic sorters",function(){beforeEach(function(){A({remoteSort:false});B()});it("should sort the dataset when adding sorters",function(){F.sort("email");expect(F.first().get("email")).toBe("aaron@sencha.com")});it("should be able to use multiple sorters",function(){F.getSorters().add({property:"group"},{property:"evilness",direction:"DESC"});expect(F.first().get("email")).toBe("abe@sencha.com")});it("should trigger a sort when removing a sorter that is not the final sorter",function(){F.getSorters().add({property:"group"},{property:"evilness",direction:"DESC"});F.getSorters().remove("group");expect(F.first().get("email")).toBe("ed@sencha.com")});it("should ignore invalid fields",function(){F.sort("name","ASC");F.sort("someUnknownField");expect(F.getAt(0).get("name")).toBe("Aaron Conran");expect(F.getAt(1).get("name")).toBe("Abe Elias");expect(F.getAt(2).get("name")).toBe("Ed Spencer");expect(F.getAt(3).get("name")).toBe("Tommy Maintz")});describe("sortType",function(){it("should not pass the default sortType for the field",function(){F.sort("name","ASC");var R=F.getSorters().first();expect(R.getTransform()).toBe(Ext.data.SortTypes.asUCString)});it("should pass any custom sort for the field",function(){F.sort("age","ASC");var R=F.getSorters().first();expect(R.getTransform()).toBe(P)});it("should not apply a transform if the field doesn't exist",function(){F.sort("someUnknownField");var R=F.getSorters().first();expect(R.getTransform()).toBeNull()})});describe("with loadData",function(){it("should sort data",function(){F.sort("email");F.loadData([C,O,E,I]);expect(F.first().get("email")).toBe("aaron@sencha.com")});it("should not fire extra datachanged/refresh events",function(){var R=jasmine.createSpy();F.sort("email");F.on("refresh",R);F.on("datachanged",R);F.loadData([C,O,E,I]);expect(R.callCount).toBe(2)});it("should not sort the data with sortOnLoad: false",function(){F.sort("email");F.setSortOnLoad(false);F.loadData([C,O,E,I]);expect(F.first().get("email")).toBe("tommy@sencha.com")})});describe("with add",function(){it("should sort data",function(){F.sort("email");F.add({email:"aaa@sencha.com"});expect(F.first().get("email")).toBe("aaa@sencha.com")});it("should not fire extra datachanged events",function(){var R=jasmine.createSpy();F.sort("email");F.on("datachanged",R);F.add({email:"aaa@sencha.com"});expect(R.callCount).toBe(1)})});describe("when the field changes",function(){it("should move the record to the correct place when the sorted field is modified",function(){F.sort("evilness","DESC");M.set("evilness",1234);expect(F.indexOf(M)).toBe(0)})});describe("the sort method",function(){it("should sort the data after toggling an existing sorter",function(){F.getSorters().add("name");var R=F.getRange();R.reverse();F.sort("name");expect(F.getRange()).toEqual(R);expect(F.getSorters().getCount()).toBe(1)});it("shouldsort the data when adding a new sorter",function(){F.getSorters().add("group");F.sort("name","DESC");expect(F.getSorters().getCount()).toBe(1);expect(F.getAt(0)).toBe(M);expect(F.getAt(1)).toBe(J);expect(F.getAt(2)).toBe(D);expect(F.getAt(3)).toBe(H)})})})});describe("remote",function(){describe("during construction",function(){it("should not trigger a load when creating with sorters",function(){var R=spyOn(Ext.data.Store.prototype,"load");A({remoteSort:true,sorters:[{property:"evilness"}]});expect(R).not.toHaveBeenCalled()})});describe("addSorted",function(){it("should insert the record into the correct position",function(){A({remoteSort:true});F.sort("email");F.loadData([I,O,E,C]);F.addSorted(G("aaz@sencha.com"));expect(F.getAt(1).get("email")).toBe("aaz@sencha.com")})});describe("modifying the sorters",function(){beforeEach(function(){A({remoteSort:true})});describe("the sorter collection",function(){it("should trigger a load when adding a sorter",function(){spyOn(F,"load");F.getSorters().add("name");expect(F.load).toHaveBeenCalled()});it("should trigger a load when adding to an existing sorter",function(){F.getSorters().add("name");spyOn(F,"load");F.getSorters().add("evilness");expect(F.load).toHaveBeenCalled()});it("should not trigger a load when removing the only sorter",function(){F.getSorters().add("name");spyOn(F,"load");F.getSorters().remove("name");expect(F.load).not.toHaveBeenCalled()});it("should trigger a load when removing a sorter and there are others remaining",function(){F.getSorters().add("name");F.getSorters().add("evilness");spyOn(F,"load");F.getSorters().remove("name");expect(F.load).toHaveBeenCalled()})});describe("the sort method",function(){it("should trigger a load without modifying the sorters if called with no params",function(){F.getSorters().add("name");spyOn(F,"load");F.sort();expect(F.load).toHaveBeenCalled();expect(F.getSorters().getCount()).toBe(1)});it("should trigger a load when toggling an existing sorter",function(){F.getSorters().add("name");spyOn(F,"load");F.sort("name");expect(F.load).toHaveBeenCalled();expect(F.getSorters().getCount()).toBe(1)});it("should trigger a load when adding a new sorter",function(){F.getSorters().add("name");spyOn(F,"load");F.sort("age","DESC");expect(F.load).toHaveBeenCalled();expect(F.getSorters().getCount()).toBe(1)})})});describe("store data",function(){beforeEach(function(){A({remoteSort:true,proxy:{type:"ajax",url:"fakeurl"}})});it("should not sort the data when the store load has completed",function(){F.getSorters().add("name");K([{name:"ZZZ"},{name:"AAA"}]);expect(F.first().get("name")).toBe("ZZZ")});it("should not sort the data when adding a record",function(){F.getSorters().add("name");B();expect(F.first().get("name")).toBe("Ed Spencer")})})});describe("events",function(){var R;beforeEach(function(){A({proxy:"memory",remoteSort:true});R=jasmine.createSpy()});it("should fire the sort event when adding a sorter to an empty collection",function(){F.on("sort",R);F.getSorters().add("name");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(1);expect(S[1][0].getProperty()).toBe("name");expect(S[1][0].getDirection()).toBe("ASC")});it("should fire the sort event when adding a sorter to existing sorters",function(){F.getSorters().add("name");F.on("sort",R);F.getSorters().add("evilness");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(2);expect(S[1][0].getProperty()).toBe("name");expect(S[1][0].getDirection()).toBe("ASC");expect(S[1][1].getProperty()).toBe("evilness");expect(S[1][1].getDirection()).toBe("ASC")});it("should fire when removing a sorter from existing sorters",function(){F.getSorters().add("name");F.getSorters().add("evilness");F.on("sort",R);F.getSorters().remove("name");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(1);expect(S[1][0].getProperty()).toBe("evilness");expect(S[1][0].getDirection()).toBe("ASC")});it("should fire when removing the last sorter",function(){F.getSorters().add("name");F.on("sort",R);F.getSorters().remove("name");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(0)});describe("local",function(){beforeEach(function(){F.setRemoteSort(false)});describe("adding",function(){it("should fire the refresh event",function(){F.on("refresh",R);F.getSorters().add("name");expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toBe(F)});it("should fire the datachanged event",function(){F.on("datachanged",R);F.getSorters().add("name");expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toBe(F)})});describe("removing",function(){it("should fire the refresh event when we remove the non-last sorter",function(){F.getSorters().add("name");F.getSorters().add("evilness");F.on("refresh",R);F.getSorters().remove("name");expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toBe(F)});it("should fire the datachanged event when we remove the non-last sorter",function(){F.getSorters().add("name");F.getSorters().add("evilness");F.on("datachanged",R);F.getSorters().remove("name");expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toBe(F)});it("should not fire either event if we remove the last sorter",function(){F.getSorters().add("name");F.on("refresh",R);F.on("datachanged",R);F.getSorters().remove("name");expect(R).not.toHaveBeenCalled()})})});describe("remote",function(){describe("adding",function(){it("should fire refresh when adding a sorter",function(){F.on("refresh",R);F.sort("email");expect(R).toHaveBeenCalled()});it("should fire datachanged when adding a sorter",function(){F.on("datachanged",R);F.sort("email");expect(R).toHaveBeenCalled()})});describe("removing",function(){it("should fire refresh when removing a the non-last sorter",function(){F.sort("email");F.sort("evilness",null,"append");F.on("refresh",R);F.getSorters().remove("email");expect(R).toHaveBeenCalled()});it("should fire datachanged when removing the non-last sorter",function(){F.sort("email");F.sort("evilness",null,"append");F.on("datachanged",R);F.getSorters().remove("email");expect(R).toHaveBeenCalled()})})});describe("remote async",function(){beforeEach(function(){A({remoteSort:true});R=jasmine.createSpy()});describe("adding",function(){it("should not fire refresh when adding a sorter",function(){F.on("refresh",R);F.sort("email");expect(R).not.toHaveBeenCalled()});it("should not fire datachanged when adding a sorter",function(){F.on("datachanged",R);F.sort("email");expect(R).not.toHaveBeenCalled()})});describe("removing",function(){it("should not fire refresh when removing a the non-last sorter",function(){F.sort("email");F.sort("evilness");F.on("refresh",R);F.getSorters().remove("email");expect(R).not.toHaveBeenCalled()});it("should not fire datachanged when removing the non-last sorter",function(){F.sort("email");F.sort("evilness");F.on("datachanged",R);F.getSorters().remove("email");expect(R).not.toHaveBeenCalled()})})})})});describe("grouping",function(){var S;function V(W,X){F.setGrouper({property:W||"group",direction:X})}function R(){F.setGrouper(null)}function T(W,X){F.getSorters().add({property:W,direction:X})}function U(W,X){F.getFilters().add({property:W,value:X})}describe("groupDir and the group() method",function(){it('should default to "ASC"',function(){A();expect(F.getGroupDir()).toBe("ASC")});it('should default to "ASC" when calling group()',function(){A();F.group("name");expect(F.getGrouper().getDirection()).toBe("ASC")});it("should use whatever was set in the config when calling group()",function(){A({groupDir:"DESC"});F.group("email");expect(F.getGrouper().getDirection()).toBe("DESC")})});describe("getGroupField",function(){beforeEach(function(){A()});it("should default to ''",function(){expect(F.getGroupField()).toBe("")});it("should return the field name when grouped",function(){F.group("evilness");expect(F.getGroupField()).toBe("evilness")});it("should return '' when grouping is cleared",function(){F.group("evilness");F.clearGrouping();expect(F.getGroupField()).toBe("")})});describe("group method",function(){beforeEach(function(){A()});it("should accept a field name & direction",function(){F.group("group","DESC");var W=F.getGrouper();expect(W.getProperty()).toBe("group");expect(W.getDirection()).toBe("DESC")});it("should overwrite an existing grouper",function(){F.group("group","ASC");F.group("evilness","DESC");var W=F.getGrouper();expect(W.getProperty()).toBe("evilness");expect(W.getDirection()).toBe("DESC")})});describe("clearGrouping method",function(){it("should clear existing groupers",function(){A();F.group("evilness");F.clearGrouping();expect(F.getGrouper()).toBe(null)})});describe("isGrouped",function(){beforeEach(function(){A()});it("should default to false",function(){expect(F.isGrouped()).toBe(false)});it("should return true when the store has a grouper",function(){F.group("evilness");expect(F.isGrouped()).toBe(true)});it("should return false when the grouper is removed",function(){F.group("evilness");F.setGrouper(null);expect(F.isGrouped()).toBe(false)})});describe("local",function(){beforeEach(function(){A({remoteSort:false});B()});describe("during construction",function(){it("should create groups",function(){A({remoteSort:false,grouper:{property:"group"}});B();S=F.getGroups();expect(S.getCount()).toBe(2)})});it("should group by the specified key",function(){V();S=F.getGroups();expect(S.getCount()).toBe(2)});it("should have the appropriate item in each group",function(){V();S=F.getGroups();expect(S.first().getGroupKey()).toBe("admin");expect(S.last().getGroupKey()).toBe("code")});describe("clearing groups",function(){it("should return no groups by default",function(){expect(F.getGroups()).toBeNull()});it("should return no groups once the grouper has cleared",function(){V();F.getGroups();R();expect(F.getGroups()).toBeNull()})});describe("dynamic manipulation",function(){describe("adding",function(){it("should add to an existing group",function(){V();F.add({email:"new@sencha.com",group:"admin"});var W=F.getGroups().get("admin");expect(W.getCount()).toBe(3);expect(W.indexOfKey("new@sencha.com")).toBe(2)});it("should create a new group",function(){V();expect(F.getGroups().get("test")).toBeUndefined();F.add({email:"new@sencha.com",group:"test"});var W=F.getGroups().get("test");expect(W.getCount()).toBe(1);expect(W.indexOfKey("new@sencha.com")).toBe(0)});it("should add to an existing group before add event",function(){V();var W=F.getGroups().get("admin");F.on({add:function(){expect(W.getCount()).toBe(3);expect(W.indexOfKey("new@sencha.com")).toBe(2)}});F.add({email:"new@sencha.com",group:"admin"})})});describe("removing",function(){it("should remove from an existing group",function(){V();F.remove(D);var W=F.getGroups().get("admin");expect(W.getCount()).toBe(1);expect(W.contains(D)).toBe(false)});it("should remove a group",function(){F.remove(D);V();F.remove(H);expect(F.getGroups().get("admin")).toBeUndefined()});it("should remove from an existing group before remove event",function(){V();var W=F.getGroups().get("admin");F.on({remove:function(){expect(W.getCount()).toBe(1);expect(W.contains(D)).toBe(false)}});F.remove(D)});describe("using removeAt",function(){it("should remove the record from its group",function(){var W;V();W=F.getGroups().get("admin");expect(W.contains(D)).toBe(true);F.removeAt(0);expect(W.contains(D)).toBe(false)});it("should remove a range of records from their groups",function(){var W,X;V();W=F.getGroups().get("admin");X=F.getGroups().get("code");expect(X.contains(J)).toBe(true);expect(X.contains(M)).toBe(true);expect(W.contains(H)).toBe(true);F.removeAt(1,3);expect(X.contains(J)).toBe(false);expect(X.contains(M)).toBe(false);expect(W.contains(H)).toBe(false);expect(F.getGroups().length).toBe(1)})});describe("using removeAll",function(){it("should remove the groups",function(){var X,W;V();W=F.getGroups();X=W.get("admin");expect(W.length).toBe(2);F.removeAll();expect(W.length).toBe(0)})});describe("phantom group records",function(){it("should remove phantoms from their groups",function(){var W;V();W=F.getGroups().get("admin");var Y=[{name:"Phil"},{name:"Evan"},{name:"Nige"},{name:"Alex"}],X;F.destroy();F=new Ext.data.Store({fields:["name"],data:Y,groupField:"name",proxy:{type:"ajax"}});X=F.getAt(0);expect(X.phantom).toBe(true);F.remove(X);expect(F.getGroups().getAt(0).contains(X)).toBe(false)})})});describe("updating",function(){it("should move the item if the group changes",function(){V();H.set("group","code");var W=F.getGroups().get("admin"),X=F.getGroups().get("code");expect(W.getCount()).toBe(1);expect(W.contains(H)).toBe(false);expect(X.getCount()).toBe(3);expect(X.contains(H)).toBe(true)})})});describe("sorting",function(){function W(Z,Y){var a=Z.length,X;Y=Y||F;for(X=0;X<a;++X){expect(Y.getAt(X)).toBe(Z[X])}}it("should sort the items in the collection by group",function(){F.removeAll();F.add(M,H,J,D);V("group","ASC");W([H,D,M,J])});it("should sort the groups according to the group direction",function(){F.removeAll();F.add(D,H,M,J);V("group","DESC");W([M,J,D,H])});it("should use the natural order inside the groups",function(){F.removeAll();F.add(M,H,J,D);V();W([H,D,M,J]);var X=F.getGroups();W([H,D],X.get("admin"));W([M,J],X.get("code"))});it("should insert the record into the correct collection position",function(){F.removeAll();F.add(H,M);V("email");F.add(J);expect(F.indexOf(J)).toBe(1)});describe("with sorters",function(){it("should sort the collection by grouper first",function(){T("evilness");V();W([H,D,M,J])});it("should sort the new groups by the sorter",function(){T("evilness","DESC");V();var X=F.getGroups();W([D,H],X.get("admin"));W([J,M],X.get("code"))});it("should sort existing groups by the sorter",function(){V();T("evilness","DESC");var X=F.getGroups();W([D,H],X.get("admin"));W([J,M],X.get("code"))});it("should sort by the sorter after the groups have been cleared",function(){T("evilness");V();R();W([M,H,D,J])})})});describe("filters",function(){it("should respect existing filters while grouping",function(){U("old",true);V();var W=F.getGroups().get("admin"),X=F.getGroups().get("code");expect(W.getCount()).toBe(1);expect(W.first()).toBe(H);expect(X.getCount()).toBe(1);expect(X.first()).toBe(M)});it("should filter existing groups",function(){V();U("old",true);var W=F.getGroups().get("admin"),X=F.getGroups().get("code");expect(W.getCount()).toBe(1);expect(W.first()).toBe(H);expect(X.getCount()).toBe(1);expect(X.first()).toBe(M)});it("should update groups when filters are cleared",function(){U("old",true);V();F.clearFilter();var W=F.getGroups();expect(W.get("admin").getCount()).toBe(2);expect(W.get("code").getCount()).toBe(2)});it("should remove groups when required",function(){V();F.getFilters().add({filterFn:function(X){return X.get("name")==="Ed Spencer"}});var W=F.getGroups();expect(W.get("admin")).toBeUndefined();expect(W.get("code").getCount()).toBe(1)});it("should add groups when required",function(){V();var X=F.getFilters();X.add({filterFn:function(Y){return Ext.Array.indexOf(["Ed Spencer","Aaron Conran"],Y.get("name"))>-1}},{filterFn:function(Y){return Y.get("name")==="Aaron Conran"}});var W=F.getGroups();expect(W.get("admin").getCount()).toBe(1);expect(W.get("code")).toBeUndefined();X.remove(X.last());W=F.getGroups();expect(W.get("admin").getCount()).toBe(1);expect(W.get("code").getCount()).toBe(1)})})});describe("remote",function(){describe("during construction",function(){it("should not trigger a load",function(){var W=spyOn(Ext.data.Store.prototype,"load");A({remoteSort:true,grouper:{property:"group"}});expect(W).not.toHaveBeenCalled()})});describe("dynamic groupers",function(){beforeEach(function(){A({remoteSort:true})});describe("via group",function(){it("should trigger a load when adding a grouper",function(){spyOn(F,"load");F.group("group");expect(F.load).toHaveBeenCalled()});it("should not trigger a load when removing the grouper and there are no sorters",function(){F.group("group");spyOn(F,"load");F.group(null);expect(F.load).not.toHaveBeenCalled()});it("should trigger a load when removing the grouper and there are sorters",function(){F.getSorters().add("name");F.group("group");spyOn(F,"load");F.group(null);expect(F.load).toHaveBeenCalled()})});describe("via setGrouper",function(){it("should trigger a load when adding a grouper",function(){spyOn(F,"load");F.setGrouper({property:"group"});expect(F.load).toHaveBeenCalled()});it("should not trigger a load when removing the grouper and there are no sorters",function(){F.setGrouper({property:"group"});spyOn(F,"load");F.setGrouper(null);expect(F.load).not.toHaveBeenCalled()});it("should trigger a load when removing the grouper and there are sorters",function(){F.getSorters().add("name");F.setGrouper({property:"group"});spyOn(F,"load");F.setGrouper(null);expect(F.load).toHaveBeenCalled()})})})});describe("events",function(){var W;beforeEach(function(){A({remoteSort:true,proxy:"memory"});W=jasmine.createSpy()});it("should fire the groupchange event when adding a grouper and pass the store & grouper",function(){F.on("groupchange",W);F.group("group");expect(W).toHaveBeenCalled();var X=W.mostRecentCall.args;expect(X[0]).toBe(F);expect(X[1].getProperty()).toBe("group");expect(X[1].getDirection()).toBe("ASC")});it("should fire the groupchange event when setting the grouper to null",function(){F.group("group");F.on("groupchange",W);F.group(null);expect(W).toHaveBeenCalled();var X=W.mostRecentCall.args;expect(X[0]).toBe(F);expect(X[1]).toBeNull()});describe("local",function(){beforeEach(function(){F.setRemoteSort(false)});describe("adding",function(){it("should trigger the refresh event when adding a grouper",function(){F.on("refresh",W);F.group("group");expect(W).toHaveBeenCalled();expect(W.mostRecentCall.args[0]).toBe(F)});it("should trigger the datachanged event when adding a grouper",function(){F.on("datachanged",W);F.group("group");expect(W).toHaveBeenCalled();expect(W.mostRecentCall.args[0]).toBe(F)})});describe("removing",function(){it("should trigger the refresh event when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("refresh",W);F.group(null);expect(W).toHaveBeenCalled();expect(W.mostRecentCall.args[0]).toBe(F)});it("should trigger the datachanged event when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("datachanged",W);F.group(null);expect(W).toHaveBeenCalled();expect(W.mostRecentCall.args[0]).toBe(F)});it("should not trigger the refresh event when removing a grouper and no sorters exist",function(){F.group("group");F.on("refresh",W);F.group(null);expect(W).not.toHaveBeenCalled()});it("should trigger the datachanged event when removing a grouper and no sorters exist",function(){F.group("group");F.on("datachanged",W);F.group(null);expect(W).not.toHaveBeenCalled()})})});describe("remote",function(){describe("adding",function(){it("should not fire refresh when adding a group",function(){F.on("refresh",W);F.group("group");expect(W).toHaveBeenCalled()});it("should not fire datachanged when adding a group",function(){F.on("datachanged",W);F.group("group");expect(W).toHaveBeenCalled()})});describe("removing",function(){it("should not fire refresh when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("refresh",W);F.group(null);expect(W).toHaveBeenCalled()});it("should not fire datachanged when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("datachanged",W);F.group(null);expect(W).toHaveBeenCalled()})})});describe("remote async",function(){beforeEach(function(){A({remoteSort:true});W=jasmine.createSpy()});describe("adding",function(){it("should not fire refresh when adding a group",function(){F.on("refresh",W);F.group("group");expect(W).not.toHaveBeenCalled()});it("should not fire datachanged when adding a group",function(){F.on("datachanged",W);F.group("group");expect(W).not.toHaveBeenCalled()})});describe("removing",function(){it("should not fire refresh when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("refresh",W);F.group(null);expect(W).not.toHaveBeenCalled()});it("should not fire datachanged when removing a grouper and sorters exist",function(){F.sort("email");F.group("group");F.on("datachanged",W);F.group(null);expect(W).not.toHaveBeenCalled()})})})})});describe("filtering",function(){describe("filter method",function(){beforeEach(function(){A()});it("should accept a field name & value",function(){F.filter("name","Ed Spencer");var R=F.getFilters().first();expect(R.getProperty()).toBe("name");expect(R.getValue()).toBe("Ed Spencer")});it("should add to existing filters",function(){F.filter("group","code");F.filter("evilness",100);var R=F.getFilters().first();expect(F.getFilters().getCount()).toBe(2);expect(R.getProperty()).toBe("group");expect(R.getValue()).toBe("code");R=F.getFilters().last();expect(R.getProperty()).toBe("evilness");expect(R.getValue()).toBe(100)})});describe("filterBy",function(){var R;beforeEach(function(){A();B();R=jasmine.createSpy()});it("should add a persistent filter",function(){F.filterBy(R);expect(F.getFilters().getCount()).toBe(1)});it("should pass along the filter fn",function(){F.filterBy(R);expect(F.getFilters().first().getFilterFn()).toBe(R)});it("should execute in the passed scope",function(){F.filterBy(R,L);expect(R.mostRecentCall.object).toBe(L)});it("should default the scope to the store",function(){F.filterBy(R);expect(R.mostRecentCall.object).toBe(F)})});describe("clearFilter method",function(){beforeEach(function(){A()});it("should remove all filters",function(){F.filter("evilness",100);F.clearFilter();expect(F.getFilters().getCount()).toBe(0)});it("should trigger a load when using remoteFilter: true",function(){F.setRemoteFilter(true);F.filter("evilness",100);spyOn(F,"load");F.clearFilter();expect(F.load).toHaveBeenCalled()});it("should trigger a load when using remoteFilter: true & passing suppressEvent",function(){F.setRemoteFilter(true);F.filter("evilness",100);spyOn(F,"load");F.clearFilter(true);expect(F.load).not.toHaveBeenCalled()});describe("events",function(){it("should not fire datachanged and refresh when suppress is passed",function(){var R=jasmine.createSpy();F.filter("evilness",100);F.on("refresh",R);F.on("datachanged",R);F.clearFilter(true);expect(R).not.toHaveBeenCalled()})})});describe("isFiltered",function(){beforeEach(function(){A()});it("should default to false",function(){expect(F.isFiltered()).toBe(false)});it("should return true when filters are added",function(){F.filter("evilness",100);expect(F.isFiltered()).toBe(true)});it("should return false when all filters are removed",function(){F.filter("evilness",100);F.getFilters().remove("evilness");expect(F.isFiltered()).toBe(false)})});describe("local",function(){describe("during construction",function(){it("should filter an initial data set",function(){A({remoteFilter:false,filters:[{property:"group",value:"code"}],data:[I,E,C,O]});expect(F.getCount()).toBe(2);expect(F.first().get("email")).toBe("ed@sencha.com")})});describe("dynamic filters",function(){beforeEach(function(){A({remoteFilter:false});B()});it("should filter the dataset when adding filters",function(){F.filter("evilness",100);expect(F.first().get("email")).toBe("ed@sencha.com");expect(F.getCount()).toBe(1)});it("should be able to use multiple filter",function(){F.getFilters().add({property:"group",value:"code"},{property:"evilness",value:100});expect(F.first().get("email")).toBe("ed@sencha.com");expect(F.getCount()).toBe(1)});it("should unfilter when removing a filter",function(){F.getFilters().add({property:"group",value:"code"},{property:"evilness",value:100});F.getFilters().remove("evilness");expect(F.getCount()).toBe(2)});it("should push records that are changed to match the filter to the end with no sort",function(){F.removeAll();F.add(H,D,J,M);F.filter("group","code");H.set("group","code");D.set("group","code");expect(F.indexOf(H)).toBe(2);expect(F.indexOf(D)).toBe(3)});describe("store methods while filtered",function(){describe("getCount",function(){it("should update the count to the filtered count",function(){F.filter("group","code");expect(F.getCount()).toBe(2)})});describe("indexOf",function(){it("should report filtered out records as not being in the store",function(){F.filter("group","admin");expect(F.indexOf(J)).toBe(-1)})});describe("getRange",function(){it("should only return the filtered records",function(){F.filter("group","admin");expect(F.getRange().length).toBe(2)})});describe("each",function(){it("should only iterate the filtered items",function(){F.filter("evilness",100);var R=jasmine.createSpy();F.each(R);expect(R.callCount).toBe(1)})});describe("add",function(){it("should be included in the active set if it matches the filter",function(){F.filter("group","code");F.add(G("foo@sencha.com",{group:"code"}));expect(F.getCount()).toBe(3);expect(F.indexOfId("foo@sencha.com")).toBe(2)});it("should not be included in the active set if it doesn't match the filter or fire the add event",function(){var R=jasmine.createSpy();F.filter("group","code");F.on("add",R);F.add(G("foo@sencha.com",{group:"admin"}));expect(F.getCount()).toBe(2);expect(F.indexOfId("foo@sencha.com")).toBe(-1);expect(R).not.toHaveBeenCalled()});it("should include unmatched added records when removing the filter",function(){F.filter("group","code");F.add(G("foo@sencha.com",{group:"admin"}));F.clearFilter();expect(F.getCount()).toBe(5);expect(F.indexOfId("foo@sencha.com")).toBe(4)})});describe("remove",function(){it("should not include a removed record after a filter is cleared",function(){F.filter("group","code");F.remove(J);F.clearFilter();expect(F.indexOf(J)).toBe(-1)});it("should not remove records filtered out",function(){F.filter("group","code");F.remove(D);F.clearFilter();expect(F.indexOf(D)).toBe(1)})});describe("removeAll",function(){it("should only remove the filtered items",function(){F.filter("group","code");F.removeAll();F.clearFilter();expect(F.getCount()).toBe(2)})})});describe("sorting",function(){it("should restore any sort order when clearing a filter",function(){F.sort("email","DESC");F.getFilters().add({filterFn:function(R){return R.get("group")==="code"}});F.clearFilter();expect(F.indexOf(M)).toBe(0);expect(F.indexOf(J)).toBe(1);expect(F.indexOf(D)).toBe(2);expect(F.indexOf(H)).toBe(3)})})})});describe("remote",function(){describe("during construction",function(){it("should not trigger a load when applying initial filters",function(){var R=spyOn(Ext.data.Store.prototype,"load");A({remoteFilter:true,filters:[{property:"group",value:"code"}]});expect(R).not.toHaveBeenCalled()})});describe("modifying the filters",function(){beforeEach(function(){A({remoteFilter:true})});describe("the filter collection",function(){it("should trigger a load when adding a filter",function(){spyOn(F,"load");F.getFilters().add({property:"group",value:"code"});expect(F.load).toHaveBeenCalled()});it("should trigger a load when adding to an existing filter",function(){F.getFilters().add({property:"group",value:"code"});spyOn(F,"load");F.getFilters().add({property:"evilness",value:100});expect(F.load).toHaveBeenCalled()});it("should trigger a load when removing the only filter",function(){F.getFilters().add({property:"group",value:"code"});spyOn(F,"load");F.getFilters().remove("group");expect(F.load).toHaveBeenCalled()});it("should trigger a load when removing a filter and there are others remaining",function(){F.getFilters().add({property:"group",value:"code"});F.getFilters().add({property:"evilness",value:100});spyOn(F,"load");F.getFilters().remove("evilness");expect(F.load).toHaveBeenCalled()})})});describe("store data",function(){beforeEach(function(){A({remoteFilter:true,proxy:{type:"ajax",url:"fakeurl"}})});it("should not filter the data when the store load has completed",function(){F.getFilters().add({property:"group",value:"code"});K([I,O]);expect(F.getCount()).toBe(2)});it("should not filter the data when adding a record",function(){F.getFilters().add({property:"group",value:"admin"});F.add(E);expect(F.getCount()).toBe(1)})})});describe("events",function(){beforeEach(function(){A({remoteFilter:true})});it("should fire when adding a filter to an empty collection",function(){var R=jasmine.createSpy();F.on("filterchange",R);F.getFilters().add({property:"group",value:"code"});expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(1);expect(S[1][0].getProperty()).toBe("group");expect(S[1][0].getValue()).toBe("code")});it("should fire when adding a filter to existing filters",function(){var R=jasmine.createSpy();F.getFilters().add({property:"group",value:"code"});F.on("filterchange",R);F.getFilters().add({property:"evilness",value:100});expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(2);expect(S[1][0].getProperty()).toBe("group");expect(S[1][0].getValue()).toBe("code");expect(S[1][1].getProperty()).toBe("evilness");expect(S[1][1].getValue()).toBe(100)});it("should fire when removing a filter from existing filter",function(){var R=jasmine.createSpy();F.getFilters().add({property:"group",value:"code"});F.getFilters().add({property:"evilness",value:100});F.on("filterchange",R);F.getFilters().remove("group");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(1);expect(S[1][0].getProperty()).toBe("evilness");expect(S[1][0].getValue()).toBe(100)});it("should fire when removing the last sorter",function(){var R=jasmine.createSpy();F.getFilters().add({property:"group",value:"admin"});F.on("filterchange",R);F.getFilters().remove("group");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1].length).toBe(0)});describe("local only",function(){beforeEach(function(){F.setRemoteFilter(false)});describe("adding",function(){it("should fire the refresh event",function(){var R=jasmine.createSpy();F.on("refresh",R);F.getFilters().add({property:"group",value:"code"});expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F)});it("should fire the datachanged event",function(){var R=jasmine.createSpy();F.on("datachanged",R);F.getFilters().add({property:"group",value:"code"});expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F)})});describe("removing",function(){it("should fire the refresh event",function(){var R=jasmine.createSpy();F.getFilters().add({property:"group",value:"code"});F.on("refresh",R);F.getFilters().remove("group");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F)});it("should fire the datachanged event",function(){var R=jasmine.createSpy();F.getFilters().add({property:"group",value:"code"});F.on("datachanged",R);F.getFilters().remove("group");expect(R).toHaveBeenCalled();var S=R.mostRecentCall.args;expect(S[0]).toBe(F)})})})})});describe("aggregation",function(){beforeEach(function(){A({remoteSort:false,grouper:{property:"group"},sorters:[{property:"email"}]});B();H=F.getAt(0);D=F.getAt(1);J=F.getAt(2);M=F.getAt(3)});describe("first",function(){it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.first(true)).toBe(H)});it("should return in the correct grouped format",function(){expect(F.first(true)).toEqual({admin:H,code:J})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.first(true)).toEqual({})})});describe("last",function(){it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.last(true)).toBe(M)});it("should return in the correct grouped format",function(){expect(F.last(true)).toEqual({admin:D,code:M})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.last(true)).toEqual({})})});describe("sum",function(){it("should return 0 if the store is empty",function(){F.removeAll();expect(F.sum("evilness")).toBe(0)});it("should sum the values specified by the property",function(){expect(F.sum("evilness")).toBe(160)});it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.sum("evilness",true)).toBe(160)});it("should return in the correct grouped format",function(){expect(F.sum("evilness",true)).toEqual({admin:75,code:85})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.sum("evilness",true)).toEqual({})})});describe("count",function(){it("should return 0 if the store is empty",function(){F.removeAll();expect(F.count()).toBe(0)});it("should count the values in the store",function(){expect(F.count()).toBe(4)});it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.count(true)).toBe(4)});it("should return in the correct grouped format",function(){expect(F.count(true)).toEqual({admin:2,code:2})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.count(true)).toEqual({})})});describe("min",function(){it("should return undefined if there are no items",function(){F.removeAll();expect(F.min("age")).toBeUndefined()});it("should return the minimum value",function(){expect(F.min("age")).toBe(20)});it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.min("age",true)).toBe(20)});it("should return in the correct grouped format",function(){expect(F.min("age",true)).toEqual({admin:20,code:25})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.min("age",true)).toEqual({})})});describe("max",function(){it("should return undefined if there are no items",function(){F.removeAll();expect(F.max("age")).toBeUndefined()});it("should return the maximum value",function(){expect(F.max("age")).toBe(70)});it("should ignore the grouped parameter if there's no group field",function(){F.clearGrouping();expect(F.max("age",true)).toBe(70)});it("should return in the correct grouped format",function(){expect(F.max("age",true)).toEqual({admin:26,code:70})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.max("age",true)).toEqual({})})});describe("average",function(){it("should return 0 if there are no items",function(){F.removeAll();expect(F.average("evilness")).toBe(0)});it("should return the correct average",function(){expect(F.average("evilness")).toBe(40)});it("should ignore the grouped parameter if there's no groupField",function(){F.clearGrouping();expect(F.average("evilness")).toBe(40)});it("should return in the correct grouped format",function(){expect(F.average("evilness",true)).toEqual({admin:37.5,code:42.5})});it("should return an empty object if grouped and no items",function(){F.removeAll();expect(F.average("evilness",true)).toEqual({})})});describe("aggregate",function(){it("should default the scope to the store",function(){var R=jasmine.createSpy();F.aggregate(R);expect(R.mostRecentCall.object).toBe(F)});it("should use any custom scope",function(){var R=jasmine.createSpy();F.aggregate(R,L);expect(R.mostRecentCall.object).toBe(L)});it("should call the custom function with an array of values & records",function(){var R=true;F.aggregate(function(S,T){R=R&&Ext.isArray(T)&&Ext.isArray(S)},null,false,"email");expect(R).toBe(true)});it("should allow the field parameter to be optional",function(){var R;F.aggregate(function(S,T){R=T[0]});expect(R).toBeUndefined()});it("should pass the field values",function(){var R;F.aggregate(function(S,T){R=T},null,true,"email");expect(R).toEqual(["ed@sencha.com","tommy@sencha.com"])});describe("grouped",function(){it("should return an empty object if there are no groups",function(){F.removeAll();expect(F.aggregate(Ext.emptyFn,null,true)).toEqual({})});it("should return undefined if there is no groupField",function(){F.clearGrouping();expect(F.aggregate(Ext.emptyFn,null,true)).toBeUndefined()});it("should return the groups with the aggregated value",function(){var R=F.aggregate(function(S,T){return T.join("")},null,true,"email");expect(R).toEqual({admin:"aaron@sencha.comabe@sencha.com",code:"ed@sencha.comtommy@sencha.com"})})})})});describe("updating records",function(){var R;beforeEach(function(){A();B();R=jasmine.createSpy()});describe("via set",function(){describe("a single value",function(){it("should fire the update event",function(){F.on("update",R);F.first().set("name","Ned Spencer");expect(R).toHaveBeenCalled()});it("should pass the store, model, type & modified field",function(){var S=F.first(),T;F.on("update",R);S.set("name","Ned Spencer");T=R.mostRecentCall.args;expect(T[0]).toBe(F);expect(T[1]).toBe(S);expect(T[2]).toBe(Ext.data.Model.EDIT);expect(T[3]).toEqual(["name"])})});describe("multiple values",function(){it("should fire update once",function(){F.on("update",R);F.first().set({name:"Ned Spencer",evilness:9000});expect(R).toHaveBeenCalled()});it("should pass the store, model, type & modified fields",function(){var S=F.first(),T;F.on("update",R);S.set({name:"Ned Spencer",evilness:9000});T=R.mostRecentCall.args;expect(T[0]).toBe(F);expect(T[1]).toBe(S);expect(T[2]).toBe(Ext.data.Model.EDIT);expect(T[3]).toEqual(["name","evilness"])})});describe("changing the id",function(){it("should remap the id value",function(){var S=F.first();S.setId("ted@sencha.com");expect(F.getById("ted@sencha.com")).toBe(S)});it("should remap the id even when filtered out",function(){F.filterBy(function(S){return S!==J});J.setId("red@sencha.com");F.clearFilter();expect(F.getById("red@sencha.com")).toBe(J)})});describe("when sorted",function(){it("should move the record into the correct position",function(){F.sort("email");M.set("email","aaa@sencha.com");expect(F.indexOf(M)).toBe(0)})});describe("when filtered",function(){describe("change causes the record to be excluded",function(){it("should remove the record active set",function(){F.filter("group","code");J.set("group","admin");expect(F.indexOf(J)).toBe(-1)});it("should not fire the update event",function(){F.on("update",R);F.filter("group","code");J.set("group","admin");expect(R).not.toHaveBeenCalled()})});describe("change causes the record to be included",function(){it("should add the record to the active set if changed to match",function(){F.filter("group","code");H.set("group","code");expect(F.indexOf(H)).toBe(2)});it("should fire the update event",function(){F.on("update",R);F.filter("group","code");H.set("group","code");expect(R).toHaveBeenCalled()})})})});describe("via commit",function(){it("should fire the update event",function(){J.set("name","Foo");F.on("update",R);J.commit();expect(R).toHaveBeenCalled()});it("should pass the store, model, type & null (modified fields)",function(){J.set("name","Foo");J.set("age",40);F.on("update",R);J.commit();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1]).toBe(J);expect(S[2]).toBe(Ext.data.Model.COMMIT);expect(S[3]).toBeNull()});it("should not fire the update event if the record is filtered out",function(){J.set("name","Foo");F.on("update",R);F.filter("name","Aaron");J.commit();expect(R).not.toHaveBeenCalled()})});describe("via reject",function(){it("should fire the update event",function(){J.set("name","Foo");F.on("update",R);J.reject();expect(R).toHaveBeenCalled()});it("should pass the store, model, type & null (modified fields)",function(){J.set("name","Foo");F.on("update",R);J.reject();var S=R.mostRecentCall.args;expect(S[0]).toBe(F);expect(S[1]).toBe(J);expect(S[2]).toBe(Ext.data.Model.REJECT);expect(S[3]).toBeNull()});it("should not fire the update event if the record is filtered out",function(){J.set("name","Foo");F.on("update",R);F.filter("name","Aaron");J.reject();expect(R).not.toHaveBeenCalled()})});describe("via erase",function(){it("should remove the record from the store",function(){J.erase();expect(F.indexOf(J)).toBe(-1)})});describe("via drop",function(){it("should remove the record from the store",function(){J.drop();expect(F.indexOf(J)).toBe(-1)})})});describe("metachange event",function(){var S=false,R={success:true,data:[{name:"alex"},{name:"ben"},{name:"don"},{name:"evan"},{name:"nige"},{name:"phil"}],metaData:{root:"data"}},V,T,U;beforeEach(function(){A({proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(W,X){S=true;V=arguments;T=W;U=X}}});F.load();K(R)});afterEach(function(){S=false;V=T=U=null});it("should call the listener",function(){expect(S).toBe(true)});it("should return the store",function(){expect(T).toBe(F)});it("should return the meta data",function(){expect(U).toEqual(R.metaData)});it("should return the store as the first arg",function(){expect(V[0]).toBe(F)});it("should return the meta data as the second arg",function(){expect(V[1]).toBe(U)});describe("disableMetaChangeEvent (for associated models)",function(){var W=false;afterEach(function(){W=false});it("should not be set by default",function(){A({proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(X,Y){W=true}}});F.load();K(R);expect(W).toBe(true)});it("should not fire the event if `true`",function(){A({disableMetaChangeEvent:true,proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(X,Y){W=true}}});F.load();K(R);expect(W).toBe(false)});it("should fire the event if `false`",function(){A({disableMetaChangeEvent:false,proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(X,Y){W=true}}});F.load();K(R);expect(W).toBe(true)})})});describe("with a session",function(){var R;afterEach(function(){if(R){R.destroy();R=null}});describe("loading data",function(){it("should pass the session record creator when using load",function(){R=new Ext.data.Session();A({session:R,proxy:{type:"ajax"}});var S=spyOn(F.getProxy(),"read").andReturn();F.load();expect(S.mostRecentCall.args[0].getRecordCreator()).toBe(R.recordCreator)});it("should pass the record creator when using loadRawData",function(){R=new Ext.data.Session();A({session:R,proxy:{type:"ajax"}});var S=spyOn(F.getProxy().getReader(),"read").andCallThrough();F.loadRawData([]);expect(S.mostRecentCall.args[1].recordCreator).toBe(R.recordCreator)})})});describe("Reactive grouping",function(){var T,V,R;function U(W,X,Y,Z){R++;expect(W.getRange()).toEqual([H,D,M,J]);X=W.getSorters();T=W.getGroups();expect(T.items[0].getSorters().items.length).toBe(1);expect(T.items[0].getSorters().items[0].getProperty()).toBe("age");expect(T.items[0].getSorters().items[0]===X.items[0]).toBe(true);expect(T.items[1].getSorters().items[0]===X.items[0]).toBe(true);expect(T.items[0].items).toEqual([H,D]);expect(T.items[1].items).toEqual([M,J])}function S(){R++;expect(F.getRange()).toEqual([H,J,D,M]);expect(T.items[0].items).toEqual([H,J,D]);expect(T.items[1].items).toEqual([M])}describe("Test state of groups' sort at the time the sort event fires",function(){it("should work going from no sorters to some sorters",function(){A({groupField:"group",data:[O,E,C,I]});H=F.getById("aaron@sencha.com");D=F.getById("abe@sencha.com");J=F.getById("ed@sencha.com");M=F.getById("tommy@sencha.com");expect(F.getRange()).toEqual([D,H,J,M]);R=0;F.on({datachanged:U,refresh:U,sort:U,single:true});F.sort("age");expect(R).toBe(3);R=0;F.on({add:S,single:true});J.set("group","admin");expect(R).toBe(1)});it("should work changing sorters",function(){A({groupField:"group",data:[O,E,C,I],sorters:[{property:"evilness",direction:"DESC"}]});H=F.getById("aaron@sencha.com");D=F.getById("abe@sencha.com");J=F.getById("ed@sencha.com");M=F.getById("tommy@sencha.com");expect(F.getRange()).toEqual([D,H,J,M]);V=F.getSorters();T=F.getGroups();expect(T.items[0].getSorters().items.length).toBe(1);expect(T.items[0].getSorters().items[0].getProperty()).toBe("evilness");expect(T.items[0].getSorters().items[0]===V.items[0]).toBe(true);expect(T.items[1].getSorters().items[0]===V.items[0]).toBe(true);expect(T.items[0].items).toEqual([D,H]);expect(T.items[1].items).toEqual([J,M]);R=0;F.on({datachanged:U,refresh:U,sort:U,single:true});F.sort("age");expect(R).toBe(3);R=0;F.on({add:S,single:true});J.set("group","admin");expect(R).toBe(1)})})})});