describe("Ext.Array",function(){var A;describe("indexOf",function(){describe("without from argument",function(){beforeEach(function(){A=[1,2,3,4,5,6]});afterEach(function(){A=null});it("should always return -1 on an empty array",function(){expect(Ext.Array.indexOf([],1)).toEqual(-1)});it("should return -1 if them it doesn't exist",function(){expect(Ext.Array.indexOf(A,7)).toEqual(-1)});it("should return the matching index if found",function(){expect(Ext.Array.indexOf(A,4)).toEqual(3)});it("should return the first matching index if found",function(){A.push(1);expect(Ext.Array.indexOf(A,1)).toEqual(0)})});describe("with from argument",function(){beforeEach(function(){A=[1,2,3,4,5,6,7]});it("should return the matched index if found",function(){expect(Ext.Array.indexOf(A,5,3)).toEqual(4);expect(Ext.Array.indexOf(A,5,4)).toEqual(4)});it("should return -1 if the item doesn't exist after the passed from value",function(){expect(Ext.Array.indexOf(A,5,5)).toEqual(-1)})})});describe("removing items",function(){var C;it("should do nothing when removing from an empty array",function(){C=[];expect(function(){Ext.Array.remove(C,1)}).not.toRaiseExtError();expect(C).toEqual([])});describe("when removing an item inside an array",function(){beforeEach(function(){C=[1,2,3,4,5];Ext.Array.remove(C,1)});it("should remove the item",function(){expect(C).toEqual([2,3,4,5])});it("should update the index of the following items",function(){expect(C[1]).toEqual(3);expect(C[2]).toEqual(4);expect(C[3]).toEqual(5)});it("should remove only using a strict type check",function(){Ext.Array.remove(C,"2");expect(C).toEqual([2,3,4,5])})})});describe("contains",function(){it("should always return false with an empty array",function(){expect(Ext.Array.contains([],1)).toBe(false)});it("should return false if an item does not exist in the array",function(){expect(Ext.Array.contains([1,2,3],10)).toBe(false)});it("should return true if an item exists in the array",function(){expect(Ext.Array.contains([8,9,10],10)).toBe(true)});it("should only match with strict type checking",function(){expect(Ext.Array.contains([1,2,3,4,5],"1")).toBe(false)})});describe("include",function(){var C;it("should always add to an empty array",function(){C=[];Ext.Array.include(C,1);expect(C).toEqual([1])});it("should add the item if it doesn't exist",function(){C=[1];Ext.Array.include(C,2);expect(C).toEqual([1,2])});it("should always add to the end of the array",function(){C=[9,8,7,6];Ext.Array.include(C,10);expect(C).toEqual([9,8,7,6,10])});it("should match using strict type checking",function(){C=["1"];Ext.Array.include(C,1);expect(C).toEqual(["1",1])});it("should not modify the array if the value exists",function(){C=[4,5,6];Ext.Array.include(C,7);expect(C).toEqual([4,5,6,7])})});describe("clone",function(){it("should clone an empty array to be empty",function(){expect(Ext.Array.clone([])).toEqual([])});it("should clone an array with items",function(){expect(Ext.Array.clone([1,3,5])).toEqual([1,3,5])});it("should create a new reference",function(){var C=[1,2,3];expect(Ext.Array.clone(C)).not.toBe(C)});it("should do a shallow clone",function(){var D={},E=[D],C;C=Ext.Array.clone(E);expect(C[0]).toBe(D)})});describe("clean",function(){it("should return an empty array if cleaning an empty array",function(){expect(Ext.Array.clean([])).toEqual([])});it("should remove undefined values",function(){expect(Ext.Array.clean([undefined])).toEqual([])});it("should remove null values",function(){expect(Ext.Array.clean([null])).toEqual([])});it("should remove empty strings",function(){expect(Ext.Array.clean([""])).toEqual([])});it("should remove empty arrays",function(){expect(Ext.Array.clean([[]])).toEqual([])});it("should remove a mixture of empty values",function(){expect(Ext.Array.clean([null,undefined,"",[]])).toEqual([])});it("should remove all occurrences of empty values",function(){expect(Ext.Array.clean([null,null,null,undefined,"","","",undefined])).toEqual([])});it("should leave non empty values untouched",function(){expect(Ext.Array.clean([1,2,3])).toEqual([1,2,3])});it("should remove only the empty values",function(){expect(Ext.Array.clean([undefined,null,1,null,2])).toEqual([1,2])});it("should preserve order on removal",function(){expect(Ext.Array.clean([1,null,2,null,null,null,3,undefined,"","",4])).toEqual([1,2,3,4])})});describe("unique",function(){it("should return an empty array if run on an empty array",function(){expect(Ext.Array.unique([])).toEqual([])});it("should return a new reference",function(){var C=[1,2,3];expect(Ext.Array.unique(C)).not.toBe(C)});it("should return a copy if all items are unique",function(){expect(Ext.Array.unique([6,7,8])).toEqual([6,7,8])});it("should only use strict typing to match",function(){expect(Ext.Array.unique([1,"1"])).toEqual([1,"1"])});it("should preserve the order when removing",function(){expect(Ext.Array.unique([1,2,1,3,1,1,1,6,5,1])).toEqual([1,2,3,6,5])})});describe("map",function(){var C=function(D){return D};it("should return an empty array if run on an empty array",function(){expect(Ext.Array.map([],function(){})).toEqual([])});it("should return a new reference",function(){var D=[1,2];expect(Ext.Array.map(D,C)).not.toBe(D)});it("should execute the function for each item in the array",function(){expect(Ext.Array.map([1,2,3,4,5],function(D){return D*2})).toEqual([2,4,6,8,10])});it("should get called with the correct scope",function(){var E={},D;Ext.Array.map([1,2,3,4,5],function(){D=this},E);expect(D).toBe(E)});it("should get called with the argument, index and array",function(){var E,F,D,G=[1];Ext.Array.map(G,function(){E=arguments[0];F=arguments[1];D=arguments[2]});expect(E).toEqual(1);expect(F).toEqual(0);expect(D).toBe(G)})});describe("from",function(){it("should return an empty array for an undefined value",function(){expect(Ext.Array.from(undefined)).toEqual([])});it("should return an empty array for a null value",function(){expect(Ext.Array.from(null)).toEqual([])});it("should convert an array",function(){expect(Ext.Array.from([1,2,3])).toEqual([1,2,3])});it("should preserve the order",function(){expect(Ext.Array.from(["a","string","here"])).toEqual(["a","string","here"])});it("should convert a single value to an array",function(){expect(Ext.Array.from(true)).toEqual([true]);expect(Ext.Array.from(700)).toEqual([700])});it("should convert arguments to an array",function(){var C,D=function(){C=Ext.Array.from(arguments)};D(1,2,3);expect(C instanceof Array).toBeTruthy();expect(C).toEqual([1,2,3])});it("should convert a DOM collection to an array",function(){var G=document.body.appendChild(document.createElement("div")),D=G.appendChild(document.createElement("div")),E=G.appendChild(document.createElement("div")),F=G.appendChild(document.createElement("div")),H=G.getElementsByTagName("div"),C=Ext.Array.from(H);expect(C instanceof Array).toBeTruthy();expect(C).toEqual([D,E,F]);document.body.removeChild(G)});it("should convert a single string",function(){expect(Ext.Array.from("Foo")).toEqual(["Foo"])});it("should convert a single function",function(){var C=function(){};expect(Ext.Array.from(C)).toEqual([C])})});describe("toArray",function(){it("should convert an array",function(){expect(Ext.Array.toArray([1,2,3,4])).toEqual([1,2,3,4])});it("should convert a string",function(){expect(Ext.Array.toArray("12345")).toEqual(["1","2","3","4","5"])});it("should create a new reference",function(){var C=[6,7,8];expect(Ext.Array.toArray(C)).not.toBe(C)});it("should convert arguments",function(){var C,D=function(){C=Ext.Array.toArray(arguments)};D(-1,-2,-3);expect(C instanceof Array).toBeTruthy();expect(C).toEqual([-1,-2,-3])});it("should convert a DOM collection",function(){var G=document.body.appendChild(document.createElement("div")),D=G.appendChild(document.createElement("div")),E=G.appendChild(document.createElement("div")),F=G.appendChild(document.createElement("div")),H=G.getElementsByTagName("div"),C=Ext.Array.toArray(H);expect(C instanceof Array).toBeTruthy();expect(C).toEqual([D,E,F]);document.body.removeChild(G)});describe("start/end parameters",function(){it("should default to whole of the array",function(){expect(Ext.Array.toArray([1,2,3,4,5,6,7,8,9,10])).toEqual([1,2,3,4,5,6,7,8,9,10])});it("should work with only the start parameter specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2)).toEqual([3,4,5,6])});it("should work with only the end parameter specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],null,4)).toEqual([1,2,3,4])});it("should work with both params specified",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2,4)).toEqual([3,4])});it("should work with nagative end",function(){expect(Ext.Array.toArray([1,2,3,4,5,6],2,-1)).toEqual([3,4,5])})})});describe("pluck",function(){it("should return an empty array when an empty array is passed",function(){expect(Ext.Array.pluck([],"prop")).toEqual([])});it("should pull the properties from objects in the array",function(){var C=[{prop:1},{prop:2},{prop:3}];expect(Ext.Array.pluck(C,"prop")).toEqual([1,2,3])});it("should return a new reference",function(){var C=[{prop:1},{prop:2},{prop:3}];expect(Ext.Array.pluck(C,"prop")).not.toBe(C)});it("should work on a DOM collection",function(){var E=document.body.appendChild(document.createElement("div")),C=0,D;for(;C<5;++C){D=E.appendChild(document.createElement("div"));D.className="node"+C}expect(Ext.Array.pluck(E.getElementsByTagName("div"),"className")).toEqual(["node0","node1","node2","node3","node4"]);document.body.removeChild(E)})});describe("filter",function(){var C=function(){return true};it("should return an empty array if filtering an empty array",function(){expect(Ext.Array.filter([],C)).toEqual([])});it("should create a new reference",function(){var D=[1,2,3];expect(Ext.Array.filter(D,C)).not.toBe(D)});it("should add items if the filter function returns true",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(D){return D%2===0})).toEqual([2,4,6,8,10])});it("should add items if the filter function returns a truthy value",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(D){if(D%2===0){return 1}})).toEqual([2,4,6,8,10])});it("should not add items if the filter function returns a falsy value",function(){expect(Ext.Array.filter([1,2,3,4,5,6,7,8,9,10],function(D){return 0})).toEqual([])});it("should pass the correct parameters",function(){var F=[],E=[],D=[],G=[1,2,3];Ext.Array.filter([1,2,3],function(J,I,H){F.push(J);E.push(I);D.push(H)});expect(F).toEqual([1,2,3]);expect(E).toEqual([0,1,2]);expect(D).toEqual([G,G,G])});it("should do a shallow copy",function(){var D={prop:1},E={prop:2},F={prop:3};expect(Ext.Array.filter([D,E,F],C)).toEqual([D,E,F])});it("should execute in scope when passed",function(){var D={},E;expect(Ext.Array.filter([1,2,3],function(){E=this},D));expect(E).toBe(D)})});describe("forEach",function(){it("should not execute on an empty array",function(){var C=0;Ext.Array.forEach([],function(){++C});expect(C).toEqual(0)});it("should execute for each item in the array",function(){var C=0;Ext.Array.forEach([1,2,3,4,5],function(){++C});expect(C).toEqual(5)});it("should execute in the appropriate scope",function(){var C={},D;Ext.Array.forEach([1,2,3],function(){D=this},C);expect(D).toBe(C)});it("should pass the appropriate params to the callback",function(){var E=[],D=[],C=[],F=[1,2,3];Ext.Array.forEach(F,function(I,H,G){E.push(I);D.push(H);C.push(G)});expect(E).toEqual([1,2,3]);expect(D).toEqual([0,1,2]);expect(C).toEqual([F,F,F])})});describe("each",function(){describe("return values",function(){xit("should return 0 if the passed value is empty",function(){expect(Ext.Array.each([])).toEqual(0)});it("should return the stopping index if iteration is halted",function(){expect(Ext.Array.each([1,2,3],function(C){return C!=2})).toEqual(1)});it("should return true if iteration is not stopped",function(){expect(Ext.Array.each([4,5,6],function(){return true})).toBeTruthy()})});describe("scope/parameters",function(){it("should execute in the specified scope",function(){var C={},D;Ext.Array.each([1,2,3],function(){D=this},C);expect(D).toBe(C)});it("should pass the item, index and array",function(){var E=[],D=[],C=[],F=[1,2,3];Ext.Array.each(F,function(I,H,G){E.push(I);D.push(H);C.push(G)});expect(E).toEqual([1,2,3]);expect(D).toEqual([0,1,2]);expect(C).toEqual([F,F,F])})});describe("stopping iteration",function(){it("should not stop iteration by default",function(){var C=0;Ext.Array.each([1,2,3,4,5],function(){++C});expect(C).toEqual(5)});it("should not stop unless an explicit false is returned",function(){var C=0;Ext.Array.each([1,2,3,4,5],function(){++C;return null});expect(C).toEqual(5)});it("should stop immediately if false is returned",function(){var C=0;Ext.Array.each([1,2,3,4,5],function(D){++C;return D!=2});expect(C).toEqual(2)})});describe("other collection types",function(){it("should iterate arguments",function(){var C,E=[],D=function(){C=Ext.Array.each(arguments,function(F){E.push(F)})};D(1,2,3);expect(E).toEqual([1,2,3])});it("should iterate over a DOM collection",function(){var G=document.body.appendChild(document.createElement("div")),D=G.appendChild(document.createElement("div")),E=G.appendChild(document.createElement("div")),F=G.appendChild(document.createElement("div")),H=G.getElementsByTagName("div"),C=[];Ext.Array.each(H,function(I){C.push(I.tagName.toLowerCase())});expect(C).toEqual(["div","div","div"]);document.body.removeChild(G)})});it("should iterate once over a single, non empty value",function(){var C=0;Ext.Array.each("string",function(){++C});expect(C).toEqual(1)});describe("reverse iteraction",function(){it("should iterate backwards",function(){var E=[],D=[1,2,3],C=function(F){E.push(F)};Ext.Array.each(D,C,undefined,true);expect(E).toEqual([3,2,1])});it("should iterate backwards and stop when fn returns false",function(){var E=[],D=[1,2,3],C=function(F){E.push(F);if(F===2){return false}};Ext.Array.each(D,C,undefined,true);expect(E).toEqual([3,2])})})});describe("every",function(){describe("scope/params",function(){it("should execute in the specified scope",function(){var C={},D;Ext.Array.every([1,2,3],function(){D=this},C);expect(D).toBe(C)});it("should pass the item, index and array",function(){var E=[],D=[],C=[],F=[1,2,3];Ext.Array.every(F,function(I,H,G){E.push(I);D.push(H);C.push(G);return true});expect(E).toEqual([1,2,3]);expect(D).toEqual([0,1,2]);expect(C).toEqual([F,F,F])})});it("should return true on an empty array",function(){expect(Ext.Array.every([],function(){})).toBeTruthy()});it("should throw an exception if no fn is passed",function(){expect(function(){Ext.Array.every([1,2,3])}).toRaiseExtError()});it("should stop as soon as a false value is found",function(){var C=0,D;D=Ext.Array.every([true,true,false,true],function(E){++C;return E});expect(C).toEqual(3);expect(D).toBeFalsy()});it("should return true if all values match the function",function(){expect(Ext.Array.every([1,2,3,4,5,6,7,8,9],function(C){return C<10})).toBeTruthy()})});describe("some",function(){describe("scope/params",function(){it("should execute in the specified scope",function(){var C={},D;Ext.Array.some([1,2,3],function(){D=this},C);expect(D).toBe(C)});it("should pass the item, index and array",function(){var E=[],D=[],C=[],F=[1,2,3];Ext.Array.some(F,function(I,H,G){E.push(I);D.push(H);C.push(G);return true});expect(E).toEqual([1]);expect(D).toEqual([0]);expect(C).toEqual([F])})});it("should return false on an empty array",function(){expect(Ext.Array.some([],function(){})).toBeFalsy()});it("should throw an exception if no fn is passed",function(){expect(function(){Ext.Array.some([1,2,3])}).toRaiseExtError()});it("should stop as soon as a matching value is found",function(){var C=0,D;D=Ext.Array.some([1,2,3,4],function(E){++C;return E==3});expect(C).toEqual(3);expect(D).toBeTruthy()});it("should return false if nothing matches the matcher function",function(){var C=0,D;D=Ext.Array.some([1,2,3,4,5,6,7,8,9],function(E){++C;return E>9});expect(C).toEqual(9);expect(D).toBeFalsy()})});describe("merge",function(){it("should return an empty array if run on an empty array",function(){expect(Ext.Array.merge([])).toEqual([])});it("should return a new reference",function(){var C=[1,2,3];expect(Ext.Array.merge(C)).not.toBe(C)});it("should return a copy if all items are unique",function(){expect(Ext.Array.merge([6,7,8])).toEqual([6,7,8])});it("should only use strict typing to match",function(){expect(Ext.Array.merge([1,"1"])).toEqual([1,"1"])});it("should accept two or more arrays and return a unique union with items in order of first appearance",function(){expect(Ext.Array.merge([1,2,3],["1","2","3"],[4,1,5,2],[6,3,7,"1"],[8,"2",9,"3"])).toEqual([1,2,3,"1","2","3",4,5,6,7,8,9])})});describe("intersect",function(){it("should return an empty array if no arrays are passed",function(){expect(Ext.Array.intersect()).toEqual([])});it("should return an empty array if one empty array is passed",function(){expect(Ext.Array.intersect([])).toEqual([])});it("should return a new reference",function(){var C=[1,2,3];expect(Ext.Array.intersect(C)).not.toBe(C)});it("should return a copy if one array is passed",function(){expect(Ext.Array.intersect([6,7,8])).toEqual([6,7,8])});it("should return an intersection of two or more arrays with items in order of first appearance",function(){expect(Ext.Array.intersect([1,2,3],[4,3,2,5],[2,6,3])).toEqual([2,3])});it("should return an empty array if there is no intersecting values",function(){expect(Ext.Array.intersect([1,2,3],[4,5,6])).toEqual([])});it("should contain the unique set of intersected values only",function(){expect(Ext.Array.intersect([1,1,2,3,3],[1,1,2,3,3])).toEqual([1,2,3])});it("should only use strict typing to match",function(){expect(Ext.Array.intersect([1],["1"])).toEqual([])});it("should handle arrays containing falsy values",function(){expect(Ext.Array.intersect([undefined,null,false,0,""],[undefined,null,false,0,""])).toEqual([undefined,null,false,0,""])})});describe("difference",function(){it("should return a set difference of two arrays with items in order of first appearance",function(){expect(Ext.Array.difference([1,2,3,4],[3,2])).toEqual([1,4])});it("should return the first array unchanged if there is no difference",function(){expect(Ext.Array.difference([1,2,3],[4,5,6])).toEqual([1,2,3])});it("should return a new reference",function(){var C=[1,2,3];expect(Ext.Array.difference(C,[3,2])).not.toBe(C)});it("should remove multiples of the same value from the first array",function(){expect(Ext.Array.difference([1,2,3,2,4,1],[2,1])).toEqual([3,4])});it("should only use strict typing to match",function(){expect(Ext.Array.difference([1],["1"])).toEqual([1])})});describe("sort",function(){var C,D;beforeEach(function(){C=["bbb","addda","erere","fff","de3"];D=[1,3,2,4,6,7]});describe("with strings",function(){it("should be able to sort an array without sortFn",function(){Ext.Array.sort(C);expect(C).toEqual(["addda","bbb","de3","erere","fff"])});it("should be able to use a sortFn that returns a Number",function(){Ext.Array.sort(C,function(F,E){if(F===E){return 0}return F>E?1:-1});expect(C).toEqual(["addda","bbb","de3","erere","fff"])})});describe("with numbers",function(){it("should be able to sort an array without sortFn",function(){Ext.Array.sort(D);expect(D).toEqual([1,2,3,4,6,7])});it("should be able to use a sortFn that returns a Number",function(){Ext.Array.sort(D,function(F,E){return F-E});expect(D).toEqual([1,2,3,4,6,7])})})});describe("min",function(){describe("numbers",function(){it("without comparisonFn",function(){expect(Ext.Array.min([1,2,3,4,5,6])).toEqual(1);expect(Ext.Array.min([6,5,4,3,2,1])).toEqual(1)});it("with comparisonFn",function(){expect(Ext.Array.min([1,2,3,4,5,6],function(D,C){return D<C?1:-1})).toEqual(6)})})});describe("max",function(){describe("numbers",function(){it("without comparisonFn",function(){expect(Ext.Array.max([1,2,3,4,5,6])).toEqual(6)});it("with comparisonFn",function(){expect(Ext.Array.max([1,2,3,4,5,6],function(D,C){return D<C?1:-1})).toEqual(1)})})});describe("sum",function(){it("should return 21",function(){expect(Ext.Array.sum([1,2,3,4,5,6])).toEqual(21)})});describe("mean",function(){it("should return 3.5",function(){expect(Ext.Array.mean([1,2,3,4,5,6])).toEqual(3.5)})});function B(C){var D=C;return function(){it("should remove items in the middle",function(){var E=[0,1,2,3,4,5,6,7];D(E,2,2);expect(Ext.encode(E)).toEqual("[0,1,4,5,6,7]")});it("should insert items in the middle",function(){var E=[0,1,2,3,4,5,6,7];D(E,2,0,["a","b"]);expect(Ext.encode(E)).toEqual('[0,1,"a","b",2,3,4,5,6,7]')});it("should replace in the middle with more items",function(){var E=[0,1,2,3,4,5,6,7];D(E,2,2,["a","b","c","d"]);expect(Ext.encode(E)).toEqual('[0,1,"a","b","c","d",4,5,6,7]')});it("should replace in the middle with fewer items",function(){var E=[0,1,2,3,4,5,6,7];D(E,2,4,["a","b"]);expect(Ext.encode(E)).toEqual('[0,1,"a","b",6,7]')});it("should delete at front",function(){var E=[0,1,2,3];D(E,0,2);expect(Ext.encode(E)).toEqual("[2,3]")});it("should delete at tail",function(){var E=[0,1,2,3];D(E,2,2);expect(Ext.encode(E)).toEqual("[0,1]")});it("should delete everything",function(){var E=[0,1,2,3];D(E,0,4);expect(Ext.encode(E)).toEqual("[]")});it("should insert at front",function(){var E=[0,1];D(E,0,0,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('["a","b","c","d","e",0,1]')});it("should insert at tail",function(){var E=[0,1];D(E,E.length,0,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('[0,1,"a","b","c","d","e"]')});it("should insert into empty array",function(){var E=[];D(E,0,0,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('["a","b","c","d","e"]')});it("should replace at front",function(){var E=[0,1];D(E,0,1,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('["a","b","c","d","e",1]')});it("should replace at tail",function(){var E=[0,1];D(E,1,1,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('[0,"a","b","c","d","e"]')});it("should replace entire array",function(){var E=[0,1,2,3];D(E,0,E.length,["a","b","c","d","e"]);expect(Ext.encode(E)).toEqual('["a","b","c","d","e"]')});it("should handle negative index",function(){var E=[0,1,2,3];D(E,-2,20);expect(Ext.encode(E)).toEqual("[0,1]")});it("should work around the IE8 bug",function(){var F=[],E,G=20;while(G--){F.push("A")}F.splice(15,0,"F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F");E=F.length;D(F,13,0,["XXX"]);expect(F.length).toEqual(E+1)})}}describe("replace with _replaceSim",B(Ext.Array._replaceSim));describe("replace with native implementation",B(Ext.Array.replace));describe("splice",function(){it("returns proper result array at the front",function(){var C=Ext.Array._spliceSim([1,2,3,4],0,2);expect(Ext.encode(C)).toEqual("[1,2]")});it("returns proper result array at the end",function(){var C=Ext.Array._spliceSim([1,2,3,4],2,2);expect(Ext.encode(C)).toEqual("[3,4]")});it("returns proper result array from the middle",function(){var C=Ext.Array._spliceSim([1,2,3,4],1,2);expect(Ext.encode(C)).toEqual("[2,3]")});it("return an empty array when nothing removed",function(){var C=Ext.Array._spliceSim([1,2,3,4],1,0);expect(Ext.encode(C)).toEqual("[]")})});describe("slice",function(){var C;describe("with Array",function(){beforeEach(function(){C=[{0:0},{1:1},{2:2},{3:3}]});D()});describe("with arguments",function(){beforeEach(function(){C=(function(){return arguments})({0:0},{1:1},{2:2},{3:3})});D()});function D(){it("should shallow clone",function(){var E=Ext.Array.slice(C,0);expect(E===C).toBe(false);expect(E[0]===C[0]).toBe(true)});it("should not require a begin or end",function(){var E=Ext.Array.slice(C);expect(E===C).toBe(false);expect(E[0]).toBe(C[0])});it("should slice off the first item",function(){var E=Ext.Array.slice(C,1);expect(E.length).toBe(3);expect(E[0]).toBe(C[1]);expect(E[2]).toBe(C[3])});it("should ignore `end` if undefined",function(){var E=Ext.Array.slice(C,1,undefined);expect(E.length).toBe(3);expect(E[0]).toBe(C[1]);expect(E[2]).toBe(C[3])});it("should ignore `begin` if undefined",function(){var E=Ext.Array.slice(C,undefined);expect(E.length).toBe(4);expect(E[0]).toBe(C[0]);expect(E[3]).toBe(C[3])});it("should ignore `begin` and `end` if undefined",function(){var E=Ext.Array.slice(C,undefined,undefined);expect(E.length).toBe(4);expect(E[0]).toBe(C[0]);expect(E[3]).toBe(C[3])});it("should slice out the middle",function(){var E=Ext.Array.slice(C,1,-1);expect(E.length).toBe(2);expect(E[0]).toBe(C[1]);expect(E[1]).toBe(C[2])})}});describe("toMap",function(){it("should handle just an array",function(){var C=Ext.Array.toMap(["a","b","c"]);expect(C.a).toEqual(1);expect(C.b).toEqual(2);expect(C.c).toEqual(3);delete C.a;delete C.b;delete C.c;expect(Ext.encode(C)).toEqual("{}")});it("should handle just an array and a property name",function(){var C=Ext.Array.toMap([{name:"aaa"},{name:"bbb"},{name:"ccc"}],"name");expect(C.aaa).toEqual(1);expect(C.bbb).toEqual(2);expect(C.ccc).toEqual(3);delete C.aaa;delete C.bbb;delete C.ccc;expect(Ext.encode(C)).toEqual("{}")});it("should handle just an array and a key extractor",function(){var C=Ext.Array.toMap([{name:"aaa"},{name:"bbb"},{name:"ccc"}],function(D){return D.name.toUpperCase()});expect(C.AAA).toEqual(1);expect(C.BBB).toEqual(2);expect(C.CCC).toEqual(3);delete C.AAA;delete C.BBB;delete C.CCC;expect(Ext.encode(C)).toEqual("{}")})});describe("flatten",function(){var C=Ext.Array.flatten;it("should convert a multi-dimensional array into 1-d array",function(){expect(C([1,[2,3],[4,[5,6]]])).toEqual([1,2,3,4,5,6])})});describe("push",function(){var C=Ext.Array.push;it("should create an array",function(){expect(C(undefined,1)).toEqual([1])});it("should convert a non-array to an array",function(){expect(C(1,2)).toEqual([1,2])});it("should push single elements onto end",function(){expect(C([1,2],3,4,5)).toEqual([1,2,3,4,5])});it("should push all items of array arguments onto end",function(){expect(C([1,2],[3,4],[5])).toEqual([1,2,3,4,5])});it("should push arrays and single items into the end",function(){expect(C([1,2],[3,4],5)).toEqual([1,2,3,4,5])})});describe("equals",function(){var C=Ext.Array.equals;it("should match 2 empty arrays",function(){expect(C([],[])).toBe(true)});it("should not match if the arrays are a different size",function(){expect(C([1,2,3,4],[1,2,3])).toBe(false)});it("should use strict equality matching",function(){expect(C([1],["1"])).toBe(false)});it("should have items in the same order",function(){expect(C(["baz","bar","foo"],["foo","bar","baz"])).toBe(false)});it("should match strings",function(){expect(C(["foo","bar","baz"],["foo","bar","baz"])).toBe(true)});it("should match numbers",function(){expect(C([1,2,3,4],[1,2,3,4])).toBe(true)});it("should match booleans",function(){expect(C([false,false,false,true],[false,false,false,true])).toBe(true)});it("should match objects",function(){var D={},E={},F={};expect(C([D,E,F],[D,E,F])).toBe(true)});it("should match the same array",function(){var D=[1,2,3];expect(C(D,D)).toBe(true)})})});