describe("Ext.Date",function(){describe("Elapsed time between dates",function(){var F=0,D=3,E=Date,A=Ext.Date.now,C=function(){return{getTime:function(){},valueOf:function(){return C.now()}}};function B(){Date=C}beforeEach(function(){Ext.Date.now=C.now=function(){F=F+D;return F}});afterEach(function(){Ext.Date.now=A;Date=E;D+=16});it("should get time elapsed in millisecond between date instantiation",function(){B();var G=new C();expect(Ext.Date.getElapsed(G)).toEqual(3)});it("should get time elapsed in millisecond between two dates",function(){B();var G=new C(),H=new C();expect(Ext.Date.getElapsed(G,H)).toEqual(19)})});describe("now",function(){it("should return the current timestamp",function(){var C=+new Date(),A=Ext.Date.now(),B=+new Date();expect(A).not.toBeLessThan(C);expect(A).not.toBeGreaterThan(B)})});describe("getShortMonthName",function(){it("should return 3 letter abbreviation for the corresponding month [0-11]",function(){expect(Ext.Date.getShortMonthName(0)).toBe("Jan");expect(Ext.Date.getShortMonthName(1)).toBe("Feb");expect(Ext.Date.getShortMonthName(2)).toBe("Mar");expect(Ext.Date.getShortMonthName(3)).toBe("Apr");expect(Ext.Date.getShortMonthName(4)).toBe("May");expect(Ext.Date.getShortMonthName(5)).toBe("Jun");expect(Ext.Date.getShortMonthName(6)).toBe("Jul");expect(Ext.Date.getShortMonthName(7)).toBe("Aug");expect(Ext.Date.getShortMonthName(8)).toBe("Sep");expect(Ext.Date.getShortMonthName(9)).toBe("Oct");expect(Ext.Date.getShortMonthName(10)).toBe("Nov");expect(Ext.Date.getShortMonthName(11)).toBe("Dec")})});describe("getShortDayName",function(){it("should return 3 letter abbreviation for the corresponding weekday [0-6]",function(){expect(Ext.Date.getShortDayName(0)).toBe("Sun");expect(Ext.Date.getShortDayName(1)).toBe("Mon");expect(Ext.Date.getShortDayName(2)).toBe("Tue");expect(Ext.Date.getShortDayName(3)).toBe("Wed");expect(Ext.Date.getShortDayName(4)).toBe("Thu");expect(Ext.Date.getShortDayName(5)).toBe("Fri");expect(Ext.Date.getShortDayName(6)).toBe("Sat")})});describe("getMonthNumber",function(){it("should return the month number [0-11] for the corresponding short month name",function(){expect(Ext.Date.getMonthNumber("jan")).toBe(0);expect(Ext.Date.getMonthNumber("feb")).toBe(1);expect(Ext.Date.getMonthNumber("mar")).toBe(2);expect(Ext.Date.getMonthNumber("apr")).toBe(3);expect(Ext.Date.getMonthNumber("MAY")).toBe(4);expect(Ext.Date.getMonthNumber("JUN")).toBe(5);expect(Ext.Date.getMonthNumber("JUL")).toBe(6);expect(Ext.Date.getMonthNumber("AUG")).toBe(7);expect(Ext.Date.getMonthNumber("Sep")).toBe(8);expect(Ext.Date.getMonthNumber("Oct")).toBe(9);expect(Ext.Date.getMonthNumber("Nov")).toBe(10);expect(Ext.Date.getMonthNumber("Dec")).toBe(11)});it("should return the month number [0-11] for the corresponding full month name",function(){expect(Ext.Date.getMonthNumber("january")).toBe(0);expect(Ext.Date.getMonthNumber("february")).toBe(1);expect(Ext.Date.getMonthNumber("march")).toBe(2);expect(Ext.Date.getMonthNumber("april")).toBe(3);expect(Ext.Date.getMonthNumber("MAY")).toBe(4);expect(Ext.Date.getMonthNumber("JUNE")).toBe(5);expect(Ext.Date.getMonthNumber("JULY")).toBe(6);expect(Ext.Date.getMonthNumber("AUGUST")).toBe(7);expect(Ext.Date.getMonthNumber("September")).toBe(8);expect(Ext.Date.getMonthNumber("October")).toBe(9);expect(Ext.Date.getMonthNumber("November")).toBe(10);expect(Ext.Date.getMonthNumber("December")).toBe(11)})});describe("formatContainsHourInfo",function(){it("should return true when format contains hour info",function(){expect(Ext.Date.formatContainsHourInfo("d/m/Y H:i:s")).toBeTruthy()});it("should return false when format doesn't contains hour info",function(){expect(Ext.Date.formatContainsHourInfo("d/m/Y")).toBeFalsy()})});describe("formatContainsDateInfo",function(){it("should return true when format contains date info",function(){expect(Ext.Date.formatContainsDateInfo("d/m/Y H:i:s")).toBeTruthy()});it("should return false when format doesn't contains date info",function(){expect(Ext.Date.formatContainsDateInfo("H:i:s")).toBeFalsy()})});describe("isValid",function(){it("should return true for valid dates",function(){expect(Ext.Date.isValid(1981,10,15,16,30,1,2)).toBeTruthy()});it("should return false for invalid dates",function(){expect(Ext.Date.isValid(999999,10,15,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,13,15,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,32,16,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,25,30,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,60,1,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,30,60,2)).toBeFalsy();expect(Ext.Date.isValid(1981,10,15,16,30,1,100000)).toBeFalsy()})});describe("parse",function(){it("should parse year-only",function(){var B=Ext.Date.parse("2011","Y"),A=new Date();A.setFullYear(2011);A.setHours(0);A.setMinutes(0);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should parse year-month-date",function(){var B=Ext.Date.parse("2011-01-20","Y-m-d"),A=new Date();A.setFullYear(2011);A.setMonth(0);A.setDate(20);A.setHours(0);A.setMinutes(0);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should parse year-month-date hour:minute:second am/pm",function(){var B=Ext.Date.parse("2011-01-20 6:28:33 PM","Y-m-d g:i:s A"),A=new Date();A.setFullYear(2011);A.setMonth(0);A.setDate(20);A.setHours(18);A.setMinutes(28);A.setSeconds(33);A.setMilliseconds(0);expect(B).toEqual(A)});it("should return null when parsing an invalid date like Feb 31st in strict mode",function(){expect(Ext.Date.parse("2011-02-31","Y-m-d",true)).toBeNull()});it("should read am/pm",function(){var B=Ext.Date.parse("2010/01/01 12:45 am","Y/m/d G:i a"),A=new Date();A.setFullYear(2010);A.setMonth(0);A.setDate(1);A.setHours(0);A.setMinutes(45);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should allow am/pm before minutes",function(){var B=Ext.Date.parse("2010/01/01 am 12:45","Y/m/d a G:i"),A=new Date();A.setFullYear(2010);A.setMonth(0);A.setDate(1);A.setHours(0);A.setMinutes(45);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should parse time format",function(){var A=new Date(2010,0,1,13,45,32,4),B=Ext.Date.parse(A.getTime().toString(),"time");expect(B).toEqual(A)});it("should parse timestamp format",function(){var A=new Date(2010,0,1,13,45,32,0),B=Math.floor(A.getTime()/1000),C=Ext.Date.parse(B.toString(),"timestamp");expect(C).toEqual(A)});describe("using separators",function(){it("should work with hyphen separators",function(){var B=Ext.Date.parse("2010-03-04","Y-m-d"),A=new Date();A.setFullYear(2010);A.setMonth(2);A.setDate(4);A.setHours(0);A.setMinutes(0);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should work with slash separators",function(){var B=Ext.Date.parse("2010/03/04","Y/m/d"),A=new Date();A.setFullYear(2010);A.setMonth(2);A.setDate(4);A.setHours(0);A.setMinutes(0);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)});it("should work with space separators",function(){var B=Ext.Date.parse("2010 03 04","Y m d"),A=new Date();A.setFullYear(2010);A.setMonth(2);A.setDate(4);A.setHours(0);A.setMinutes(0);A.setSeconds(0);A.setMilliseconds(0);expect(B).toEqual(A)})});describe("week/year",function(){var A;function B(E,D,C){expect(A.getFullYear()).toBe(E);expect(A.getMonth()).toBe(D);expect(A.getDate()).toBe(C)}describe("first week of year",function(){it("should return the correct date for 2013",function(){A=Ext.Date.parse("01/2013","W/Y");B(2012,11,31)});it("should return the correct date for 2014",function(){A=Ext.Date.parse("01/2014","W/Y");B(2013,11,30)});it("should return the correct date for 2015",function(){A=Ext.Date.parse("01/2015","W/Y");B(2014,11,29)});it("should return the correct date for 2016",function(){A=Ext.Date.parse("01/2016","W/Y");B(2016,0,4)})});it("should always be a Monday",function(){var C,D;for(C=2012;C<=2020;++C){for(D=1;D<53;++D){expect(Ext.Date.parse(C+"-"+Ext.String.leftPad(D,2,"0"),"Y-W").getDay()).toBe(1)}}})})});describe("isEqual",function(){it("should return true if both dates are exactly the same",function(){var B=new Date(2011,0,20,18,37,15,0),A=new Date(2011,0,20,18,37,15,0);expect(Ext.Date.isEqual(B,A)).toBeTruthy()});it("should return true if there is at least 1 millisecond difference between both dates",function(){var B=new Date(2011,0,20,18,37,15,0),A=new Date(2011,0,20,18,37,15,1);expect(Ext.Date.isEqual(B,A)).toBeFalsy()});it("should return false if one one of the dates is null/undefined",function(){expect(Ext.Date.isEqual(new Date(),undefined)).toBeFalsy();expect(Ext.Date.isEqual(new Date(),null)).toBeFalsy();expect(Ext.Date.isEqual(undefined,new Date())).toBeFalsy();expect(Ext.Date.isEqual(null,new Date())).toBeFalsy()});it("should return true if both dates are null/undefined",function(){expect(Ext.Date.isEqual(null,null)).toBeTruthy();expect(Ext.Date.isEqual(null,undefined)).toBeTruthy();expect(Ext.Date.isEqual(undefined,null)).toBeTruthy();expect(Ext.Date.isEqual(undefined,undefined)).toBeTruthy()})});describe("getDayOfYear",function(){it("should return the day of year between 0 and 364 for non-leap years",function(){expect(Ext.Date.getDayOfYear(new Date(2001,0,1))).toBe(0);expect(Ext.Date.getDayOfYear(new Date(2001,11,31))).toBe(364)});it("should return the day of year between 0 and 365 for leap years",function(){expect(Ext.Date.getDayOfYear(new Date(2000,0,1))).toBe(0);expect(Ext.Date.getDayOfYear(new Date(2000,11,31))).toBe(365)})});describe("getFirstDayOfMonth",function(){it("should return the number [0-6] of the first day of month of the given date",function(){expect(Ext.Date.getFirstDayOfMonth(new Date(2007,0,1))).toBe(1);expect(Ext.Date.getFirstDayOfMonth(new Date(2000,0,2))).toBe(6);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,0,3))).toBe(6);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,6,4))).toBe(5);expect(Ext.Date.getFirstDayOfMonth(new Date(2011,11,5))).toBe(4)})});describe("getLastDayOfMonth",function(){it("should return the number [0-6] of the last day of month of the given date",function(){expect(Ext.Date.getLastDayOfMonth(new Date(2007,0,1))).toBe(3);expect(Ext.Date.getLastDayOfMonth(new Date(2000,0,2))).toBe(1);expect(Ext.Date.getLastDayOfMonth(new Date(2011,0,3))).toBe(1);expect(Ext.Date.getLastDayOfMonth(new Date(2011,6,4))).toBe(0);expect(Ext.Date.getLastDayOfMonth(new Date(2011,11,5))).toBe(6)})});describe("getFirstDateOfMonth",function(){it("should return the date corresponding to the first day of month of the given date",function(){expect(Ext.Date.getFirstDateOfMonth(new Date(2007,0,1))).toEqual(new Date(2007,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2000,0,2))).toEqual(new Date(2000,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,0,3))).toEqual(new Date(2011,0,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,6,4))).toEqual(new Date(2011,6,1));expect(Ext.Date.getFirstDateOfMonth(new Date(2011,11,5))).toEqual(new Date(2011,11,1))})});describe("getLastDateOfMonth",function(){it("should return the date corresponding to the last day of month of the given date",function(){expect(Ext.Date.getLastDateOfMonth(new Date(2007,1,1))).toEqual(new Date(2007,1,28));expect(Ext.Date.getLastDateOfMonth(new Date(2000,1,2))).toEqual(new Date(2000,1,29));expect(Ext.Date.getLastDateOfMonth(new Date(2011,0,3))).toEqual(new Date(2011,0,31));expect(Ext.Date.getLastDateOfMonth(new Date(2011,5,4))).toEqual(new Date(2011,5,30));expect(Ext.Date.getLastDateOfMonth(new Date(2011,11,5))).toEqual(new Date(2011,11,31))})});describe("getSuffix",function(){it("should return st for 1, 21 and 31",function(){expect(Ext.Date.getSuffix(new Date(2011,0,1))).toBe("st");expect(Ext.Date.getSuffix(new Date(2011,0,21))).toBe("st");expect(Ext.Date.getSuffix(new Date(2011,0,31))).toBe("st")});it("should return nd for 2 and, 22",function(){expect(Ext.Date.getSuffix(new Date(2011,0,2))).toBe("nd");expect(Ext.Date.getSuffix(new Date(2011,0,22))).toBe("nd")});it("should return rd for 3 and, 23",function(){expect(Ext.Date.getSuffix(new Date(2011,0,3))).toBe("rd");expect(Ext.Date.getSuffix(new Date(2011,0,23))).toBe("rd")});it("should return th for days [11-13] and days ending in [4-0]",function(){expect(Ext.Date.getSuffix(new Date(2011,0,4))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,5))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,6))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,7))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,8))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,9))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,10))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,11))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,12))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,13))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,14))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,15))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,16))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,17))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,18))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,19))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,20))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,24))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,25))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,26))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,27))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,28))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,29))).toBe("th");expect(Ext.Date.getSuffix(new Date(2011,0,30))).toBe("th")})});describe("clone",function(){it("should return a copy of the given date",function(){var B=new Date(),A;A=Ext.Date.clone(B);expect(A).not.toBe(B);expect(A).toEqual(B)})});describe("isDST",function(){xit("should return true from the end of March till the middle of October",function(){expect(Ext.Date.isDST(new Date(2010,2,31))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,3,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,4,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,5,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,6,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,7,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,8,15))).toBeTruthy();expect(Ext.Date.isDST(new Date(2010,9,15))).toBeTruthy()});it("should return false from the middle of November till the start of March",function(){expect(Ext.Date.isDST(new Date(2010,10,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,11,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,0,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,1,15))).toBeFalsy();expect(Ext.Date.isDST(new Date(2010,2,1))).toBeFalsy()})});describe("clearTime",function(){it("should reset hrs/mins/secs/millis to 0",function(){var A=new Date(2012,11,21,21,21,21,21);Ext.Date.clearTime(A);expect(A.getHours()).toBe(0);expect(A.getMinutes()).toBe(0);expect(A.getSeconds()).toBe(0);expect(A.getMilliseconds()).toBe(0)});it("should return a clone with hrs/mins/secs/millis reseted to 0 when clone option is selected",function(){var B=new Date(2012,11,21,21,21,21,21),A;A=Ext.Date.clearTime(B,true);expect(B.getHours()).toBe(21);expect(B.getMinutes()).toBe(21);expect(B.getSeconds()).toBe(21);expect(B.getMilliseconds()).toBe(21);expect(A.getHours()).toBe(0);expect(A.getMinutes()).toBe(0);expect(A.getSeconds()).toBe(0);expect(A.getMilliseconds()).toBe(0)})});describe("add",function(){var A=new Date(2000,0,1,0,0,0,0);it("should add milliseconds",function(){expect(Ext.Date.add(A,Ext.Date.MILLI,1)).toEqual(new Date(2000,0,1,0,0,0,1))});it("should add seconds",function(){expect(Ext.Date.add(A,Ext.Date.SECOND,1)).toEqual(new Date(2000,0,1,0,0,1,0))});it("should add minutes",function(){expect(Ext.Date.add(A,Ext.Date.MINUTE,1)).toEqual(new Date(2000,0,1,0,1,0,0))});it("should add hours",function(){expect(Ext.Date.add(A,Ext.Date.HOUR,1)).toEqual(new Date(2000,0,1,1,0,0,0))});it("should add days",function(){expect(Ext.Date.add(A,Ext.Date.DAY,1)).toEqual(new Date(2000,0,2,0,0,0,0))});it("should add months",function(){expect(Ext.Date.add(A,Ext.Date.MONTH,1)).toEqual(new Date(2000,1,1,0,0,0,0))});it("should add years",function(){expect(Ext.Date.add(A,Ext.Date.YEAR,1)).toEqual(new Date(2001,0,1,0,0,0,0))});it("should consider last day of month when adding months",function(){expect(Ext.Date.add(new Date(2001,0,29),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2001,0,30),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2001,0,31),Ext.Date.MONTH,1)).toEqual(new Date(2001,1,28));expect(Ext.Date.add(new Date(2000,0,29),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29));expect(Ext.Date.add(new Date(2000,0,30),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29));expect(Ext.Date.add(new Date(2000,0,31),Ext.Date.MONTH,1)).toEqual(new Date(2000,1,29))});it("should consider last day of month when adding years",function(){expect(Ext.Date.add(new Date(2000,1,29),Ext.Date.YEAR,1)).toEqual(new Date(2001,1,28))})});describe("between",function(){var B=new Date(2000,0,1),A=new Date(2000,0,31);it("should return true if the date is equal to the start date",function(){expect(Ext.Date.between(new Date(2000,0,1),B,A)).toBeTruthy()});it("should return true if the date is equal to the end date",function(){expect(Ext.Date.between(new Date(2000,0,31),B,A)).toBeTruthy()});it("should return true if date is between start and end dates",function(){expect(Ext.Date.between(new Date(2000,0,15),B,A)).toBeTruthy()});it("should return false if date is before start date",function(){expect(Ext.Date.between(new Date(1999,11,31,23,59,59),B,A)).toBeFalsy()});it("should return false if date is after end date",function(){expect(Ext.Date.between(new Date(2000,0,31,0,0,1),B,A)).toBeFalsy()})});describe("formatting",function(){var B=new Date(2010,0,1,13,45,32,4),A=Ext.Date.format;it("should format with the d option",function(){expect(A(B,"d")).toBe("01")});it("should format with the D option",function(){expect(A(B,"D")).toBe("Fri")});it("should format with the j option",function(){expect(A(B,"j")).toBe("1")});it("should format with the l option",function(){expect(A(B,"l")).toBe("Friday")});it("should format with the N option",function(){expect(A(B,"N")).toBe("5")});it("should format with the S option",function(){expect(A(B,"S")).toBe("st")});it("should format with the w option",function(){expect(A(B,"w")).toBe("5")});it("should format with the z option",function(){expect(A(B,"z")).toBe("0")});it("should format with the W option",function(){expect(A(B,"W")).toBe("53")});it("should format with the F option",function(){expect(A(B,"F")).toBe("January")});it("should format with the m option",function(){expect(A(B,"m")).toBe("01")});it("should format with the M option",function(){expect(A(B,"M")).toBe("Jan")});it("should format with the n option",function(){expect(A(B,"n")).toBe("1")});it("should format with the t option",function(){expect(A(B,"t")).toBe("31")});it("should format with the L option",function(){expect(A(B,"L")).toBe("0")});it("should format with the o option",function(){expect(A(B,"o")).toBe("2009")});it("should format with the Y option",function(){expect(A(B,"Y")).toBe("2010")});it("should format with the y option",function(){expect(A(B,"y")).toBe("10")});it("should format with the a option",function(){expect(A(B,"a")).toBe("pm")});it("should format with the A option",function(){expect(A(B,"A")).toBe("PM")});it("should format with the g option",function(){expect(A(B,"g")).toBe("1")});it("should format with the G option",function(){expect(A(B,"G")).toBe("13")});it("should format with the h option",function(){expect(A(B,"h")).toBe("01")});it("should format with the H option",function(){expect(A(B,"H")).toBe("13")});it("should format with the i option",function(){expect(A(B,"i")).toBe("45")});it("should format with the s option",function(){expect(A(B,"s")).toBe("32")});it("should format with the u option",function(){expect(A(B,"u")).toBe("004")});it("should format with the O option",function(){var C=Ext.Date.getGMTOffset(B,false);expect(A(B,"O")).toBe(C)});it("should format with the P option",function(){var C=Ext.Date.getGMTOffset(B,true);expect(A(B,"P")).toBe(C)});it("should format with the T option",function(){var C=Ext.Date.getTimezone(B);expect(A(B,"T")).toBe(C)});it("should format with the Z option",function(){var C=(B.getTimezoneOffset()*-60)+"";expect(A(B,"Z")).toBe(C)});it("should format with the c option",function(){var C="2010-01-01T13:45:32"+Ext.Date.getGMTOffset(B,true);expect(A(B,"c")).toBe(C)});it("should format with the U option",function(){var C=Math.round((B.getTime()/1000))+"";expect(A(B,"U")).toBe(C)});it("should format with the MS option",function(){var C="\\/Date("+B.getTime()+")\\/";expect(A(B,"MS")).toBe(C)});it("should format the time option",function(){var C=B.getTime().toString();expect(A(B,"time")).toBe(C)});it("should format the timestamp option",function(){var D=Math.floor(B.getTime()/1000),C=D.toString();expect(A(B,"timestamp")).toBe(C)});it("should return an empty string",function(){expect(A(undefined,"d")).toBe("");expect(A(null,"d")).toBe("");expect(A({},"d")).toBe("");expect(A([],"d")).toBe("");expect(A("","d")).toBe("");expect(A(true,"d")).toBe("");expect(A(1992,"d")).toBe("")});it("should not return an empty string",function(){expect(A(new Date(),"d")).not.toBe("")})});describe("ISO-8601",function(){var A=Ext.Date;describe("dates",function(){describe("W - week",function(){it("should parse with the W option",function(){expect(A.parse("40","W")).not.toBe(undefined)});it("should only parse weeks 1 - 9 when prefixed by a zero (0)",function(){expect(A.parse("01","W")).not.toBe(undefined)});it("should not parse weeks 1 - 9 when not prefixed by a zero (0)",function(){expect(A.parse("1","W")).toBe(undefined)});it("should start with Monday",function(){expect(A.parse("01","W").getDay()).toBe(1)})});describe("o - year",function(){it("should parse with the o option",function(){expect(A.parse("2012","o")).not.toBe(undefined)});it("should behave the same as Y when not parsed with another option",function(){expect(A.parse("2012","o").getTime()).toBe(A.parse("2012","Y").getTime())})});describe("can be part of year not same as the 'o' parse code",function(){it("should be the previous year than 'o' parse code",function(){expect(A.parse("2008-01","o-W").getFullYear()).toBe(2007)});it("should set the same year if required",function(){expect(A.parse("2009-53","o-W").getFullYear()).toBe(2009)})})});describe("times",function(){it("should correctly parse ISO format",function(){var C=Ext.Date.parse("2012-01-13T01:00:00","c"),B=new Date();B.setFullYear(2012);B.setMonth(0);B.setDate(13);B.setHours(1);B.setMinutes(0);B.setSeconds(0);B.setMilliseconds(0);expect(C).toEqual(B);C=Ext.Date.parse("2012-01-13T13:00:00","c");B.setFullYear(2012);B.setMonth(0);B.setDate(13);B.setHours(13);B.setMinutes(0);B.setSeconds(0);B.setMilliseconds(0);expect(C).toEqual(B)});describe("time zones",function(){it("should evaluate as equal dates with the same time zone",function(){var C,B;C=Ext.Date.parse("2012-10-03T20:29:24+12:00","c");if(Ext.isIE8){B=new Date(0);B.setUTCFullYear(2012);B.setUTCMonth(9);B.setUTCDate(3);B.setUTCHours(20);B.setUTCMinutes(29);B.setUTCSeconds(24);B=new Date(B.valueOf()-12*3600*1000)}else{B=new Date("2012-10-03T20:29:24+12:00")}expect(B.getTime()).toEqual(C.getTime())});it("should evaluate as equal dates with different time zones",function(){var D,B,C=1000*60*60;D=Ext.Date.parse("2012-10-03T20:29:24+12:00","c");if(Ext.isIE8){B=new Date(0);B.setUTCFullYear(2012);B.setUTCMonth(9);B.setUTCDate(3);B.setUTCHours(20);B.setUTCMinutes(29);B.setUTCSeconds(24);B=new Date(B.valueOf()-13*3600*1000)}else{B=new Date("2012-10-03T20:29:24+13:00")}expect(B.getTime()+C).toEqual(D.getTime())});it("should evaluate as not equal dates with different time zones",function(){var C=Ext.Date.parse("2012-10-03T20:29:24+12:00","c"),B=new Date("2012-10-03T20:29:24+13:00");expect(B.getTime()).not.toEqual(C.getTime())})})})})});