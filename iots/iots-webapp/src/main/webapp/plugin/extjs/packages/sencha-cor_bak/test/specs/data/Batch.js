describe("Ext.data.Batch",function(){var G,B,D,C,E;function A(H,J){H=Ext.String.capitalize(H||"create");var I=new Ext.data.operation[H](J);I.doExecute=function(){return new Ext.data.Request()};return I}function F(H){G=new Ext.data.Batch(H)}afterEach(function(){G=B=D=C=E=null});describe("instantiation",function(){beforeEach(function(){F()});it("should have current equal to null",function(){expect(G.getCurrent()).toBeNull()});it("should have total equal to 0",function(){expect(G.getTotal()).toBe(0)});it("should have isRunning equal to false",function(){expect(G.isRunning()).toBe(false)});it("should have isComplete equal to false",function(){expect(G.isComplete()).toBe(false)});it("should have hasException equal to false",function(){expect(G.hasException()).toBe(false)});it("should have pauseOnException equal to false",function(){expect(G.getPauseOnException()).toBe(false)});it("should have no operations",function(){expect(G.getOperations()).toEqual([])});it("should have no exceptions",function(){expect(G.getExceptions()).toEqual([])})});describe("add",function(){describe("single",function(){beforeEach(function(){B=A();F();G.add(B)});it("should increment total property",function(){expect(G.getTotal()).toBe(1)});it("should set operation batch",function(){expect(B.getBatch()).toBe(G)});it("should add operation to operations array",function(){expect(G.getOperations()[0]).toBe(B)})});describe("arrays",function(){beforeEach(function(){B=A();D=A();C=A();E=[B,D,C];F();G.add(E)});it("should set the total",function(){expect(G.getTotal()).toBe(3)});it("should set the batch on each operation",function(){expect(B.getBatch()).toBe(G);expect(D.getBatch()).toBe(G);expect(C.getBatch()).toBe(G)});it("should add them in order",function(){var H=G.getOperations();expect(H[0]).toBe(B);expect(H[1]).toBe(D);expect(H[2]).toBe(C)})})});describe("start",function(){beforeEach(function(){F()});it("should not run if there are no operations",function(){G.start();expect(G.isRunning()).toBe(false)});it("should set isRunning to true",function(){G.add(A());G.start();expect(G.isRunning()).toBe(true)});it("should execute the operation",function(){B=A();G.add(B);spyOn(B,"execute");G.start();expect(B.execute).toHaveBeenCalled()})});describe("running multiple operations",function(){beforeEach(function(){E=[];for(var H=1;H<=4;++H){E.push(A("destroy",{id:H}))}F();G.add(E)});describe("basic processing",function(){it("should execute in order",function(){var H=[];Ext.Array.forEach(E,function(I){spyOn(I,"execute").andCallFake(function(){H.push(this.getId());this.execute.originalValue.apply(this,arguments);this.setSuccessful(true)})});G.start();expect(H).toEqual([1,2,3,4])});it("should wait until the previous operation completes before continuing",function(){var H=[];Ext.Array.forEach(E,function(I){spyOn(I,"execute").andCallFake(function(){H.push(this.getId());this.execute.originalValue.apply(this,arguments)})});G.start();expect(H).toEqual([1]);E[0].setSuccessful(true);expect(H).toEqual([1,2]);E[1].setSuccessful(true);expect(H).toEqual([1,2,3]);E[2].setSuccessful(true);expect(H).toEqual([1,2,3,4])});it("should be able to run an operation added during the batch start",function(){var H=A();spyOn(H,"execute");G.start();E[0].setSuccessful(true);E[1].setSuccessful(true);G.add(H);E[2].setSuccessful(true);E[3].setSuccessful(true);expect(H.execute).toHaveBeenCalled()});it("should keep track of exceptions and continue on",function(){G.start();E[0].setException("Failed1");E[1].setSuccessful(true);E[2].setSuccessful(true);E[3].setException("Failed2");expect(G.isComplete()).toBe(true);expect(G.getExceptions()).toEqual([E[0],E[3]])})});describe("events",function(){it("should fire the operationcomplete event when an operation completes",function(){var H=jasmine.createSpy();G.on("operationcomplete",H);G.start();E[0].setSuccessful(true);expect(H.mostRecentCall.args[0]).toBe(G);expect(H.mostRecentCall.args[1]).toBe(E[0]);E[1].setSuccessful(true);expect(H.mostRecentCall.args[0]).toBe(G);expect(H.mostRecentCall.args[1]).toBe(E[1])});it("should fire the complete event when we have completed",function(){var H=jasmine.createSpy();G.on("complete",H);G.start();Ext.Array.forEach(E,function(I){I.setSuccessful(true)});expect(H.mostRecentCall.args[0]).toBe(G);expect(H.mostRecentCall.args[1]).toBe(E[3])});it("should fire the exception event when an operation fails",function(){var H=jasmine.createSpy();G.on("exception",H);G.start();E[0].setSuccessful(true);E[1].setException("Failed1");expect(H.mostRecentCall.args[0]).toBe(G);expect(H.mostRecentCall.args[1]).toBe(E[1]);E[2].setSuccessful(true);E[3].setException("Failed2");expect(H.mostRecentCall.args[0]).toBe(G);expect(H.mostRecentCall.args[1]).toBe(E[3])})})});describe("getCurrent",function(){beforeEach(function(){F()});it("should return null if the batch has not started",function(){expect(G.getCurrent()).toBeNull()});it("should return null if the batch is complete",function(){B=A();D=A();G.add([B,D]);G.start();B.setSuccessful(true);D.setSuccessful(true);expect(G.getCurrent()).toBeNull()});it("should return the active operation",function(){B=A();D=A();G.add([B,D]);G.start();expect(G.getCurrent()).toBe(B);B.setSuccessful(true);expect(G.getCurrent()).toBe(D);D.setSuccessful(true)});it("should return the operation even if paused",function(){B=A();D=A();G.add([B,D,A()]);G.start();B.setSuccessful(true);G.pause();expect(G.getCurrent()).toBe(D)})});describe("pause",function(){it("should set isRunning to false",function(){F();G.add(A());G.start();G.pause();expect(G.isRunning()).toBe(false)});it("should not continue running if paused",function(){B=A();D=A();spyOn(D,"execute");F();G.add(B);G.add(D);G.start();G.pause();B.setSuccessful(true);expect(D.execute).not.toHaveBeenCalled()});it("should continue on after we start after pausing",function(){B=A();D=A();spyOn(D,"execute");F();G.add(B);G.add(D);G.start();G.pause();B.setSuccessful(true);G.start();expect(D.execute).toHaveBeenCalled()})});describe("pauseOnException/retry",function(){beforeEach(function(){F({pauseOnException:true})});it("should pause if an operation has an exception",function(){B=A();G.start();B.setException("Failed");expect(G.isRunning()).toBe(false)});it("should have the current item as the failed operation",function(){B=A();G.add(B);G.start();B.setException("Failed");expect(G.getCurrent()).toBe(B)});it("should be able to retry on exception",function(){B=A();G.add(B);G.start();B.setException("Failed");spyOn(B,"execute");G.retry();expect(B.execute).toHaveBeenCalled()})})});