describe("Ext.mixin.Observable",function(){describe("unit tests",function(){var G,M,J,E,L,C,I,D,F,K;var H=Ext.define(null,{extend:"Ext.mixin.Observable",observableType:"foo",getEventDispatcher:function(){return G}});var A=Ext.define(null,{extend:"Ext.mixin.Observable",observableType:"bar",getEventDispatcher:function(){return G}});var B=Ext.define(null,{extend:"Ext.mixin.Observable",observableType:"bar",getEventDispatcher:function(){return G}});beforeEach(function(){G=new Ext.event.Dispatcher();M=new H();J=new A();E=new B();L=M.getObservableId();C=J.getObservableId();I=function(){};D={};F={};K=undefined});afterEach(function(){M.destroy();J.destroy();E.destroy()});describe("getObservableId()",function(){it("should return the correct value",function(){expect(M.getObservableId()).toEqual("#"+M.getId())})});describe("doAddListener()",function(){it("should invoke dispatcher's addListener",function(){spyOn(G,"addListener");M.doAddListener("bar",I,D,F,K);expect(G.addListener).toHaveBeenCalledWith("foo",L,"bar",I,D,F,K,M)});it("should invoke dispatcher's addListener with scope 'this' if not given",function(){spyOn(G,"addListener");M.doAddListener("bar",I,null,F,K);expect(G.addListener).toHaveBeenCalledWith("foo",L,"bar",I,M,F,K,M)})});describe("doRemoveListener()",function(){it("should invoke dispatcher's removeListener",function(){spyOn(G,"removeListener");M.doRemoveListener("bar",I,D,F,K);expect(G.removeListener).toHaveBeenCalledWith("foo",L,"bar",I,D,F,K,M)});it("should invoke dispatcher's removeListener with scope 'this' if not specified",function(){spyOn(G,"removeListener");M.doRemoveListener("bar",I,null,F,K);expect(G.removeListener).toHaveBeenCalledWith("foo",L,"bar",I,M,F,K,M)})});describe("addListener()",function(){it("should invoke doAddListener",function(){spyOn(M,"doAddListener");M.addListener("bar",I,D,F,K);expect(M.doAddListener).toHaveBeenCalledWith("bar",I,D,F,K)});it("should invoke doAddListener() multiple times for multiple listeners",function(){var Q=jasmine.createSpy(),N=jasmine.createSpy(),P={};spyOn(M,"doAddListener");M.addListener({one:Q,two:N,scope:P,single:true});var O={single:true};expect(M.doAddListener.callCount).toBe(2);expect(M.doAddListener.argsForCall[0]).toEqual(["one",Q,P,O,K]);expect(M.doAddListener.argsForCall[1]).toEqual(["two",N,P,O,K])});it("should allow different scopes for different listeners",function(){var S=jasmine.createSpy(),N=jasmine.createSpy(),O={},Q={},P={fn:S,scope:O,single:true},R={fn:N,scope:Q,delay:100};spyOn(M,"doAddListener");M.addListener({one:P,two:R});expect(M.doAddListener.callCount).toBe(2);expect(M.doAddListener.argsForCall[0]).toEqual(["one",S,O,P,K]);expect(M.doAddListener.argsForCall[1]).toEqual(["two",N,Q,R,K])})});describe("removeListener()",function(){it("should invoke doRemoveListener",function(){spyOn(M,"doRemoveListener");M.removeListener("bar",I,D,F,K);expect(M.doRemoveListener).toHaveBeenCalledWith("bar",I,D,F,K)});it("should invoke doRemoveListener() multiple times for multiple listeners",function(){var P=jasmine.createSpy(),N=jasmine.createSpy(),O={};spyOn(M,"doRemoveListener");M.removeListener({one:P,two:N,scope:O});expect(M.doRemoveListener.callCount).toBe(2);expect(M.doRemoveListener.argsForCall[0]).toEqual(["one",P,O,F,K]);expect(M.doRemoveListener.argsForCall[1]).toEqual(["two",N,O,F,K])})});describe("fireEvent()",function(){it("should invoke dispatcher's dispatchEvent",function(){var N=["testeventname","foo","bar"];spyOn(G,"dispatchEvent");M.fireEvent.apply(M,N);expect(G.dispatchEvent).toHaveBeenCalledWith("foo",L,"testeventname",["foo","bar"],undefined,undefined)})});describe("clearListeners()",function(){it("should invoke dispatcher's clearListeners()",function(){spyOn(G,"clearListeners");M.on("foo",I);M.clearListeners();expect(G.clearListeners).toHaveBeenCalledWith("foo",L,M)})});describe("relayEvents",function(){it("should support string format",function(){var N=spyOn(M,"doFireEvent");M.relayEvents(J,"bar","foo");J.fireEvent("bar");expect(N).toHaveBeenCalled();expect(N.callCount).toBe(1);expect(N.calls[0].args[0]).toEqual("foobar");expect(N.calls[0].object).toBe(M)});it("should support array format",function(){var N=spyOn(M,"doFireEvent");M.relayEvents(J,["bar","baz"],"foo");J.fireEvent("bar");J.fireEvent("baz");expect(N).toHaveBeenCalled();expect(N.callCount).toBe(2);expect(N.calls[0].args[0]).toEqual("foobar");expect(N.calls[0].object).toBe(M);expect(N.calls[1].args[0]).toEqual("foobaz");expect(N.calls[1].object).toBe(M)});it("should support object format",function(){var N=spyOn(M,"doFireEvent");M.relayEvents(J,{bar:"newbar",baz:"newbaz"},"foo");J.fireEvent("bar");J.fireEvent("baz");expect(N).toHaveBeenCalled();expect(N.callCount).toBe(2);expect(N.calls[0].args[0]).toEqual("foonewbar");expect(N.calls[0].object).toBe(M);expect(N.calls[1].args[0]).toEqual("foonewbaz");expect(N.calls[1].object).toBe(M)})});describe("suspend/resume events",function(){var P,R,O,U,Q,T,V,S;function N(){P.fireEvent("fired","I'm fired :s (1)");P.fireEvent("fired","I'm fired :s (2)");P.fireEvent("quit","I'm quitting my job :) (1)");P.fireEvent("quit","I'm quitting my job :) (2)")}beforeEach(function(){R=jasmine.createSpy("employeeFiredFn");O=jasmine.createSpy("employeeQuitFn");U=jasmine.createSpy("employeeAskFn");Q={fn:R,scope:fakeScope};T={fn:O,scope:fakeScope};V={fn:U,scope:fakeScope};S={ask_salary_augmentation:V,fired:Q,quit:T};P=new Ext.mixin.Observable({listeners:S})});afterEach(function(){P.destroy();P=null});describe("suspended events to be fired after resumeEvents",function(){beforeEach(function(){P.suspendEvents(true);N()});describe("when suspended",function(){it("should not call fired event handler",function(){expect(R).not.toHaveBeenCalled()});it("should not call quit event handler",function(){expect(O).not.toHaveBeenCalled()})});describe("on resume",function(){describe("without discarding",function(){beforeEach(function(){P.resumeEvents()});it("should call fired event handler two times",function(){expect(R.callCount).toEqual(2)});it("should call quit event handler two times",function(){expect(O.callCount).toEqual(2)})});describe("with discarding",function(){beforeEach(function(){P.resumeEvents(true)});it("should not call fired event handler",function(){expect(R).not.toHaveBeenCalled()});it("should call quit event handler two times",function(){expect(O).not.toHaveBeenCalled()})})})});describe("discard suspended events",function(){beforeEach(function(){P.suspendEvents();N()});describe("when suspended",function(){it("should not call fired event handler",function(){expect(R).not.toHaveBeenCalled()});it("should not call quit event handler",function(){expect(O).not.toHaveBeenCalled()})});describe("on resume",function(){beforeEach(function(){P.resumeEvents(true)});it("should not call fired event handler",function(){expect(R).not.toHaveBeenCalled()});it("should not call quit event handler",function(){expect(O).not.toHaveBeenCalled()})})});describe("multiple suspend/resume",function(){it("should not fire events if there are more suspend than resume calls",function(){P.suspendEvents();P.suspendEvents();P.resumeEvents();N();expect(R).not.toHaveBeenCalled();expect(O).not.toHaveBeenCalled()});it("should fire events if the suspend/resume calls match",function(){P.suspendEvents();P.suspendEvents();P.suspendEvents();P.resumeEvents();P.resumeEvents();P.resumeEvents();N();expect(R).toHaveBeenCalled();expect(O).toHaveBeenCalled()});it("should ignore extra resumeEvents calls",function(){P.suspendEvents();P.resumeEvents();P.resumeEvents();P.resumeEvents();N();expect(R).toHaveBeenCalled();expect(O).toHaveBeenCalled()})});describe("specific events",function(){it("should be able to suspend a specific event",function(){P.suspendEvent("fired");N();expect(R).not.toHaveBeenCalled()});it("should be able to suspend a specific event before anything is bound",function(){var W=new Ext.util.Observable(),X=false;W.suspendEvent("foo");W.on("foo",function(){X=true});W.fireEvent("foo",W);expect(X).toBe(false)});it("should begin firing events after resuming a specific event",function(){P.suspendEvent("fired");N();P.resumeEvent("fired");N();expect(R.callCount).toBe(2)});it("should not resume firing if suspend is called more than resume",function(){P.suspendEvent("fired");P.suspendEvent("fired");P.resumeEvent("fired");N();expect(R).not.toHaveBeenCalled()})});describe("isSuspended",function(){describe("all events",function(){it("should return false if all events aren't suspended",function(){expect(P.isSuspended()).toBe(false)});it("should return false after suspending and then resuming all events",function(){P.suspendEvents();P.resumeEvents();expect(P.isSuspended()).toBe(false)});it("should return true when events are globally suspended",function(){P.suspendEvents();expect(P.isSuspended()).toBe(true)})});describe("specific event",function(){it("should return false if the specific event is not suspended",function(){expect(P.isSuspended("fired")).toBe(false)});it("should return false if the specific event is suspended then resumed",function(){P.suspendEvent("fired");P.resumeEvent("fired");expect(P.isSuspended("fired")).toBe(false)});it("should return true if a specific event is suspended",function(){P.suspendEvent("fired");expect(P.isSuspended("fired")).toBe(true)});it("should return true if all events are suspended and the specific event is not",function(){P.suspendEvents();expect(P.isSuspended("fired")).toBe(true)})})})});describe("enableBubble()",function(){it("should bubble the event from foo -> bar -> baz",function(){var N=jasmine.createSpy(),O=jasmine.createSpy();spyOn(M,"getBubbleTarget").andReturn(J);spyOn(J,"getBubbleTarget").andReturn(E);M.enableBubble("foo");J.addListener("foo",N);E.addListener("foo",O);M.fireEvent("foo","test");expect(N).toHaveBeenCalled();expect(N.callCount).toBe(1);expect(N.mostRecentCall.args[0]).toBe("test");expect(O).toHaveBeenCalled();expect(O.callCount).toBe(1);expect(O.mostRecentCall.args[0]).toBe("test")});it("should make it possible to pause / resume / stop event bubbling",function(){runs(function(){var N=this;this.one=jasmine.createSpy().andCallFake(function(){var O=arguments[arguments.length-1];O.pause();setTimeout(function(){O.resume()},50)});this.resumed=false;this.two=jasmine.createSpy().andCallFake(function(){N.resumed=true;var O=arguments[arguments.length-1];O.stop()});this.three=jasmine.createSpy();spyOn(M,"getBubbleTarget").andReturn(J);spyOn(J,"getBubbleTarget").andReturn(E);M.enableBubble("foo");J.addListener("foo",this.one);J.addListener("foo",this.two);E.addListener("foo",this.three);M.fireEvent("foo","test");expect(this.one).toHaveBeenCalled();expect(this.two).not.toHaveBeenCalled();expect(this.three).not.toHaveBeenCalled()});runs(function(){var N=this;waitsFor(function(){return N.resumed},"resume bubbling events",100)});runs(function(){expect(this.two).toHaveBeenCalled();expect(this.three).not.toHaveBeenCalled()})})});describe("listeners config",function(){it("should be initialized before any fireEvent()",function(){var N=jasmine.createSpy();var O=Ext.define(null,{mixins:[Ext.mixin.Observable],observableType:"boo",config:{test:true,listeners:{boo:N}},constructor:function(Q){this.mixins.observable.constructor.call(this,Q)},getEventDispatcher:function(){this.getListeners();return G},updateTest:function(){this.fireEvent("boo")}});var P=new O;expect(N).toHaveBeenCalled()})});describe("destroy()",function(){it("should fire a 'destroy' event",function(){spyOn(M,"fireEvent");M.destroy();expect(M.fireEvent).toHaveBeenCalledWith("destroy",M)});it("should invoke both clearListeners() and clearManagedListeners()",function(){spyOn(M,"clearListeners");spyOn(M,"clearManagedListeners");M.destroy();expect(M.clearListeners).toHaveBeenCalled();expect(M.clearManagedListeners).toHaveBeenCalled()});it("should remove all managed listeners from the other object",function(){var N=function(){};spyOn(M,"doRemoveListener");M.on("foo",I,J,F,K);M.on("bar",N,J,F,K);J.destroy();expect(M.doRemoveListener).toHaveBeenCalled();expect(M.doRemoveListener.callCount).toBe(3);expect(M.doRemoveListener.calls[0].args[0]).toEqual("destroy");expect(M.doRemoveListener.calls[1].args).toEqual(["foo",I,J,F,K]);expect(M.doRemoveListener.calls[2].args).toEqual(["bar",N,J,F,K])})})});describe("add/remove listener functional specs",function(){function A(B){describe("element "+(B?"(with delegated listeners)":"(with direct listeners)"),function(){var H,K,J,F,D,L,I;function M(N){return Ext.apply({click:K,delegated:B},N)}function C(N){H.addListener(M(N))}function G(N){var N=M(N);H.removeListener(N)}function E(N,O){jasmine.fireMouseEvent(N||H,O||"click")}beforeEach(function(){K=jasmine.createSpy();K.andCallFake(function(){F=this;D=arguments});J=jasmine.createSpy();H=Ext.getBody().createChild({id:"parent",cn:[{id:"child",cls:"child",cn:{id:"grandchild",cls:"grandchild"}}]});L=document.getElementById("child");I=document.getElementById("grandchild")});afterEach(function(){H.destroy()});describe("addListener",function(){it("should handle an event",function(){C();E();expect(K.callCount).toBe(1);expect(D[0] instanceof Ext.event.Event).toBe(true);expect(D[1]).toBe(H.dom);expect(D[2]).toEqual({delegated:B});expect(F).toBe(H)});it("should handle an event that bubbled from a descendant element",function(){C();E(I);expect(K.callCount).toBe(1);expect(D[0] instanceof Ext.event.Event).toBe(true);expect(D[1]).toBe(I);expect(D[2]).toEqual({delegated:B});expect(F).toBe(H)});it("should attach multiple handlers to the same event",function(){C();C({click:J});E();expect(K.callCount).toBe(1);expect(J.callCount).toBe(1)});it("should call the event handler with the correct scope when the scope option is used",function(){var N={};C({scope:N});E();expect(F).toBe(N)});it("should call the handler multiple times if the event fires more than once",function(){C();E();E();E();expect(K.callCount).toBe(3)});it("should remove a single listener after the first fire",function(){C({single:true});E();expect(K.callCount).toBe(1);E();expect(K.callCount).toBe(1)});it("should delay the listener",function(){C({delay:150});E();waits(100);runs(function(){expect(K).not.toHaveBeenCalled()});waits(100);runs(function(){expect(K).toHaveBeenCalled()})});it("should buffer the listener",function(){C({buffer:150});E();waits(100);runs(function(){expect(K).not.toHaveBeenCalled();E()});waits(100);runs(function(){expect(K).not.toHaveBeenCalled()});waits(100);runs(function(){expect(K).toHaveBeenCalled()})});it("should attach listeners with a delegate selector",function(){C({delegate:".grandchild"});E(L);expect(K).not.toHaveBeenCalled();E(I);expect(K).toHaveBeenCalled()});describe("propagation",function(){var N;beforeEach(function(){N=[];I=Ext.get("grandchild");L=Ext.get("child")});afterEach(function(){I.destroy();L.destroy()});it("should fire bubble listeners in bottom-up order",function(){H.on({click:function(){N.push(1)}});L.on({click:function(){N.push(2)}});I.on({click:function(){N.push(3)}});E(I);expect(N).toEqual([3,2,1])});it("should fire capture listeners in top-down order",function(){H.on({click:function(){N.push(1)},capture:true});L.on({click:function(){N.push(2)},capture:true});I.on({click:function(){N.push(3)},capture:true});E(I);expect(N).toEqual([1,2,3])});it("should stop bubbling when stopPropagation is called",function(){H.on({click:K});I.on({click:function(O){O.stopPropagation()}});E(I);expect(K).not.toHaveBeenCalled()});it("should stop propagating when stopPropagation is called during the capture phase",function(){H.on({click:function(O){O.stopPropagation()},capture:true});I.on({click:K,capture:true});E(I);expect(K).not.toHaveBeenCalled()});it("should skip the entire bubble phase if stopPropagation is called during the capture phase",function(){H.on({click:function(O){O.stopPropagation()},capture:true});H.on({click:K});I.on({click:J});E(I);expect(K).not.toHaveBeenCalled();expect(J).not.toHaveBeenCalled()})})});describe("removeListener",function(){it("should remove the event listener",function(){C();G();E();expect(K).not.toHaveBeenCalled()});it("should remove the event listener with scope",function(){var N={};C({scope:N});G({scope:N});E();expect(K).not.toHaveBeenCalled()});it("should remove multiple handlers from the same event",function(){C();C({click:J});G();E();expect(K).not.toHaveBeenCalled();expect(J.callCount).toBe(1);G({click:J});E();expect(J.callCount).toBe(1)});it("should remove a single event listener",function(){C({single:true});G();E();expect(K).not.toHaveBeenCalled()});it("should remove a delayed event listener",function(){C({delay:50});G();E();waits(100);runs(function(){expect(K).not.toHaveBeenCalled()})});it("should remove a buffered event listener",function(){C({buffer:50});G();E();waits(100);runs(function(){expect(K).not.toHaveBeenCalled()})});it("should remove listeners with a delegate selector",function(){C({delegate:".grandchild"});G({delegate:".grandchild"});E(I);expect(K).not.toHaveBeenCalled()})});describe("clearListeners",function(){it("should remove all the listeners",function(){var O=jasmine.createSpy(),N=jasmine.createSpy();H.on({click:K});H.on({click:J,delegate:".grandchild"});H.on({click:O,capture:true});H.on({click:N});H.clearListeners();E(I);expect(K).not.toHaveBeenCalled();expect(J).not.toHaveBeenCalled();expect(O).not.toHaveBeenCalled();expect(N).not.toHaveBeenCalled()})})})}A(true);A(false)});describe("event name normalization",function(){var B,A;beforeEach(function(){B=jasmine.createSpy();A=new Ext.mixin.Observable()});describe("firing",function(){it("should match when firing with lower case",function(){A.on("FOO",B);A.fireEvent("foo");expect(B).toHaveBeenCalled()});it("should match when firing with mixed case",function(){A.on("foo",B);A.fireEvent("FOO");expect(B).toHaveBeenCalled()})});describe("removing",function(){it("should match when removing with lower case",function(){A.on("FOO",B);A.un("foo",B);A.fireEvent("foo");expect(B).not.toHaveBeenCalled()});it("should match when removing with mixed case",function(){A.on("foo",B);A.un("FOO",B);A.fireEvent("FOO");expect(B).not.toHaveBeenCalled()})});describe("hasListener(s)",function(){it("should use lower case for hasListeners",function(){A.on("FOO",B);expect(A.hasListeners.foo).toBe(1)});it("should use lower case for hasListener",function(){A.on("FOO",B);expect(A.hasListener("foo")).toBe(true)})});describe("suspend/resume",function(){it("should ignore case when asking if an event is suspended",function(){A.suspendEvent("FOO");expect(A.isSuspended("foo")).toBe(true)});it("should ignore case when resuming events",function(){A.on("foo",B);A.suspendEvent("FOO");A.fireEvent("foo");expect(B).not.toHaveBeenCalled();A.resumeEvent("foo");A.fireEvent("foo");expect(B).toHaveBeenCalled()})});describe("bubbling",function(){it("should ignore case when bubbling events",function(){var C=new Ext.mixin.Observable();C.on("foo",B);A.enableBubble("FOO");A.getBubbleTarget=function(){return C};A.fireEvent("foo");expect(B).toHaveBeenCalled()})})});describe("hasListeners",function(){var A;beforeEach(function(){Ext.define("spec.Foo",{extend:"Ext.mixin.Observable",observableType:"foo"});Ext.define("spec.Bar",{extend:"Ext.mixin.Observable",observableType:"foo"});A=Ext.event.Dispatcher.getInstance();delete A.hasListeners.foo;delete A.hasListeners.bar});afterEach(function(){Ext.undefine("spec.Foo");Ext.undefine("spec.Bar");Ext.undefine("spec.Baz");delete A.hasListeners.foo;delete A.hasListeners.bar});it("should add the observableType to the dispatcher's hasListeners object when the first instance of a given observableType is created",function(){var B=A.hasListeners;expect("foo" in B).toBe(false);new spec.Foo();expect(typeof B.foo).toBe("object")});it("should chain the prototype of the observable instance's hasListeners object to the dispatchers hasListeners object for the given observableType",function(){var B=A.hasListeners,C=new spec.Foo();B.foo.someEvent=5;expect(C.hasListeners.someEvent).toBe(5)});it("should not add the observableType to the dispatcher's hasListeners if it already exists",function(){var B=A.hasListeners,C;new spec.Foo();C=B.foo;new spec.Bar();expect(B.foo).toBe(C)});it("should increment or decrement the dispatcher's hasListeners when the dispatcher's addListener/removeListener is called with no observable refrence",function(){function B(){}function C(){}A.addListener("foo","#bar","click",B);expect(A.hasListeners.foo.click).toBe(1);A.addListener("foo","#bar","click",C);expect(A.hasListeners.foo.click).toBe(2);A.removeListener("foo","#bar","click",B);expect(A.hasListeners.foo.click).toBe(1);A.removeListener("foo","#bar","click",C);expect("click" in A.hasListeners.foo).toBe(false)});it("should increment or decrement the observable's hasListeners when the observable's addListener/removeListener is called",function(){var C=new spec.Foo();function B(){}function D(){}expect(C.hasListeners.hasOwnProperty("click")).toBe(false);C.addListener("click",B);expect(C.hasListeners.hasOwnProperty("click")).toBe(true);expect(C.hasListeners.click).toBe(1);C.addListener("click",D);expect(C.hasListeners.click).toBe(2);C.removeListener("click",B);expect(C.hasListeners.click).toBe(1);C.removeListener("click",D);expect(C.hasListeners.hasOwnProperty("click")).toBe(false)});it("should delete all properties from the observable's hasListeners object when clearListeners is called",function(){var B=new spec.Foo();B.addListener("refresh",function(){});B.addListener("refresh",function(){});B.addListener("update",function(){});B.clearListeners();expect(B.hasListeners.hasOwnProperty("refresh")).toBe(false);expect(B.hasListeners.hasOwnProperty("update")).toBe(false)});it("should remove properties from the dispatcher's hasListeners object for the given observableType when the dispatcher's clearListeners() is called without an observable reference",function(){A.addListener("foo","#bar","refresh",function(){});A.addListener("foo","#bar","update",function(){});A.addListener("foo","#baz","refresh",function(){});A.clearListeners("foo","#bar");expect("update" in A.hasListeners.foo).toBe(false);expect(A.hasListeners.foo.refresh).toBe(1)});it("should only decrement hasListeners when a listener is actually removed",function(){var C=new spec.Foo(),B=0;C.addListener("event1",function(){B++});C.fireEvent("event1");expect(B).toBe(1);C.removeListener("event1",Ext.emptyFn);C.fireEvent("event1");expect(B).toBe(2);expect(C.hasListeners.event1).toBe(1)})});describe("scope: this",function(){var A;beforeEach(function(){A=Ext.define(null,{mixins:["Ext.mixin.Observable"],constructor:function(){this.mixins.observable.constructor.call(this)},method1:function(){},method2:function(){}})});it("should fire on the observable",function(){var B=new A();spyOn(B,"method1");B.on("custom","method1","this");B.fireEvent("custom");expect(B.method1).toHaveBeenCalled();expect(B.method1.mostRecentCall.object).toBe(B)});it("should remove the listener",function(){var B=new A();spyOn(B,"method1");B.on("custom","method1","this");B.un("custom","method1","this");B.fireEvent("custom");expect(B.method1).not.toHaveBeenCalled()})});describe("scope: controller",function(){var A;beforeEach(function(){A=Ext.define(null,{mixins:["Ext.mixin.Observable"],constructor:function(){this.mixins.observable.constructor.call(this)},method1:function(){},method2:function(){}})});it("should not resolve the scope",function(){var B=new A();spyOn(B,"method1");B.on("custom","method1","controller");expect(function(){B.fireEvent("custom")}).toThrow()})});describe("Event Normalization",function(){var E,D,C,B,A;beforeEach(function(){E=Ext.getBody().createChild();A={mousedown:jasmine.createSpy(),mousemove:jasmine.createSpy(),mouseup:jasmine.createSpy(),touchstart:jasmine.createSpy(),touchmove:jasmine.createSpy(),touchend:jasmine.createSpy(),pointerdown:jasmine.createSpy(),pointermove:jasmine.createSpy(),pointerup:jasmine.createSpy()};E.on(A)});afterEach(function(){E.destroy()});if(Ext.supports.PointerEvents){C={start:"pointerdown",move:"pointermove",end:"pointerup"};D=function(F){jasmine.firePointerEvent(E,C[F])}}else{if(Ext.supports.MSPointerEvents){C={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"};D=function(F){jasmine.firePointerEvent(E,C[F])}}else{if(Ext.supports.TouchEvents){C={start:"touchstart",move:"touchmove",end:"touchend"};B={start:"mousedown",move:"mousemove",end:"mouseup"};D=function(F,G){if(G){jasmine.fireMouseEvent(E,B[F],100,100)}else{jasmine.fireTouchEvent(E,C[F],[{pageX:1,pageY:1}])}}}else{C={start:"mousedown",move:"mousemove",end:"mouseup"};D=function(F){jasmine.fireMouseEvent(E,C[F])}}}}it("should fire start events",function(){D("start");expect(A.pointerdown.callCount).toBe(1);expect(A.touchstart.callCount).toBe(1);expect(A.mousedown.callCount).toBe(1);expect(A.pointerdown.mostRecentCall.args[0].type).toBe("pointerdown");expect(A.touchstart.mostRecentCall.args[0].type).toBe("touchstart");expect(A.mousedown.mostRecentCall.args[0].type).toBe("mousedown")});it("should fire move events",function(){D("move");expect(A.pointermove.callCount).toBe(1);expect(A.touchmove.callCount).toBe(1);expect(A.mousemove.callCount).toBe(1);expect(A.pointermove.mostRecentCall.args[0].type).toBe("pointermove");expect(A.touchmove.mostRecentCall.args[0].type).toBe("touchmove");expect(A.mousemove.mostRecentCall.args[0].type).toBe("mousemove")});it("should fire end events",function(){D("end");expect(A.pointerup.callCount).toBe(1);expect(A.touchend.callCount).toBe(1);expect(A.mouseup.callCount).toBe(1);expect(A.pointerup.mostRecentCall.args[0].type).toBe("pointerup");expect(A.touchend.mostRecentCall.args[0].type).toBe("touchend");expect(A.mouseup.mostRecentCall.args[0].type).toBe("mouseup")});if(Ext.supports.TouchEvents&&Ext.isWebKit&&Ext.os.is.Desktop){it("should fire secondary start events",function(){D("start",true);expect(A.pointerdown.callCount).toBe(1);expect(A.touchstart.callCount).toBe(1);expect(A.mousedown.callCount).toBe(1);expect(A.pointerdown.mostRecentCall.args[0].type).toBe("pointerdown");expect(A.touchstart.mostRecentCall.args[0].type).toBe("touchstart");expect(A.mousedown.mostRecentCall.args[0].type).toBe("mousedown")});it("should fire secondary move events",function(){D("move",true);expect(A.pointermove.callCount).toBe(1);expect(A.touchmove.callCount).toBe(1);expect(A.mousemove.callCount).toBe(1);expect(A.pointermove.mostRecentCall.args[0].type).toBe("pointermove");expect(A.touchmove.mostRecentCall.args[0].type).toBe("touchmove");expect(A.mousemove.mostRecentCall.args[0].type).toBe("mousemove")});it("should fire secondary end events",function(){D("end",true);expect(A.pointerup.callCount).toBe(1);expect(A.touchend.callCount).toBe(1);expect(A.mouseup.callCount).toBe(1);expect(A.pointerup.mostRecentCall.args[0].type).toBe("pointerup");expect(A.touchend.mostRecentCall.args[0].type).toBe("touchend");expect(A.mouseup.mostRecentCall.args[0].type).toBe("mouseup")})}});describe("declarative listeners",function(){var B,C,A,E,D=[];beforeEach(function(){B=Ext.define(null,{mixins:[Ext.mixin.Observable],type:"ParentMixin",listeners:{foo:"parentMixinHandler",scope:"this"},constructor:function(F){this.mixins.observable.constructor.call(this,F)},parentMixinHandler:function(){D.push("parentMixin:"+this.id)}});C=Ext.define(null,{extend:B,mixinId:"childMixin",type:"ChildMixin",listeners:{foo:"childMixinHandler",scope:"this"},childMixinHandler:function(){D.push("childMixin:"+this.id)}});A=Ext.define(null,{mixins:[C],type:"ParentClass",listeners:{foo:"parentClassHandler",scope:"this"},constructor:function(F){this.mixins.childMixin.constructor.call(this,F)},parentClassHandler:function(){D.push("parentClass:"+this.id)}});E=Ext.define(null,{extend:A,type:"ChildClass",listeners:{foo:"childClassHandler",scope:"this"},childClassHandler:function(){D.push("childClass:"+this.id)}})});it("should call all the listeners",function(){var F=new E({listeners:{foo:function(){D.push("childInstance:"+this.id)}}});F.id="theId";F.fireEvent("foo");expect(D).toEqual(["parentMixin:theId","childMixin:theId","parentClass:theId","childClass:theId","childInstance:theId"])})})});