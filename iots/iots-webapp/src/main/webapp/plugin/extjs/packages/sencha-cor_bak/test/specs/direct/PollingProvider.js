describe("Ext.direct.PollingProvider",function(){var A;function B(C){A=new Ext.direct.PollingProvider(C||{url:"/foo",baseParams:{foo:"bar"}})}beforeEach(function(){B()});afterEach(function(){A.disconnect();Ext.util.TaskManager.stopAll()});describe("should handle connect:",function(){beforeEach(function(){spyOn(A,"runPoll").andReturn()});it("creates poll task",function(){A.connect();expect(A.pollTask).toBeDefined()});it("fires 'connect' event",function(){var C=jasmine.createSpy("connect handler");A.on("connect",C);A.connect();expect(C).toHaveBeenCalled()})});describe("should handle disconnect:",function(){beforeEach(function(){spyOn(A,"runPoll").andReturn();A.connect()});it("destroys polling task",function(){A.disconnect();expect(A.pollTask).toBeUndefined()});it("fires 'disconnect' event",function(){var C=jasmine.createSpy("disconnect handler");A.on("disconnect",C);A.disconnect();expect(C).toHaveBeenCalled()})});describe("should handle polling:",function(){beforeEach(function(){spyOn(Ext.Ajax,"request").andReturn();A.connect()});it("should fire 'beforepoll' event",function(){var C=jasmine.createSpy("beforepoll handler");A.on("beforepoll",C);A.runPoll();expect(C).toHaveBeenCalled()});it("should make Ajax request if url is a string",function(){A.runPoll();expect(Ext.Ajax.request).toHaveBeenCalledWith({url:"/foo",params:{foo:"bar"},scope:A,callback:A.onData})});it("runs url() with baseParams when it's defined",function(){var C=jasmine.createSpy("url handler");B({url:C,baseParams:{foo:"bar"}});A.runPoll();expect(C).toHaveBeenCalledWith({foo:"bar"})});it("should fire 'poll' event",function(){var C=jasmine.createSpy("poll handler");A.on("poll",C);A.runPoll();expect(C).toHaveBeenCalled()})});describe("should handle data:",function(){var C;beforeEach(function(){C=jasmine.createSpy("data handler");A.on("data",C)});it("fires exception when poll is unsuccessful",function(){A.onData({},false,{foo:"bar"});var E=C.argsForCall[0],D=new Ext.direct.ExceptionEvent({data:null,code:Ext.direct.Manager.exceptions.TRANSPORT,message:"Unable to connect to the server.",xhr:{foo:"bar"}});expect(E[1]).toEqual(D)});it("doesn't fire 'data' event when dataset is empty",function(){spyOn(A,"createEvents").andCallThrough();A.onData({},true,{});expect(A.createEvents).toHaveBeenCalled();expect(C).not.toHaveBeenCalled()});it("fires 'data' event when dataset contains events",function(){var F=Ext.direct.Event,G=[{type:"event",name:"foo",data:{foo:"bar"}},{type:"event",name:"bar",data:null},{type:"event",name:"baz",data:["foo","bar"]},{type:"event",name:"qux",data:"plugh"}],E,D;A.onData({},true,{responseText:Ext.encode(G)});E=Ext.Array.map(G,function(H){return new F(H)});D=Ext.Array.map(C.argsForCall,function(H){return H[1]});expect(D).toEqual(E)})});describe("should handle errors:",function(){var C;beforeEach(function(){C=jasmine.createSpy("data handler");A.on("data",C)});it("doesn't break on undefined response",function(){A.onData({},true,{responseText:undefined});expect(C).not.toHaveBeenCalled()});it("doesn't break on null response",function(){A.onData({},true,{responseText:null});expect(C).not.toHaveBeenCalled()});it("doesn't break on empty string response",function(){A.onData({},true,{responseText:""});expect(C).not.toHaveBeenCalled()});it("doesn't break on empty dataset returned",function(){A.onData({},true,{responseText:Ext.JSON.encode([])});expect(C).not.toHaveBeenCalled()});it("raises exception on garbled json response",function(){A.onData({},true,{responseText:"invalid json"});var E=C.argsForCall[0][1],D={code:E.code,message:E.message};expect(D).toEqual({code:Ext.direct.Manager.exceptions.PARSE,message:"Error parsing json response: \n\n Ext.JSON.decode(): You're trying to decode an invalid JSON String: invalid json"})});it("raises exception on invalid payload data",function(){A.onData({},true,{responseText:Ext.JSON.encode({foo:"bar"})});var E=C.argsForCall[0][1],D={code:E.code,message:E.message};expect(D).toEqual({code:Ext.direct.Manager.exceptions.DATA,message:"Invalid data: event type is not specified"})});it("lets returned exception pass through",function(){var D={type:"exception",message:"Fubar"},G=Ext.JSON.encode(D);A.onData({},true,{responseText:G});var E=C.argsForCall[0][1],F={type:E.type,message:E.message};expect(C.argsForCall.length).toBe(1);expect(F).toEqual(D)})})});