describe("Ext.data.field.Field",function(){var B=Ext.data.SortTypes,C;function A(D){C=new Ext.data.field.Field(D)}afterEach(function(){C=null});describe("defaults",function(){beforeEach(function(){A()});it("should configure the type",function(){expect(C.getType()).toBe("auto")});it("should have allowBlank: true",function(){expect(C.getAllowBlank()).toBe(true)});it("should have allowNull: false",function(){expect(C.getAllowNull()).toBe(false)});it("should have convert: null",function(){expect(C.getConvert()).toBeNull()});it("should have defaultValue: undefined",function(){expect(C.getDefaultValue()).toBeUndefined()});it("should have depends: null",function(){expect(C.getDepends()).toBeNull()});it("should have mapping: null",function(){expect(C.getMapping()).toBeNull()});it("should have name: null",function(){expect(C.getName()).toBeNull()});it("should have persist: true",function(){expect(C.getPersist()).toBe(true)});it("should have sortDir: 'ASC'",function(){expect(C.getSortDir()).toBe("ASC")});it("should have sortType: none",function(){expect(C.getSortType()).toBe(B.none)})});describe("configuring",function(){it("should accept a string name",function(){A("foo");expect(C.getName()).toBe("foo")});it("should configure the name",function(){A({name:"foo"});expect(C.getName()).toBe("foo")});it("should configure allowBlank",function(){A({allowBlank:false});expect(C.getAllowBlank()).toBe(false)});describe("allowNull",function(){it("should configure a value",function(){A({allowNull:true});expect(C.getAllowNull()).toBe(true)});it("should default to true for fields with a reference (FK)",function(){A({reference:{}});expect(C.getAllowNull()).toBe(true)})});describe("convert",function(){it("should configure a fn",function(){var D=function(){};A({convert:D});expect(C.getConvert()).toBe(D)});describe("calculated",function(){it("should have calculated false if the convert function has < 2 args",function(){A({convert:function(D){}});expect(C.calculated).toBe(false)});it("should have calculated true if the convert function has >= 2 args",function(){A({convert:function(E,D){}});expect(C.calculated).toBe(true)})})});describe("defaultValue",function(){it("should configure a number",function(){A({defaultValue:3});expect(C.getDefaultValue()).toBe(3)});it("should configure a string",function(){A({defaultValue:"foo"});expect(C.getDefaultValue()).toBe("foo")});it("should configure a bool",function(){A({defaultValue:true});expect(C.getDefaultValue()).toBe(true)});it("should run the through the converter if it exists",function(){A({defaultValue:7,convert:function(D){return D+1}});expect(C.getDefaultValue()).toBe(8)})});describe("depends",function(){it("should accept a single string",function(){A({depends:"foo"});expect(C.getDepends()).toEqual(["foo"])});it("should accept an array",function(){A({depends:["foo","bar","baz"]});expect(C.getDepends()).toEqual(["foo","bar","baz"])})});it("should configure the mapping",function(){A({mapping:"some.obj.key"});expect(C.getMapping()).toBe("some.obj.key")});describe("persist",function(){it("should configure a true value",function(){A({persist:true});expect(C.getPersist()).toBe(true)});it("should configure a false value",function(){A({persist:false});expect(C.getPersist()).toBe(false)});it("should configure persist: false if it's a calculated field",function(){A({convert:function(E,D){}});expect(C.getPersist()).toBe(false)});it("should always favour a persist config over calculated",function(){A({persist:true,convert:function(){}});expect(C.getPersist()).toBe(true)})});it("should configure sortDir",function(){A({sortDir:"DESC"});expect(C.getSortDir()).toBe("DESC")});describe("sortType",function(){it("should accept a string from Ext.data.SortTypes",function(){A({sortType:"asDate"});expect(C.getSortType()).toBe(B.asDate)});it("should accept a custom sorter fn",function(){var D=function(){};A({sortType:D});expect(C.getSortType()).toBe(D)})})});describe("collate",function(){var D=function(E){return E*-1};beforeEach(function(){A({sortType:D})});it("should call the sortType and return -1 if a < b",function(){expect(C.collate(2,1)).toBe(-1)});it("should call the sortType and return 0 if a === b",function(){expect(C.collate(1,1)).toBe(0)});it("should call the sortType and return 1 if a > b",function(){expect(C.collate(1,2)).toBe(1)})});describe("compare",function(){beforeEach(function(){A()});describe("numbers",function(){it("should return -1 if a < b",function(){expect(C.compare(0,1)).toBe(-1)});it("should return 0 if a === b",function(){expect(C.compare(1,1)).toBe(0)});it("should return 1 if a > b",function(){expect(C.compare(2,1)).toBe(1)})});describe("strings",function(){it("should return -1 if a < b",function(){expect(C.compare("a","b")).toBe(-1)});it("should return 0 if a === b",function(){expect(C.compare("b","b")).toBe(0)});it("should return 1 if a > b",function(){expect(C.compare("c","b")).toBe(1)})});describe("dates",function(){var D=new Date(1970,0,1),E=new Date(1970,1,1),F=new Date(1970,2,1);it("should return -1 if a < b",function(){expect(C.compare(D,E)).toBe(-1)});it("should return 0 if a === b",function(){expect(C.compare(E,E)).toBe(0)});it("should return 1 if a > b",function(){expect(C.compare(F,E)).toBe(1)})})});describe("isEqual",function(){beforeEach(function(){A()});describe("numbers",function(){it("should return true if equal",function(){expect(C.isEqual(1,1)).toBe(true)});it("should return false if unequal",function(){expect(C.isEqual(1,3)).toBe(false)})});describe("strings",function(){it("should return true if equal",function(){expect(C.isEqual("foo","foo")).toBe(true)});it("should return false if unequal",function(){expect(C.isEqual("foo","fo")).toBe(false)})});describe("bools",function(){it("should return true if equal",function(){expect(C.isEqual(true,true)).toBe(true)});it("should return false if unequal",function(){expect(C.isEqual(false,true)).toBe(false)})});describe("object",function(){it("should return true if they are equal references",function(){var D={};expect(C.isEqual(D,D)).toBe(true)});it("should return false if they are not equal references",function(){var E={},D={};expect(C.isEqual(E,D)).toBe(false)})});describe("array",function(){it("should return true if they are equal references",function(){var D=[1,2];expect(C.isEqual(D,D)).toBe(true)});it("should return false if they are not equal references",function(){var E=[1,2],D=[1,2];expect(C.isEqual(E,D)).toBe(false)})});describe("dates",function(){it("should return true if they are equal references",function(){var D=new Date();expect(C.isEqual(D,D)).toBe(true)});it("should return false if they are not equal references",function(){var E=new Date(1970,0,1),D=new Date(1970,0,1);expect(C.isEqual(E,D)).toBe(false)})})});describe("factory",function(){var D=function(E){C=Ext.data.field.Field.create({type:E})};describe("boolean",function(){it("should use the bool alias",function(){D("bool");expect(C.isBooleanField).toBe(true)});it("should use the boolean alias",function(){D("boolean");expect(C.isBooleanField).toBe(true)})});it("should create a date field",function(){D("date");expect(C.isDateField).toBe(true)});describe("integer",function(){it("should use the int alias",function(){D("int");expect(C.isIntegerField).toBe(true)});it("should use the integer alias",function(){D("integer");expect(C.isIntegerField).toBe(true)})});describe("number",function(){it("should use the number alias",function(){D("number");expect(C.isNumberField).toBe(true)});it("should use the float alias",function(){D("float");expect(C.isNumberField).toBe(true)})});it("should create a string field",function(){D("string");expect(C.isStringField).toBe(true)});describe("base",function(){it("should create a base field with auto",function(){D("auto");expect(C.isField).toBe(true)});it("should create a base field no type",function(){D();expect(C.isField).toBe(true)})})})});