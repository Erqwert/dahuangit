describe("Ext.data.association.HasMany_legacy",function(){var A;function C(D){A=new spec.Thread({id:D})}function B(D){Ext.define("spec.Thread",{extend:"Ext.data.Model",fields:["id","name"],hasMany:Ext.apply({model:"spec.Post"},D)})}beforeEach(function(){Ext.data.Model.schema.setNamespace("spec");Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["title","content","user_id","thread_id"]});Ext.define("spec.Site",{extend:"Ext.data.Model",fields:["hits"]});Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"],hasMany:"spec.Post"})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Post");Ext.undefine("spec.Site");Ext.undefine("spec.Thread");Ext.data.Model.schema.clear(true);A=null});describe("declarations",function(){afterEach(function(){Ext.undefine("spec.Foo")});var D=function(E){expect(Ext.isFunction(spec.Foo.prototype[E])).toBe(true)};it("should read a single string",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasMany:"spec.Post"});D("posts")});it("should read an array of strings",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasMany:["spec.Post","spec.Site"]});D("posts");D("sites")});it("should read a single object",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasMany:{model:"spec.Post"}});D("posts")});it("should read an array of objects",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",hasMany:[{model:"spec.Post"},{model:"spec.Site"}]});D("posts");D("sites")});it("should read an associations array",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",associations:[{type:"hasMany",model:"spec.Post"},{type:"hasMany",model:"spec.Site"}]});D("posts");D("sites")})});describe("instance",function(){var D=function(){A=new spec.User({id:3})};var E=function(){return A["posts"]()};it("should return a store",function(){D();expect(E().isStore).toBe(true)});it("should set the appropriate model type",function(){D();expect(E().model).toBe(spec.Post)});it("should return the same store instance on multiple calls",function(){D();var F=E();expect(E()).toBe(F)});it("should apply the storeConfig",function(){B({storeConfig:{autoLoad:true}});C(3);var F=E();expect(F.getAutoLoad()).toBe(true);F.destroy()});describe("autoLoad",function(){it("should not load the store by default",function(){D();var F=spyOn(Ext.data.Store.prototype,"load").andReturn();E();expect(F.callCount).toBe(0)});it("should load the store if configured with autoLoad: true",function(){B({autoLoad:true});C(3);var F=spyOn(Ext.data.Store.prototype,"load").andReturn();E();expect(F.callCount).toBe(1)})});describe("keys",function(){describe("foreignKey",function(){it("should default to {modelName}_id",function(){D();var F=E().add({})[0];expect(F.get("user_id")).toBe(3)});it("should accept a user value",function(){B({foreignKey:"content"});C(3);var F=E().add({})[0];expect(F.get("content")).toBe(3)})});it("should set the primaryKey onto the foreignKey on add",function(){D();var F=E().add({"user_id":1})[0];expect(F.get("user_id")).toBe(3)})})});describe("reading nested with assocationKey",function(){var D=function(){return A.posts()};it("should default the key to association name",function(){var E=new Ext.data.reader.Json({model:spec.User});A=E.read([{id:1,name:"Foo","posts":[{title:"t1"},{title:"t2"}]}]).getRecords()[0];var F=D();expect(F.getCount()).toBe(2);expect(F.first().get("title")).toBe("t1");expect(F.last().get("title")).toBe("t2")});it("should read a complex association",function(){B({associationKey:"nested.another[1].two"});var E=new Ext.data.reader.Json({model:spec.Thread});A=E.read([{id:1,name:"Foo",nested:{another:[{},{two:[{title:"t1"},{title:"t2"}]}]}}]).getRecords()[0];var F=D();expect(F.getCount()).toBe(2);expect(F.first().get("title")).toBe("t1");expect(F.last().get("title")).toBe("t2")})});describe("inverse association",function(){it("should set the record if it has an inverse belongsTo",function(){Ext.define("spec.Parent",{extend:"Ext.data.Model",fields:["id"],hasMany:"spec.Child"});Ext.define("spec.Child",{extend:"Ext.data.Model",fields:["id","parent_id"],belongsTo:"spec.Parent"});var D=new Ext.data.reader.Json({model:spec.Parent});A=D.read([{id:1,children:[{id:17}]}]).getRecords()[0];var E=A.children();expect(E.first().getParent()).toBe(A);Ext.undefine("spec.Parent");Ext.undefine("spec.Child")})})});