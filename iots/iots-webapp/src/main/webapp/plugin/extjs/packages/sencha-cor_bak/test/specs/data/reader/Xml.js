describe("Ext.data.reader.Xml",function(){var G,F,A,C,E,J,I,D=function D(K){if(window.ActiveXObject){var L=new ActiveXObject("Microsoft.XMLDOM");L.loadXML(K);return L}else{if(window.DOMParser){return(new DOMParser()).parseFromString(K,"text/xml")}}return""},B=function(K){K="<root>"+K+"</root>";return D(K)},H;beforeEach(function(){H=Ext.DomQuery;Ext.DomQuery={isXml:function(K){var L=(K?K.ownerDocument||K:0).documentElement;return L?L.nodeName!=="HTML":false},selectNode:function(L,K){return Ext.DomQuery.select(L,K,null,true)[0]},select:function(N,L,K,M){if(typeof L=="string"){return[]}return M?[L.querySelector(N)]:Ext.Array.toArray(L.querySelectorAll(N))}}});afterEach(function(){Ext.DomQuery=H});describe("extractors",function(){function K(L){Ext.define("spec.FooXmlTest",{extend:"Ext.data.Model",fields:["field"]});L=L||{};G=new Ext.data.reader.Xml(Ext.apply({model:"spec.FooXmlTest"},L))}afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.FooXmlTest")});it("should run function extractors in the reader scope",function(){var L;K({successProperty:function(){L=this;return true}});G.getSuccess({success:true});expect(L).toBe(G)});describe("getTotal",function(){it("should default to total",function(){K();expect(G.getTotal(B("<total>10</total>"))).toBe("10")});it("should have no getTotal method if the totalProperty isn't specified",function(){K({totalProperty:""});expect(G.getTotal).toBeUndefined()});it("should read the specified property name",function(){K({totalProperty:"foo"});expect(G.getTotal(B("<foo>17</foo>"))).toBe("17")});it("should accept a function configuration",function(){K({totalProperty:function(L){return this.getNodeValue(L.firstChild.childNodes[2])}});expect(G.getTotal(B("<node1>1</node1><node2>2</node2><node3>3</node3>"))).toBe("3")});xit("should be able to use some xpath",function(){K({totalProperty:"foo/bar"});expect(G.getTotal(B("<foo><bar>18</bar></foo>"))).toBe("18")});xit("should support attribute reading",function(){K({totalProperty:"@total"});expect(G.getTotal(D('<node total="11" />').firstChild)).toBe("11")})});describe("getSuccess",function(){it("should default to success",function(){K();expect(G.getSuccess(B("<success>true</success>"))).toBe("true")});it("should have no getSuccess method if the successProperty isn't specified",function(){K({successProperty:""});expect(G.getSuccess).toBeUndefined()});it("should read the specified property name",function(){K({successProperty:"foo"});expect(G.getSuccess(B("<foo>false</foo>"))).toBe("false")});it("should accept a function configuration",function(){K({successProperty:function(L){return this.getNodeValue(L.firstChild.childNodes[0])}});expect(G.getSuccess(B("<node1>true</node1><node2>false</node2><node3>false</node3>"))).toBe("true")});xit("should be able to use some xpath",function(){K({successProperty:"a/node/path"});expect(G.getSuccess(B("<a><node><path>false</path></node></a>"))).toBe("false")});xit("should support attribute reading",function(){K({totalProperty:"@success"});expect(G.getTotal(D('<node success="true" />').firstChild)).toBe("true")})});describe("getMessage",function(){it("should default to undefined",function(){K();expect(G.getMessage).toBeUndefined()});it("should have no getMessage method if the messageProperty isn't specified",function(){K({messageProperty:""});expect(G.getMessage).toBeUndefined()});it("should read the specified property name",function(){K({messageProperty:"foo"});expect(G.getMessage(B("<foo>a msg</foo>"))).toBe("a msg")});it("should accept a function configuration",function(){K({messageProperty:function(L){return this.getNodeValue(L.firstChild.childNodes[1])}});expect(G.getMessage(B("<node1>msg1</node1><node2>msg2</node2><node3>msg3</node3>"))).toBe("msg2")});xit("should be able to use some xpath",function(){K({messageProperty:"some/nodes"});expect(G.getMessage(B("<some><nodes>message here</nodes></some>"))).toBe("message here")});xit("should support attribute reading",function(){K({totalProperty:"@message"});expect(G.getTotal(D('<node message="attribute msg" />').firstChild)).toBe("attribute msg")})});describe("fields",function(){var M={recordCreator:Ext.identityFn};function L(O,N){Ext.define("spec.XmlFieldTest",{extend:"Ext.data.Model",fields:O});G=new Ext.data.reader.Xml(Ext.apply({model:"spec.XmlFieldTest",record:"root"},N))}afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.XmlFieldTest")});it("should read the name if no mapping is specified",function(){L(["field"]);var N=G.readRecords(B("<field>val</field>").firstChild,M).getRecords()[0];expect(N.field).toBe("val")});it("should give precedence to the mapping",function(){L([{name:"field",mapping:"other"}]);var N=G.readRecords(B("<field>val</field><other>real value</other>").firstChild,M).getRecords()[0];expect(N.field).toBe("real value")});it("should handle dot notation mapping with nested undefined properties",function(){L([{name:"field",mapping:"some.nested.property"}]);var N=G.readRecords(B("<foo>val</foo>").firstChild,M).getRecords()[0];expect(N.field).toBeUndefined()});it("should accept a function",function(){L([{name:"field",mapping:function(O){return G.getNodeValue(O.childNodes[1])}}]);var N=G.readRecords(B("<node1>a</node1><node2>b</node2><node3>c</node3>"),M).getRecords()[0];expect(N.field).toBe("b")});xit("should allow basic xpath",function(){L([{name:"field",mapping:"some/xpath/here"}]);var N=G.readRecords(B("<some><xpath><here>a value</here></xpath></some>"),M).getRecords()[0];expect(N.field).toBe("a value")});xit("should support attribute reading",function(){L([{name:"field",mapping:"@other"}]);var N=G.readRecords(D('<node other="attr value" />').firstChild,M).getRecords()[0];expect(N.field).toBe("attr value")});xit("should read fields from xml nodes that have a namespace prefix",function(){L(["field"],{namespace:"n"});var N=G.readRecords(B('<n:field xmlns:n="nns">val</n:field>').firstChild,M).getRecords()[0];expect(N.field).toBe("val")});xit("should read field data from a mapped xml node with namespace prefix",function(){L([{name:"field",mapping:"m|other"}]);var N=G.readRecords(B('<n:field xmlns:n="nns">val</n:field><m:other xmlns:m="mns">real value</m:other>').firstChild,M).getRecords()[0];expect(N.field).toBe("real value")})})});xdescribe("reading data",function(){var K,L;beforeEach(function(){Ext.define("spec.XmlReader",{extend:"Ext.data.Model",fields:[{name:"id",mapping:"idProp",type:"int"},{name:"name",mapping:"FullName",type:"string"},{name:"email",mapping:"@email",type:"string"}]});G=new Ext.data.reader.Xml({root:"data",totalProperty:"totalProp",messageProperty:"messageProp",successProperty:"successProp",model:"spec.XmlReader",record:"user"});I=new MockAjax();F=["<results>","<totalProp>2300</totalProp>","<successProp>true</successProp>","<messageProp>It worked</messageProp>","<data>",'<user email="ed@sencha.com">',"<idProp>123</idProp>","<FullName>Ed Spencer</FullName>","</user>","</data>","</results>"].join("");I.complete({status:200,statusText:"OK",responseText:F,responseHeaders:{"Content-type":"application/xml"}});K=G.read(I);L=K.getRecords()[0]});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.XmlReader")});it("should extract the correct total",function(){expect(K.getTotal()).toBe(2300)});it("should extract success",function(){expect(K.getSuccess()).toBe(true)});it("should extract count",function(){expect(K.getCount()).toBe(1)});it("should extract the message",function(){expect(K.getMessage()).toBe("It worked")});it("should extract the id",function(){expect(L.getId()).toBe(123)});it("should respect field mappings",function(){expect(L.get("name")).toBe("Ed Spencer")});it("should respect field mappings containing @",function(){expect(L.get("email")).toBe("ed@sencha.com")})});xdescribe("loading nested data",function(){beforeEach(function(){I=new MockAjax();F=["<users>","<user>","<id>123</id>","<name>Ed</name>","<orders>","<order>","<id>50</id>","<total>100</total>","<order_items>","<order_item>","<id>20</id>","<price>40</price>","<quantity>2</quantity>","<product>","<id>1000</id>","<name>MacBook Pro</name>","</product>","</order_item>","<order_item>","<id>21</id>","<price>20</price>","<quantity>1</quantity>","<product>","<id>1001</id>","<name>iPhone</name>","</product>","</order_item>","</order_items>","</order>","<order>","<id>51</id>","<total>10</total>","<order_items>","<order_item>","<id>22</id>","<price>10</price>","<quantity>1</quantity>","<product>","<id>1002</id>","<name>iPad</name>","</product>","</order_item>","</order_items>","</order>","</orders>","</user>","</users>"].join("");I.complete({status:200,statusText:"OK",responseText:F});Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"],hasMany:{model:"spec.Order",name:"orders"},proxy:{type:"rest",reader:{type:"xml",root:"users"}}});Ext.define("spec.Order",{extend:"Ext.data.Model",fields:["id","total"],hasMany:{model:"spec.OrderItem",name:"orderItems",associationKey:"order_items"},belongsTo:"spec.User",proxy:{type:"memory",reader:{type:"xml",root:"orders",record:"order"}}});Ext.define("spec.OrderItem",{extend:"Ext.data.Model",fields:["id","price","quantity","order_id","product_id"],belongsTo:["spec.Order",{model:"spec.Product",getterName:"getProduct",associationKey:"product"}],proxy:{type:"memory",reader:{type:"xml",root:"order_items",record:"order_item"}}});Ext.define("spec.Product",{extend:"Ext.data.Model",fields:["id","name"],hasMany:{model:"spec.OrderItem",name:"orderItems"},proxy:{type:"memory",reader:{type:"xml",record:"product"}}});C=function(K){return new Ext.data.reader.Xml(Ext.apply({},K,{model:"spec.User",root:"users",record:"user"}))}});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.User");Ext.undefine("spec.Order");Ext.undefine("spec.OrderItem");Ext.undefine("spec.Product")});it("should set implicitIncludes to true by default",function(){G=C();expect(G.getImplicitIncludes()).toBe(true)});it("should not parse includes if implicitIncludes is set to false",function(){G=C({implicitIncludes:false});A=G.read(I);E=A.records[0];J=E.orders();expect(J.getCount()).toEqual(0)});describe("when reading nested data",function(){beforeEach(function(){G=C();A=G.read(I);E=A.records[0];J=E.orders()});it("should populate first-order associations",function(){expect(J.getCount()).toEqual(2)});it("should populate second-order associations",function(){var K=J.first();expect(K.orderItems().getCount()).toEqual(2)});it("should populate belongsTo associations",function(){var L=J.first(),K=L.orderItems().first(),M=K.getProduct();expect(M.get("name")).toEqual("MacBook Pro")})})});describe("reading xhr",function(){var M="<users><success>true</success><user><name>Ben</name><location>Boston</location></user><user><name>Mike</name><location>Redwood City</location></user><user><name>Nick</name><location>Kansas City</location></user></users>",K={responseText:"something",responseXML:D(M)},N={responseText:"something",responseXML:null};beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["name","location"]});G=new Ext.data.reader.Xml({record:"user",model:"spec.User",listeners:{exception:function(Q,R,P,O){}}});spyOn(G,"readRecords").andCallThrough();spyOn(G,"getResponseData").andCallThrough()});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.User")});function L(O){return G.read(O)}describe("if there is a responseXML property",function(){describe("if there is valid XML",function(){it("should call readRecords",function(){L(K);expect(G.readRecords).toHaveBeenCalled()});it("should be successful",function(){expect(L(K).getSuccess()).toBe(true)});it("should return the expected number of records",function(){expect(L(K).getCount()).toBe(3)});it("should not return a non-empty dataset",function(){expect(L(K).getRecords().length).toBeGreaterThan(0)})});describe("if there is invalid XML",function(){it("should not call readRecords",function(){L(N);expect(G.readRecords).not.toHaveBeenCalled()});it("should not be successful",function(){expect(L(N).getSuccess()).toBe(false)});it("should not return any records",function(){expect(L(N).getTotal()).toBe(0)});it("should return any empty dataset",function(){expect(L(N).getRecords().length).toBe(0)})})});describe("if there is no responseText property",function(){beforeEach(function(){L("something")});it("should not call readRecords",function(){expect(G.getResponseData).not.toHaveBeenCalled()})})})});