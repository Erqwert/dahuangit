describe("Ext.event.Dispatcher",function(){var H,N,E,K,L,M,P,J,D,G,A,F,O;var B=new Ext.Class({extend:Ext.event.publisher.Publisher,targetType:"foo",handledEvents:["foo","oof"]});var C=new Ext.Class({extend:Ext.event.publisher.Publisher,targetType:"foo",handledEvents:["anotherfoo"]});var I=new Ext.Class({extend:Ext.event.publisher.Publisher,targetType:"bar",handledEvents:["bar"]});beforeEach(function(){H=new Ext.event.Dispatcher;N=new B;E=new C;K=new I;L="test";M="#test";P="testevent";J=function(){};D={};G={};O="current";A=["foo","bar",{},[],true,1,2];F=function(){}});xdescribe("getPublisher()",function(){it("should return null if the publisher is not known",function(){expect(H.getPublisher("foo","bar")).toBe(null)})});xdescribe("registerPublisher()",function(){it("should map the publisher to the targetType and all handled events",function(){H.registerPublisher(N);expect(H.getPublisher("foo","foo")).toBe(N);expect(H.getPublisher("foo","oof")).toBe(N)});it("should invoke setDispatcher() of the publisher",function(){var Q=new B;spyOn(Q,"setDispatcher");H.registerPublisher(Q);expect(Q.setDispatcher).toHaveBeenCalledWith(H)})});describe("getListenerStack()",function(){it("should create a new instance of Ext.event.ListenerStack if not exist",function(){var Q=H.getListenerStack("test","#id","name",true);expect(Q instanceof Ext.event.ListenerStack).toBe(true)});it("should NOT create a new instance of Ext.event.ListenerStack if createIfNotExists argument is not set to true",function(){var Q=H.getListenerStack("test","#id","name");expect(Q).toBe(null)});it("should NOT create a new instance of Ext.event.ListenerStack if it already exists",function(){var R=H.getListenerStack("test","#id","name",true),Q=H.getListenerStack("test","#id","name",true);expect(R).toBe(Q)});it("should create a new instance of Ext.event.ListenerStack if targetType is different",function(){var R=H.getListenerStack("foo","#id","name",true),Q=H.getListenerStack("bar","#id","name",true);expect(R).not.toBe(Q)});it("should create a new instance of Ext.event.ListenerStack if target is different",function(){var R=H.getListenerStack("test","#foo","name",true),Q=H.getListenerStack("test",".bar","name",true);expect(R).not.toBe(Q)});it("should create a new instance of Ext.event.ListenerStack if eventName is different",function(){var R=H.getListenerStack("test","#id","foo",true),Q=H.getListenerStack("test","#id","bar",true);expect(R).not.toBe(Q)})});describe("getController()",function(){it("should return an instance of Ext.event.Controller",function(){var Q=H.getController();expect(Q instanceof Ext.event.Controller).toBe(true)});it("should reuse the same controller instance if it's not currently firing",function(){var Q=H.getController();expect(H.getController()).toBe(Q)});it("should NOT reuse the same controller instance if it's currently firing",function(){var Q=H.getController();Q.isFiring=true;expect(H.getController()).not.toBe(Q)})});describe("addListener()",function(){it("should invoke addListener() of the corresponding stack with proper arguments",function(){var Q=H.getListenerStack(L,M,P,true),R={};spyOn(Q,"add");H.addListener(L,M,P,J,D,G,O,R);expect(Q.add).toHaveBeenCalledWith(J,D,G,O,R)});xit("should invoke all the publisher's subscribe() method corresponding to that targetType and eventName",function(){var Q={};H.registerPublisher(N);H.registerPublisher(K);spyOn(N,"subscribe").andCallFake();spyOn(K,"subscribe").andCallFake();H.addListener("foo",M,"foo",J,D,G,Q);expect(K.subscribe).not.toHaveBeenCalled();expect(N.subscribe).toHaveBeenCalledWith(M,"foo",G,Q)})});describe("removeListener()",function(){it("should NOT create a new stack if not exist",function(){spyOn(H,"getListenerStack").andReturn(null);H.removeListener(L,M,P,J,D);expect(H.getListenerStack).toHaveBeenCalledWith(L,M,P)});it("should invoke removeListener() of the corresponding stack with proper arguments",function(){var Q=H.getListenerStack(L,M,P,true);spyOn(Q,"remove").andReturn(true);H.removeListener(L,M,P,J,D,{},O);expect(Q.remove).toHaveBeenCalledWith(J,D,O)});it("should invoke the publisher's unsubscribe() method corresponding to that targetType and eventName",function(){var Q={},R={};spyOn(H,"getListenerStack").andReturn({remove:function(){return true}});H.registerPublisher(N);H.registerPublisher(K);spyOn(N,"unsubscribe").andCallThrough();spyOn(K,"unsubscribe").andCallThrough();H.removeListener("foo",M,"foo",J,D,R,null,Q);expect(K.unsubscribe).not.toHaveBeenCalled();expect(N.unsubscribe).toHaveBeenCalledWith(M,"foo",null,R,Q)})});describe("doDispatchEvent()",function(){it("should invoke the controller's fire() method",function(){var R=H.getListenerStack(L,M,P,true),S=H.getController(),Q={};spyOn(S,"fire");H.doDispatchEvent(L,M,P,A,Q);expect(S.fire).toHaveBeenCalledWith(A,Q)})});describe("dispatchEvent()",function(){it("should invoke doDispatchEvent() with the same arguments",function(){var Q={};spyOn(H,"doDispatchEvent");H.dispatchEvent(L,M,P,A,Q);expect(H.doDispatchEvent).toHaveBeenCalledWith(L,M,P,A,Q)});it("should invoke the publisher's notify() method corresponding to that targetType and eventName",function(){H.registerPublisher(N);H.registerPublisher(K);spyOn(N,"notify").andCallThrough();spyOn(K,"notify").andCallThrough();H.dispatchEvent("foo",M,"foo",A);expect(K.notify).not.toHaveBeenCalled();expect(N.notify).toHaveBeenCalledWith(M,"foo")})})});