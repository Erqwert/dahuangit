describe("Ext.data.validator.Validator",function(){var A;afterEach(function(){A=null});describe("construction",function(){it("should accept a function to be the validate method",function(){var B=function(){};A=new Ext.data.validator.Validator(B);expect(A.validate).toBe(B)})});describe("validate",function(){it("should return true",function(){A=new Ext.data.validator.Validator();expect(A.validate()).toBe(true)})});describe("factory",function(){var B=function(C,D){return Ext.data.validator.Validator.create(Ext.apply({type:C},D))};it("should create a presence validator",function(){expect(B("presence") instanceof Ext.data.validator.Presence).toBe(true)});it("should create a length validator",function(){expect(B("length") instanceof Ext.data.validator.Length).toBe(true)});it("should create a range validator",function(){expect(B("range") instanceof Ext.data.validator.Range).toBe(true)});it("should create an email validator",function(){expect(B("email") instanceof Ext.data.validator.Email).toBe(true)});it("should create a format validator",function(){expect(B("format",{matcher:/foo/}) instanceof Ext.data.validator.Format).toBe(true)});it("should create an inclusion validator",function(){expect(B("inclusion",{list:[]}) instanceof Ext.data.validator.Inclusion).toBe(true)});it("should create an exclusion validator",function(){expect(B("exclusion",{list:[]}) instanceof Ext.data.validator.Exclusion).toBe(true)});it("should default to base",function(){expect(B("") instanceof Ext.data.validator.Validator).toBe(true)})})});