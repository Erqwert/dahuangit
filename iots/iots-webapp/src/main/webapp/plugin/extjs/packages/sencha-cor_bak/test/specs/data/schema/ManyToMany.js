describe("Ext.data.schema.ManyToMany",function(){var E,C,J,F,H,K,I,M,G,B,L,D,A;beforeEach(function(){var N=Ext.define("spec.many2many.Base",{extend:"Ext.data.Model",schema:{namespace:"spec.many2many"}});A=N.schema;A.clear();E=Ext.define("spec.many2many.User",{extend:"spec.many2many.Base",manyToMany:"Group"});C=Ext.define("spec.many2many.Group",{extend:"spec.many2many.Base"});H=Ext.define("spec.many2many.User2",{extend:"spec.many2many.Base",manyToMany:"#Group2"});K=Ext.define("spec.many2many.Group2",{extend:"spec.many2many.Base",manyToMany:"User2#"});I=Ext.define("spec.many2many.User3",{extend:"spec.many2many.Base",manyToMany:[{type:"Group3",left:true}]});M=Ext.define("spec.many2many.Group3",{extend:"spec.many2many.Base",manyToMany:[{type:"User3",right:true}]});G=Ext.define("spec.many2many.User4",{extend:"spec.many2many.Base",manyToMany:[{type:"Group4",role:"groups",field:"groupId",left:{role:"users",field:"userId"}}]});B=Ext.define("spec.many2many.Group4",{extend:"spec.many2many.Base",manyToMany:[{type:"User4",role:"users",field:"userId",right:{role:"groups",field:"groupId"}}]});L=Ext.define("spec.many2many.User5",{extend:"spec.many2many.Base",manyToMany:{foo:{type:"Group5",role:"theGroups",field:"theGroup_id",left:{role:"theUsers",field:"theUser_id"}}}});D=Ext.define("spec.many2many.Group5",{extend:"spec.many2many.Base",manyToMany:{foo:{type:"User5",role:"theUsers",field:"theUser_id",right:{role:"theGroups",field:"theGroup_id"}}}});N=Ext.define("spec.many2many.FooBase",{extend:"Ext.data.Model",schema:{namespace:"spec.many2many"}});J=Ext.define("spec.many2many.foo.bar.Thing",{extend:"spec.many2many.FooBase",manyToMany:"foo.Goo"});F=Ext.define("spec.many2many.foo.Goo",{extend:"spec.many2many.FooBase",manyToMany:"foo.bar.Thing"});Ext.data.Model.schema.setNamespace("spec.many2many")});afterEach(function(){Ext.data.Model.schema.clear(true)});describe("Simple Association",function(){var Q,P,R,O,N;beforeEach(function(){Q=E;P=C;N=Q.associations.groups;O=P.associations.users;R=N.association});describe("users role",function(){it("should have a role name",function(){expect(O.role).toBe("users")});it("should have an id field",function(){expect(O.field).toBe("userId")});it("should have the proper inverse role",function(){expect(O.inverse).toBe(N)});it("should have the proper class",function(){expect(O.cls).toBe(Q)});it("should have a reference back to the association",function(){expect(O.association.isManyToMany).toBe(true);expect(N.association).toBe(O.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("groups")});it("should have an id field",function(){expect(N.field).toBe("groupId")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(O)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(R.name).toBe("GroupUsers")});it("should have a schema set",function(){expect(R.schema).toBe(A)});it("should have no reference field set",function(){expect(R.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(R.definedBy).toBe(Q)});it("should have the owner as null",function(){expect(R.owner).toBeNull()})});describe("Getter/setter methods",function(){it("should generate getGroups",function(){expect(typeof Q.prototype.groups).toBe("function")});it("should generate getUsers",function(){expect(typeof P.prototype.users).toBe("function")})})});describe("Side-specified Association",function(){var Q,P,R,O,N;beforeEach(function(){Q=H;P=K;N=Q.associations.group2s;O=P.associations.user2s;R=N.association});describe("users role",function(){it("should have a role name",function(){expect(O.role).toBe("user2s")});it("should have an id field",function(){expect(O.field).toBe("user2Id")});it("should have the proper inverse role",function(){expect(O.inverse).toBe(N)});it("should have the proper class",function(){expect(O.cls).toBe(Q)});it("should have a reference back to the association",function(){expect(O.association.isManyToMany).toBe(true);expect(N.association).toBe(O.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("group2s")});it("should have an id field",function(){expect(N.field).toBe("group2Id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(O)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(R.name).toBe("User2Group2s")});it("should have a schema set",function(){expect(R.schema).toBe(A)});it("should have no reference field set",function(){expect(R.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(R.definedBy).toBe(Q)});it("should have the owner as null",function(){expect(R.owner).toBeNull()})})});describe("Simple Object-Form Association",function(){var Q,P,R,O,N;beforeEach(function(){Q=I;P=M;N=Q.associations.group3s;O=P.associations.user3s;R=N.association});describe("users role",function(){it("should have a role name",function(){expect(O.role).toBe("user3s")});it("should have an id field",function(){expect(O.field).toBe("user3Id")});it("should have the proper inverse role",function(){expect(O.inverse).toBe(N)});it("should have the proper class",function(){expect(O.cls).toBe(Q)});it("should have a reference back to the association",function(){expect(O.association.isManyToMany).toBe(true);expect(N.association).toBe(O.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("group3s")});it("should have an id field",function(){expect(N.field).toBe("group3Id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(O)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(R.name).toBe("User3Group3s")});it("should have a schema set",function(){expect(R.schema).toBe(A)});it("should have no reference field set",function(){expect(R.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(R.definedBy).toBe(Q)});it("should have the owner as null",function(){expect(R.owner).toBeNull()})})});describe("Full Object-Form Association",function(){var Q,P,R,O,N;beforeEach(function(){Q=G;P=B;N=Q.associations.groups;O=P.associations.users;R=N.association});describe("users role",function(){it("should have a role name",function(){expect(O.role).toBe("users")});it("should have an id field",function(){expect(O.field).toBe("userId")});it("should have the proper inverse role",function(){expect(O.inverse).toBe(N)});it("should have the proper class",function(){expect(O.cls).toBe(Q)});it("should have a reference back to the association",function(){expect(O.association.isManyToMany).toBe(true);expect(N.association).toBe(O.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("groups")});it("should have an id field",function(){expect(N.field).toBe("groupId")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(O)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(R.name).toBe("User4Group4s")});it("should have a schema set",function(){expect(R.schema).toBe(A)});it("should have no reference field set",function(){expect(R.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(R.definedBy).toBe(Q)});it("should have the owner as null",function(){expect(R.owner).toBeNull()})})});describe("Named Full Object-Form Association",function(){var Q,P,R,O,N;beforeEach(function(){Q=L;P=D;N=Q.associations.theGroups;O=P.associations.theUsers;R=N.association});describe("users role",function(){it("should have a role name",function(){expect(O.role).toBe("theUsers")});it("should have an id field",function(){expect(O.field).toBe("theUser_id")});it("should have the proper inverse role",function(){expect(O.inverse).toBe(N)});it("should have the proper class",function(){expect(O.cls).toBe(Q)});it("should have a reference back to the association",function(){expect(O.association.isManyToMany).toBe(true);expect(N.association).toBe(O.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("theGroups")});it("should have an id field",function(){expect(N.field).toBe("theGroup_id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(O)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(R.name).toBe("foo")});it("should have a schema set",function(){expect(R.schema).toBe(A)});it("should have no reference field set",function(){expect(R.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(R.definedBy).toBe(Q)});it("should have the owner as null",function(){expect(R.owner).toBeNull()})})});describe("Nested Namespace Association",function(){var O,N,P;beforeEach(function(){P=J.associations.fooGoos;N=F.associations.fooBarThings;O=P.association});it("should have proper left name",function(){expect(N.association.left.role).toBe("fooBarThings")});it("should have proper right name",function(){expect(N.association.right.role).toBe("fooGoos")});it("should have proper left getter",function(){expect(typeof J.prototype.fooGoos).toBe("function")});it("should have proper right getter",function(){expect(typeof F.prototype.fooBarThings).toBe("function")})});xdescribe("model decoration",function(){function N(O,P){expect(typeof O.prototype[P]).toBe("function")}it("should generate a getter on the key holder",function(){defineUser();N(User,"getAddress")});it("should generate a setter on the key holder",function(){defineUser();N(User,"setAddress")});it("should define a getter on the inverse",function(){defineUser();N(Address,"getUser")});it("should allow a custom getter name on the key holder",function(){defineUser({getterName:"getFoo"});N(User,"getFoo")});it("should allow a custom setter name on the key holder",function(){defineUser({setterName:"setFoo"});N(User,"setFoo")});it("should allow a custom getter name on the inverse",function(){defineUser({inverse:{getterName:"getBar"}});N(Address,"getBar")});it("should decorate the model based on the role",function(){Ext.define("spec.OtherUser",{extend:"Ext.data.Model",fields:["id","name",{name:"postalAddressId",reference:{type:"Address",role:"postalAddress"}},{name:"homeAddressId",reference:{type:"Address",role:"homeAddress"}}]});N(spec.OtherUser,"getPostalAddress");N(spec.OtherUser,"getHomeAddress");Ext.undefine("spec.OtherUser")})})});