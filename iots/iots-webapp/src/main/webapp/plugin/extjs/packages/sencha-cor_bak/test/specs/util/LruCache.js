describe("Ext.util.LruCache",function(){var K,L={objIdx:1},D={objIdx:2},I={objIdx:3},J={objIdx:4},H={objIdx:5},G={objIdx:6},A={objIdx:7},C={objIdx:8},E={objIdx:9},B={objIdx:10};function F(M){K=new Ext.util.LruCache(M)}describe("Adding",function(){it("should create an empty cache",function(){F();expect(K.length).toBe(0);expect(K.first).toBeNull;expect(K.last).toBeNull();expect(K.getValues()).toEqual([]);expect(K.getKeys()).toEqual([])});it("should contain 1 entry",function(){F();K.add(1,L);expect(K.length).toEqual(1);expect(K.first.value).toBe(L);expect(K.last.value).toBe(L);expect(K.getValues()).toEqual([L]);expect(K.getKeys()).toEqual([1])});it("should contain 2 entries",function(){F();K.add(1,L);K.add(2,D);expect(K.length).toEqual(2);expect(K.first.value).toBe(L);expect(K.last.value).toBe(D);expect(K.getValues()).toEqual([L,D]);expect(K.getKeys()).toEqual([1,2])})});describe("Sort on access",function(){it("should move accessed items to the end",function(){F();K.add(1,L);K.add(2,D);expect(K.getValues()).toEqual([L,D]);expect(K.getKeys()).toEqual([1,2]);K.get(1);expect(K.getValues()).toEqual([D,L]);expect(K.getKeys()).toEqual([2,1])})});describe("Inserting",function(){it("should insert at the requested point",function(){F();K.add(1,L);K.insertBefore(2,D,L);expect(K.getValues()).toEqual([D,L]);expect(K.getKeys()).toEqual([2,1])})});describe("Iterating",function(){it("should iterate in order",function(){var M=[];F();K.add(1,L);K.add(2,D);K.each(function(N,P,O){M.push(N,P)});expect(M).toEqual([1,L,2,D])});it("should iterate in reverse order",function(){var M=[];F();K.add(1,L);K.add(2,D);K.each(function(N,P,O){M.push(N,P)},null,true);expect(M).toEqual([2,D,1,L])})});describe("Removing",function(){it("should remove by key and re-link",function(){F();K.add(1,L);K.add(2,D);K.add(3,I);K.removeAtKey(2);expect(K.getValues()).toEqual([L,I]);expect(K.getKeys()).toEqual([1,3])});it("should remove by value and re-link",function(){F();K.add(1,L);K.add(2,D);K.add(3,I);K.remove(D);expect(K.getValues()).toEqual([L,I]);expect(K.getKeys()).toEqual([1,3])})});describe("Clearing",function(){it("should remove all",function(){F();K.add(1,L);K.add(2,D);K.clear();expect(K.getValues()).toEqual([]);expect(K.getKeys()).toEqual([])})});describe("Purging",function(){it("should only contain the last 5 added",function(){F({maxSize:5});K.add(1,L);K.add(2,D);K.add(3,I);K.add(4,J);K.add(5,H);K.add(6,G);K.add(7,A);K.add(8,C);K.add(9,E);K.add(10,B);expect(K.getValues()).toEqual([G,A,C,E,B]);expect(K.getKeys()).toEqual([6,7,8,9,10])})})});