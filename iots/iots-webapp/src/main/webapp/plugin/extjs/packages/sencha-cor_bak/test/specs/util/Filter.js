describe("Ext.util.Filter",function(){var A;describe("construction",function(){var B=function(C){return function(){new Ext.util.Filter(C)}};it("should accept a property and value",function(){expect(B({property:"test",value:"a"})).not.toRaiseExtError()});it("should accept a filter function",function(){expect(B({filterFn:Ext.emptyFn})).not.toRaiseExtError()});xit("should require at least a filter function or a property/value combination",function(){expect(B()).toRaiseExtError()})});describe("creating filter functions",function(){var E={name:"Ed"},B={name:"Ted"},C={name:"Abe"},D={name:"Edward"};it("should honor a simple property matcher",function(){A=new Ext.util.Filter({property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(E)).toBe(true);expect(F(D)).toBe(true);expect(F(B)).toBe(false);expect(F(C)).toBe(false)});it("should honor anyMatch",function(){A=new Ext.util.Filter({anyMatch:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(E)).toBe(true);expect(F(D)).toBe(true);expect(F(B)).toBe(true);expect(F(C)).toBe(false)});it("should honor exactMatch",function(){A=new Ext.util.Filter({exactMatch:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(E)).toBe(true);expect(F(D)).toBe(false);expect(F(B)).toBe(false);expect(F(C)).toBe(false)});it("should honor case sensitivity",function(){A=new Ext.util.Filter({caseSensitive:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(E)).toBe(true);expect(F(D)).toBe(true);expect(F(B)).toBe(false)});it("should honor case sensitivity and anyMatch",function(){A=new Ext.util.Filter({caseSensitive:true,anyMatch:true,property:"name",value:"ed"});var F=A.getFilterFn();expect(F(B)).toBe(true);expect(F(E)).toBe(false);expect(F(D)).toBe(false)});it("should honor the root property",function(){var H=[{data:{name:"Ed"}},{data:{name:"Ted"}},{data:{name:"Edward"}},{data:{name:"Abe"}}];var G=new Ext.util.Filter({root:"data",property:"name",value:"Ed"});var F=G.getFilterFn();expect(F(H[0])).toBe(true);expect(F(H[2])).toBe(true);expect(F(H[1])).toBe(false);expect(F(H[3])).toBe(false)})})});