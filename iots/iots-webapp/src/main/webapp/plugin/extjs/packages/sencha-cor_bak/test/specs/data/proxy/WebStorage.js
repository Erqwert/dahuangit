describe("Ext.data.proxy.WebStorage",function(){var A,B;var C={items:{},getItem:function(D){return this.items[D]||null},setItem:function(D,E){this.items[D]=E+""},removeItem:function(D){delete this.items[D]},clear:function(){this.items={}}};beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:[{name:"id",type:"int"},{name:"name",type:"string"},{name:"age",type:"int"}]});Ext.define("spec.Storage",{extend:"Ext.data.proxy.WebStorage",getStorageObject:function(){return C}})});afterEach(function(){C.clear();Ext.undefine("spec.User");Ext.undefine("spec.Storage");Ext.data.Model.schema.clear()});describe("getIds",function(){beforeEach(function(){spyOn(C,"getItem").andCallThrough();C.setItem("wsId","1,2,3");A=new spec.Storage({id:"wsId",model:spec.User})});it("should retrieve the list of ids from the storage object",function(){expect(C.getItem).toHaveBeenCalledWith("wsId")});it("should return an array",function(){expect(Ext.isArray(A.getIds())).toBe(true)});describe("if the id field is is not a string field",function(){it("should return each array item as a number",function(){var F=A.getIds(),D=F.length,E;for(E=0;E<D;E++){expect(typeof F[E]==="number").toBe(true)}})});describe("if the id field is a string field",function(){beforeEach(function(){spec.User=Ext.define(null,{extend:"Ext.data.Model",fields:[{name:"id",type:"string"}]});A=new spec.Storage({id:"wsId",model:spec.User})});it("should return each array item as a string",function(){var F=A.getIds(),D=F.length,E;for(E=0;E<D;E++){expect(typeof F[E]==="string").toBe(true)}})})});describe("getNextId",function(){beforeEach(function(){C.setItem(A.getRecordCounterKey(),"3");A=new spec.Storage({id:"wsId",model:spec.User})});it("should increment the counter in the storage object",function(){A.getNextId();expect(C.getItem(A.getRecordCounterKey())).toEqual("4")});describe("if the id field is is not a string field",function(){it("should return an incremented id as a number",function(){expect(A.getNextId()).toEqual(4)})});describe("when the id field is a string field",function(){beforeEach(function(){spec.User=Ext.define(null,{extend:"Ext.data.Model",fields:[{name:"id",type:"string"}]});A=new spec.Storage({id:"wsId",model:spec.User})});it("should return a string",function(){expect(A.getNextId()).toEqual("4")})})});describe("instantiation with id configuration option and methods",function(){B={id:"User"};beforeEach(function(){A=new spec.Storage(B)});describe("instantiation",function(){it("should set id",function(){expect(A.getId()).toEqual("User")});it("should extend Ext.data.proxy.Client",function(){expect(A.superclass.superclass).toEqual(Ext.data.proxy.Client.prototype)});it("should test getStorageObject in constructor",function(){expect(A.getStorageObject()).toBe(C)})});describe("methods",function(){describe("getRecordKey",function(){var D;beforeEach(function(){Ext.define("spec.Human",{extend:"Ext.data.Model",fields:[{name:"name",type:"string"},{name:"age",type:"int"},{name:"planet",type:"string",defaultValue:"Earth"}]});D=new spec.Human({id:1,name:"Nicolas",age:27})});afterEach(function(){Ext.undefine("spec.Human")});it("should return a unique string with a string given",function(){expect(A.getRecordKey("33")).toEqual("User-33")});it("should return a unique string with a model given",function(){expect(A.getRecordKey(D)).toEqual("User-1")})});describe("getRecordCounterKey",function(){it("should return the unique key used to store the current record counter for this proxy",function(){expect(A.getRecordCounterKey()).toEqual("User-counter")})});describe("getTreeKey",function(){it("should return the unique key used to store the tree indicator for this proxy",function(){expect(A.getTreeKey()).toEqual("User-tree")})});describe("getStorageObject",function(){it("should throw an error on getStorageObject",function(){expect(Ext.data.proxy.WebStorage.prototype.getStorageObject).toRaiseExtError()})})})});describe("instantiation with tree-indicator set in storage object",function(){var D={id:"tree-test"};beforeEach(function(){C.setItem(D.id+"-tree",true);A=new spec.Storage(D)});it("should set the isHierarchical flag",function(){expect(A.isHierarchical).toEqual(true)})});describe("destroying records after they have been added",function(){var D;beforeEach(function(){A=new spec.Storage({id:"lsTest"});D=new Ext.data.Store({model:spec.User,proxy:A});D.add({name:"Ed"},{name:"Abe"},{name:"Aaron"},{name:"Tommy"});D.sync()});it("should remove a single record",function(){var E=D.getCount();D.remove(D.getAt(1));D.sync();expect(D.getCount()).toEqual(E-1);expect(D.getAt(0).get("name")).toEqual("Ed");expect(D.getAt(1).get("name")).toEqual("Aaron")});it("should remove an array of records",function(){var E=D.getCount();D.remove([D.getAt(1),D.getAt(2)]);D.sync();expect(D.getCount()).toEqual(E-2);expect(D.getAt(0).get("name")).toEqual("Ed");expect(D.getAt(1).get("name")).toEqual("Tommy")});it("should remove the records ids from storage",function(){D.remove([D.getAt(1),D.getAt(2)]);D.sync();expect(A.getIds()).toEqual([1,4])})});describe("destroying a tree node",function(){var D,E,F,G,H,I,J;beforeEach(function(){A=new spec.Storage({id:"tree-test"});spec.User=Ext.define(null,{extend:"Ext.data.TreeModel",fields:[{name:"id",type:"int"},{name:"name",type:"string"}],proxy:A});Ext.data.NodeInterface.decorate(spec.User);D=new Ext.data.TreeStore({model:spec.User,proxy:A,root:{name:"Users",expanded:true,id:42}});E=new spec.User({name:"Abe"});F=new spec.User({name:"Sue"});G=new spec.User({name:"Phil"});H=new spec.User({name:"Don"});I=new spec.User({name:"Ed"});J=new spec.User({name:"Nico"});F.appendChild([G,H]);E.appendChild([F,I]);D.getRoot().appendChild(E);D.getRoot().appendChild(J);D.sync()});it("should recursively remove the node and all of its descendants",function(){spyOn(A,"removeRecord").andCallThrough();E.phantom=F.phantom=G.phantom=H.phantom=I.phantom=false;E.erase();expect(A.removeRecord).toHaveBeenCalledWith(E);expect(A.removeRecord).toHaveBeenCalledWith(F);expect(A.removeRecord).toHaveBeenCalledWith(G);expect(A.removeRecord).toHaveBeenCalledWith(H);expect(A.removeRecord).toHaveBeenCalledWith(I)});it("should remove the node and its descendants from the storage object",function(){E.erase();expect(A.getRecord(1)).toBeNull();expect(A.getRecord(2)).toBeNull();expect(A.getRecord(3)).toBeNull();expect(A.getRecord(4)).toBeNull();expect(A.getRecord(5)).toBeNull()});it("should remove the ids for the node and its descendants",function(){E.erase();expect(A.getIds()).toEqual([6])});it("should remove the node and its descendants from the cache",function(){E.erase();expect(A.cache[1]).toBeUndefined();expect(A.cache[2]).toBeUndefined();expect(A.cache[3]).toBeUndefined();expect(A.cache[4]).toBeUndefined();expect(A.cache[5]).toBeUndefined()})});describe("adding records to the storage object",function(){var E,F;beforeEach(function(){A=new spec.Storage({model:spec.User,id:"someId"});spyOn(A,"getNextId").andReturn(10);spyOn(A,"setIds").andCallThrough();spyOn(A,"getIds").andReturn([]);spyOn(A,"setRecord").andCallThrough()});var D=function(){F=new Ext.data.operation.Create({records:[E]});spyOn(F,"setStarted").andCallThrough();spyOn(F,"setCompleted").andCallThrough();spyOn(F,"setSuccessful").andCallThrough()};describe("if the records are phantoms",function(){beforeEach(function(){E=new spec.User({name:"Ed"});D()});it("should assign the next id to the record",function(){A.create(F);expect(E.getId()).toEqual(10)});it("should mark the Operation as started",function(){A.create(F);expect(F.setStarted).toHaveBeenCalled()});it("should mark the Operation as completed",function(){A.create(F);expect(F.setCompleted).toHaveBeenCalled()});it("should mark the Operation as successful",function(){A.create(F);expect(F.setSuccessful).toHaveBeenCalled()});it("should add the id to the set of all ids",function(){A.create(F);expect(A.setIds).toHaveBeenCalledWith([10])});it("should add the record to the storage object",function(){A.create(F);expect(A.setRecord).toHaveBeenCalledWith(E,10)});it("should call commit on the record",function(){spyOn(E,"commit").andCallThrough();A.create(F);expect(E.commit).toHaveBeenCalled()});it("should call the callback function with the records and operation",function(){var H,G;F.setCallback(function(J,I){G=J;H=I});A.create(F);expect(H).toEqual(F);expect(G).toEqual(F.getRecords())});it("should call the callback function with the correct scope",function(){var G;F.setCallback(function(){G=this});F.setScope(fakeScope);A.create(F);expect(G).toBe(fakeScope)})});describe("if the records are not phantoms",function(){beforeEach(function(){E=new spec.User({id:20,name:"Ed"});D()});it("should add the id to the set of all ids",function(){A.create(F);expect(A.setIds).toHaveBeenCalledWith([20])});it("should not generate the next id",function(){A.create(F);expect(A.getNextId).not.toHaveBeenCalled()});it("should add the record to the storage object",function(){A.create(F);expect(A.setRecord).toHaveBeenCalledWith(E,20)})});describe("if the records are decorated with NodeInterface",function(){beforeEach(function(){Ext.data.NodeInterface.decorate(spec.User);E=new spec.User({name:"Phil"});D()});it("should set the tree indicator in the storage object the first time a record is created",function(){A.create(F);expect(A.getStorageObject().getItem(A.getTreeKey())).toEqual("true")});it("should set the isHierarchical flag on the proxy the first time a record is created",function(){A.create(F);expect(A.isHierarchical).toEqual(true)})})});describe("updating existing records",function(){var E,D;beforeEach(function(){A=new spec.Storage({model:spec.User,id:"someId"});spyOn(A,"setRecord").andCallThrough();D=new spec.User({id:100,name:"Ed"});E=new Ext.data.operation.Update({records:[D]});spyOn(E,"setStarted").andCallThrough();spyOn(E,"setCompleted").andCallThrough();spyOn(E,"setSuccessful").andCallThrough()});it("should mark the Operation as started",function(){A.update(E);expect(E.setStarted).toHaveBeenCalled()});it("should mark the Operation as completed",function(){A.update(E);expect(E.setCompleted).toHaveBeenCalled()});it("should mark the Operation as successful",function(){A.update(E);expect(E.setSuccessful).toHaveBeenCalled()});it("should add the record to the storage object",function(){A.update(E);expect(A.setRecord).toHaveBeenCalledWith(D)});it("should call commit on the record",function(){spyOn(D,"commit").andCallThrough();A.update(E);expect(D.commit).toHaveBeenCalled()});it("should call the callback function with the records and operation",function(){var G,F;E.setCallback(function(I,H){F=I;G=H});A.update(E);expect(G).toEqual(E);expect(F).toEqual(E.getRecords())});it("should call the callback function with the correct scope",function(){var F;E.setCallback(function(){F=this});E.setScope(fakeScope);A.update(E);expect(F).toBe(fakeScope)});describe("if the record is not already in the storage object",function(){it("should add the record's id to the set of ids",function(){spyOn(A,"setIds").andCallThrough();A.update(E);expect(A.setIds).toHaveBeenCalledWith([100])})})});describe("setRecord",function(){var E,D,F;beforeEach(function(){spyOn(C,"setItem").andReturn();spyOn(C,"removeItem").andReturn();A=new spec.Storage({model:spec.User,id:"someId"});E=new spec.User({id:100,name:"Ed"});D="someId-100";F="some encoded data";spyOn(Ext,"encode").andReturn(F);spyOn(E,"set").andCallThrough();spyOn(A,"getRecordKey").andReturn(D)});describe("if a new id is passed",function(){it("should set the id on the record",function(){A.setRecord(E,20);expect(E.set).toHaveBeenCalledWith("id",20,{commit:true})})});describe("if a new id is not passed",function(){it("should get the id from the record",function(){spyOn(E,"getId").andCallThrough();A.setRecord(E);expect(E.getId).toHaveBeenCalled()})});it("should get the record key for the model instance",function(){A.setRecord(E);expect(A.getRecordKey).toHaveBeenCalledWith(100)});it("should remove the item from the storage object before adding it again",function(){A.setRecord(E);expect(C.removeItem).toHaveBeenCalledWith(D)});it("should add the item to the storage object",function(){A.setRecord(E);expect(C.setItem).toHaveBeenCalledWith(D,F)});it("should json encode the data",function(){var G=Ext.clone(E.data);A.setRecord(E);delete G.id;expect(Ext.encode).toHaveBeenCalledWith(G)})});describe("reading",function(){var E,D;beforeEach(function(){B={id:"User",model:spec.User};A=new spec.Storage(B)});describe("if passed an id",function(){var F;beforeEach(function(){F={id:100,name:"Phil"};spyOn(A,"getRecord").andReturn(F);D=new Ext.data.operation.Read({id:100})});it("should attempt to get the record for the given id",function(){A.read(D);expect(A.getRecord).toHaveBeenCalledWith(100)});it("should mark the operation successful",function(){spyOn(D,"setSuccessful").andCallThrough();A.read(D);expect(D.setSuccessful).toHaveBeenCalled()});it("should mark the operation completed",function(){spyOn(D,"setCompleted").andCallThrough();A.read(D);expect(D.setCompleted).toHaveBeenCalled()});describe("the resultSet",function(){var G;beforeEach(function(){D.setCallback(function(I,H){G=H.getResultSet()});A.read(D)});it("should contain the loaded record",function(){expect(G.getRecords()[0].getId()).toEqual(100);expect(G.getRecords()[0].get("name")).toEqual("Phil")});it("should set the correct total number of records",function(){expect(G.getTotal()).toEqual(1)});it("should mark itself as loaded",function(){expect(G.getLoaded()).toBe(true)})})});describe("if not passed an id",function(){var F;beforeEach(function(){C.setItem("User","1,2,3,4");C.setItem("User-1",'{"firstName":"Bob","lastName":"Smith","age":"2"}');C.setItem("User-2",'{"firstName":"Joe","lastName":"Smith","age":"50"}');C.setItem("User-3",'{"firstName":"Tim","lastName":"Jones","age":"41"}');C.setItem("User-4",'{"firstName":"Jim","lastName":"Smith","age":"33"}');D=new Ext.data.operation.Read()});it("should mark the operation successful",function(){spyOn(D,"setSuccessful").andCallThrough();A.read(D);expect(D.setSuccessful).toHaveBeenCalled()});it("should mark the operation completed",function(){spyOn(D,"setCompleted").andCallThrough();A.read(D);expect(D.setCompleted).toHaveBeenCalled()});describe("the resultSet",function(){var G;beforeEach(function(){D.setCallback(function(I,H){G=H.getResultSet()});A.read(D)});it("should contain the loaded records",function(){expect(G.getRecords()[0].get("firstName")).toBe("Bob");expect(G.getRecords()[1].get("firstName")).toBe("Joe");expect(G.getRecords()[2].get("firstName")).toBe("Tim");expect(G.getRecords()[3].get("firstName")).toBe("Jim")});it("should contain the correct number of loaded records",function(){expect(G.getRecords().length).toBe(4)});it("should set the correct total number of records",function(){expect(G.getTotal()).toEqual(4)});it("should mark itself as loaded",function(){expect(G.getLoaded()).toBe(true)});it("should cache the records",function(){expect(A.cache[1].firstName).toBe("Bob");expect(A.cache[2].firstName).toBe("Joe");expect(A.cache[3].firstName).toBe("Tim");expect(A.cache[4].firstName).toBe("Jim")})});it("should respect filters on the Operation",function(){var G;D=new Ext.data.operation.Read({filters:[new Ext.util.Filter({property:"lastName",value:"Smith"}),new Ext.util.Filter({filterFn:function(H){return H.get("age")<40}})],callback:function(H){G=H}});A.read(D);expect(G.length).toBe(2);expect(G[0].get("firstName")).toBe("Bob");expect(G[1].get("firstName")).toBe("Jim")});it("should respect start and limit on the Operation",function(){var G;D=new Ext.data.operation.Read({start:1,limit:2,callback:function(H){G=H}});A.read(D);expect(G.length).toBe(2);expect(G[0].get("firstName")).toBe("Joe");expect(G[1].get("firstName")).toBe("Tim")});it("should respect sorters on the Operation",function(){var G;D=new Ext.data.operation.Read({sorters:[new Ext.util.Sorter({property:"lastName",root:"data"}),new Ext.util.Sorter({sorterFn:function(H,I){return H.get("age")-I.get("age")}})],callback:function(H){G=H}});A.read(D);expect(G.length).toBe(4);expect(G[0].get("firstName")).toBe("Tim");expect(G[1].get("firstName")).toBe("Bob");expect(G[2].get("firstName")).toBe("Jim");expect(G[3].get("firstName")).toBe("Joe")});it("should apply sorters before filters",function(){var G;D=new Ext.data.operation.Read({sorters:[new Ext.util.Sorter({property:"lastName",root:"data"}),new Ext.util.Sorter({sorterFn:function(H,I){return H.get("age")-I.get("age")}})],filters:[new Ext.util.Filter({property:"lastName",value:"Smith"}),new Ext.util.Filter({filterFn:function(H){return H.get("age")<40}})],callback:function(H){G=H}});A.read(D);expect(G.length).toBe(2);expect(G[0].get("firstName")).toBe("Bob");expect(G[1].get("firstName")).toBe("Jim")});it("should apply sorters before start and limit",function(){var G;D=new Ext.data.operation.Read({sorters:[new Ext.util.Sorter({property:"lastName",root:"data"}),new Ext.util.Sorter({sorterFn:function(H,I){return H.get("age")-I.get("age")}})],start:1,limit:2,callback:function(H){G=H}});A.read(D);expect(G.length).toBe(2);expect(G[0].get("firstName")).toBe("Bob");expect(G[1].get("firstName")).toBe("Jim")})});describe("the tree indicator flag is set",function(){beforeEach(function(){A=new spec.Storage({model:spec.User,id:"tree-test"});Ext.data.NodeInterface.decorate(spec.User);A.isHierarchical=true;D=new Ext.data.operation.Read({})});it("should get tree data",function(){spyOn(A,"getTreeData").andReturn([new spec.User({id:1,name:"Phil"})]);A.read(D);expect(A.getTreeData).toHaveBeenCalled()})});describe("getting tree data from the storage object",function(){var F;beforeEach(function(){A=new spec.Storage({model:spec.User,id:"tree-test"});Ext.data.NodeInterface.decorate(spec.User);C.setItem("tree-test","1,2,3,4,5,6");C.setItem("tree-test-tree",true);C.setItem("tree-test-counter","6");C.setItem("tree-test-1",'{"name":"Phil","index":2,"leaf":true}');C.setItem("tree-test-2",'{"name":"Don","index":1,"leaf":false}');C.setItem("tree-test-3",'{"name":"Evan","parentId":2,"index":1,"leaf":true}');C.setItem("tree-test-4",'{"name":"Nige","parentId":2,"index":0,"leaf":false}');C.setItem("tree-test-5",'{"name":"Thomas","parentId":4,"index":0,"leaf":false}');C.setItem("tree-test-6",'{"name":"Brian","index":0,"leaf":false}')});it("should return an array of records",function(){F=A.getTreeData();expect(Ext.isArray(F)).toBe(true)});it("should return 3 records",function(){F=A.getTreeData();expect(F.length).toBe(3)});it("should have the correct root level nodes",function(){F=A.getTreeData();expect(F[0].get("name")).toEqual("Phil");expect(F[1].get("name")).toEqual("Don");expect(F[2].get("name")).toEqual("Brian")});it("should call getRecord with each record id",function(){spyOn(A,"getRecord").andCallThrough();A.getTreeData();expect(A.getRecord).toHaveBeenCalledWith(1);expect(A.getRecord).toHaveBeenCalledWith(2);expect(A.getRecord).toHaveBeenCalledWith(3);expect(A.getRecord).toHaveBeenCalledWith(4);expect(A.getRecord).toHaveBeenCalledWith(5);expect(A.getRecord).toHaveBeenCalledWith(6)});it("should convert the records into a heirarchical structure",function(){F=A.getTreeData();expect(F[1].data.children[0].name).toEqual("Evan");expect(F[1].data.children[1].name).toEqual("Nige");expect(F[1].data.children[1].children[0].name).toEqual("Thomas")});it("should cache the records",function(){A.getTreeData();expect(A.cache[1].name).toEqual("Phil");expect(A.cache[2].name).toEqual("Don");expect(A.cache[3].name).toEqual("Evan");expect(A.cache[4].name).toEqual("Nige");expect(A.cache[5].name).toEqual("Thomas");expect(A.cache[6].name).toEqual("Brian")});it("should set loaded to true on non-leaf nodes that have no children",function(){expect(F[2].isLoaded()).toBe(true);expect(F[1].data.children[1].children[0].loaded).toBe(true)})})});describe("clearing",function(){beforeEach(function(){A=new spec.Storage({model:spec.User,id:"clear-test"});C.setItem("clear-test","1,2,3");C.setItem("clear-test-tree",true);C.setItem("clear-test-counter","6");C.setItem("clear-test-1",'{"name":"Phil"}');C.setItem("clear-test-2",'{"name":"Thomas"}');C.setItem("clear-test-3",'{"name":"Don"}');A.clear()});it("should remove all the records",function(){expect(C.getItem("clear-test-1")).toBeNull();expect(C.getItem("clear-test-2")).toBeNull();expect(C.getItem("clear-test-3")).toBeNull()});it("should remove the record counter",function(){expect(C.getItem("clear-test-counter")).toBeNull()});it("should remove the tree flag",function(){expect(C.getItem("clear-test-tree")).toBeNull()});it("should remove the ids",function(){expect(C.getItem("clear-test")).toBeNull()});it("should clear the cache",function(){expect(A.cache).toEqual({})})})});