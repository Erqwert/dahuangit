describe("Ext.event.ListenerStack",function(){describe("members",function(){var A,D,C,B;beforeEach(function(){A=new Ext.event.ListenerStack();D=function(){},C=null,B={}});describe("count()",function(){it("should always be 0 initially",function(){expect(A.count()).toBe(0)})});describe("add()",function(){it("adding listener should increase listeners count",function(){A.add(D,C,B);expect(A.count()).toBe(1)});it("listener at index 0 should be added properly",function(){A.add(D,C,B);var E=A.getAt(0);expect(E).toBeDefined();expect(E.fn).toBe(D);expect(E.scope).toBe(C);expect(E.options).toBe(B)});it("should NOT add listener again if one already exists with the same fn and scope, replace options instead",function(){var E={somethingNew:true};A.add(D,C,B);expect(A.count()).toBe(1);A.add(D,C,E);expect(A.count()).toBe(1);expect(A.getAt(0).options).toEqual(E)});it("should prepend listeners if options.prepend is true",function(){var E=function(){};A.add(E,C,{});A.add(D,C,{prepend:true});expect(A.getAt(0).fn).toBe(D);expect(A.getAt(1).fn).toBe(E)})});describe("remove()",function(){it("should remove listener if exists",function(){A.add(D,C,B);A.remove(D,C);expect(A.count()).toBe(0)});it("should NOT remove listener if not exists",function(){A.add(D,C,B);A.remove(function(){},C);A.remove(D,{});expect(A.count()).toBe(1)})})})});