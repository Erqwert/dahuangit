describe("Ext.data.validator.Inclusion",function(){var B;function A(D,C){B=new Ext.data.validator.Inclusion({list:C});return B.validate(D)}afterEach(function(){B=null});it("should throw an error when configured without a list",function(){expect(function(){B=new Ext.data.validator.Exclusion()}).toThrow()});describe("invalid values",function(){it("should not validate if the value is not in the list",function(){expect(A(5,[1,2,3,4])).toBe(B.getMessage())});it("should use strict type checking",function(){expect(A("3",[1,2,3,4])).toBe(B.getMessage())})});describe("valid values",function(){it("should validate if the value is in the list",function(){expect(A(3,[1,2,3,4])).toBe(true)})});describe("messages",function(){it("should accept a custom message",function(){B=new Ext.data.validator.Inclusion({message:"Foo",list:[]});expect(B.validate(undefined)).toBe("Foo")})});describe("runtime changes",function(){it("should be able to have a new list applied",function(){B=new Ext.data.validator.Inclusion({list:[1,2,3]});expect(B.validate(5)).toBe(B.getMessage());B.setList([3,4,5]);expect(B.validate(5)).toBe(true)})})});