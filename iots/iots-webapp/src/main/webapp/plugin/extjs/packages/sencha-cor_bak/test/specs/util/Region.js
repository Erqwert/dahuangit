Ext.require("Ext.util.Region",function(){describe("Ext.util.Region",function(){var F,A,B,C,D,E;beforeEach(function(){A=Ext.create("Ext.util.Region",2,5,6,1);B=Ext.create("Ext.util.Region",1,6,3,4);C=Ext.create("Ext.util.Region",0,2,2,0);D=Ext.create("Ext.util.Region",3,4,5,2);E=Ext.create("Ext.util.Region",7,3,9,1)});describe("contains",function(){describe("form region 1 point of view",function(){it("should not contain region 2",function(){expect(A.contains(B)).toBe(false)});it("should not contain region 3",function(){expect(A.contains(C)).toBe(false)});it("should contain region 4",function(){expect(A.contains(D)).toBe(true)});it("should not contain region 5",function(){expect(A.contains(E)).toBe(false)})})});describe("intersect",function(){describe("form region 1 point of view",function(){describe("between region 1 and 2",function(){beforeEach(function(){F=A.intersect(B)});it("should not return false",function(){expect(F).not.toBe(false)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 4",function(){expect(F.left).toEqual(4)});it("should return a region with bottom property equal to 3",function(){expect(F.bottom).toEqual(3)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 2 and 1",function(){beforeEach(function(){F=B.intersect(A)});it("should not return false",function(){expect(F).not.toBe(false)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 4",function(){expect(F.left).toEqual(4)});it("should return a region with bottom property equal to 3",function(){expect(F.bottom).toEqual(3)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 1 and 3",function(){it("should have no intersection",function(){expect(A.intersect(C)).toBe(false)})});describe("between region 3 and 1",function(){it("should have no intersection1",function(){expect(C.intersect(A)).toBe(false)})});describe("between region 1 and 4",function(){beforeEach(function(){F=A.intersect(D)});it("should not return false",function(){expect(F).not.toBe(false)});it("should return a region with top property equal to 3",function(){expect(F.top).toEqual(3)});it("should return a region with left property equal to 2",function(){expect(F.left).toEqual(2)});it("should return a region with bottom property equal to 5",function(){expect(F.bottom).toEqual(5)});it("should return a region with right property equal to 4",function(){expect(F.right).toEqual(4)})});describe("between region 4 and 1",function(){beforeEach(function(){F=D.intersect(A)});it("should not return false",function(){expect(F).not.toBe(false)});it("should return a region with top property equal to 3",function(){expect(F.top).toEqual(3)});it("should return a region with left property equal to 2",function(){expect(F.left).toEqual(2)});it("should return a region with bottom property equal to 5",function(){expect(F.bottom).toEqual(5)});it("should return a region with right property equal to 4",function(){expect(F.right).toEqual(4)})});describe("between region 1 and 5",function(){it("should have no intersection",function(){expect(A.intersect(E)).toBe(false)})});describe("between region 5 and 1",function(){it("should have no intersection",function(){expect(E.intersect(A)).toBe(false)})})})});describe("union",function(){describe("form region 1 point of view",function(){describe("between region 1 and 2",function(){beforeEach(function(){F=A.union(B)});it("should return a region with top property equal to 1",function(){expect(F.top).toEqual(1)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 6",function(){expect(F.right).toEqual(6)})});describe("between region 2 and 1",function(){beforeEach(function(){F=B.union(A)});it("should return a region with top property equal to 1",function(){expect(F.top).toEqual(1)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 6",function(){expect(F.right).toEqual(6)})});describe("between region 1 and 3",function(){beforeEach(function(){F=A.union(C)});it("should return a region with top property equal to 0",function(){expect(F.top).toEqual(0)});it("should return a region with left property equal to 0",function(){expect(F.left).toEqual(0)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 3 and 1",function(){beforeEach(function(){F=C.union(A)});it("should return a region with top property equal to 0",function(){expect(F.top).toEqual(0)});it("should return a region with left property equal to 0",function(){expect(F.left).toEqual(0)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 1 and 4",function(){beforeEach(function(){F=A.union(D)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 4 and 1",function(){beforeEach(function(){F=D.union(A)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 6",function(){expect(F.bottom).toEqual(6)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 1 and 5",function(){beforeEach(function(){F=A.union(E)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 9",function(){expect(F.bottom).toEqual(9)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})});describe("between region 5 and 1",function(){beforeEach(function(){F=E.union(A)});it("should return a region with top property equal to 2",function(){expect(F.top).toEqual(2)});it("should return a region with left property equal to 1",function(){expect(F.left).toEqual(1)});it("should return a region with bottom property equal to 9",function(){expect(F.bottom).toEqual(9)});it("should return a region with right property equal to 5",function(){expect(F.right).toEqual(5)})})})});describe("constrainTo",function(){describe("form region 1 point of view",function(){describe("between region 1 and 2",function(){beforeEach(function(){A.constrainTo(B)});it("should set region 1 top property equal to 2",function(){expect(A.top).toEqual(2)});it("should set region 1 left property equal to 4",function(){expect(A.left).toEqual(4)});it("should set region 1 bottom property equal to 3",function(){expect(A.bottom).toEqual(3)});it("should set region 1 right property equal to 5",function(){expect(A.right).toEqual(5)})});describe("between region 1 and 3",function(){beforeEach(function(){A.constrainTo(C)});it("should set region 1 top property equal to 2",function(){expect(A.top).toEqual(2)});it("should set region 1 left property equal to 1",function(){expect(A.left).toEqual(1)});it("should set region 1 bottom property equal to 2",function(){expect(A.bottom).toEqual(2)});it("should set region 1 right property equal to 2",function(){expect(A.right).toEqual(2)})});describe("between region 1 and 4",function(){beforeEach(function(){A.constrainTo(D)});it("should set region 1 top property equal to 3",function(){expect(A.top).toEqual(3)});it("should set region 1 left property equal to 2",function(){expect(A.left).toEqual(2)});it("should set region 1 bottom property equal to 5",function(){expect(A.bottom).toEqual(5)});it("should set region 1 right property equal to 4",function(){expect(A.right).toEqual(4)})});describe("between region 1 and 5",function(){beforeEach(function(){A.constrainTo(E)});it("should set region 1 top property equal to 7",function(){expect(A.top).toEqual(7)});it("should set region 1 left property equal to 1",function(){expect(A.left).toEqual(1)});it("should set region 1 bottom property equal to 7",function(){expect(A.bottom).toEqual(7)});it("should set region 1 right property equal to 3",function(){expect(A.right).toEqual(3)})})})});describe("adjust",function(){describe("modify the current region to be adjusted by offset",function(){beforeEach(function(){A.adjust(1,2,3,4)});it("should set region 1 top property equal to 3",function(){expect(A.top).toEqual(3)});it("should set region 1 left property equal to 5",function(){expect(A.left).toEqual(5)});it("should set region 1 bottom property equal to 9",function(){expect(A.bottom).toEqual(9)});it("should set region 1 right property equal to 7",function(){expect(A.right).toEqual(7)})})})})});