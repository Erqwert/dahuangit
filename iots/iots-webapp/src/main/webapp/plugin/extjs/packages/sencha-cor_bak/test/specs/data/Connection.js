describe("Ext.data.Connection",function(){var A,C,B;beforeEach(function(){MockAjaxManager.addMethods();A=function(D){D=D||{};C=new Ext.data.Connection(D)}});afterEach(function(){MockAjaxManager.removeMethods();B=C=A=null});describe("beforerequest",function(){it("should fire a beforerequest event",function(){A();var D={fn:Ext.emptyFn},E={url:"foo"};spyOn(D,"fn");C.on("beforerequest",D.fn);C.request(E);expect(D.fn).toHaveBeenCalled()});it("should abort the request if false is returned",function(){A();C.on("beforerequest",function(){return false});B=C.request({url:"foo"});expect(B).toBeNull()});it("should fire the callback with scope even if we abort",function(){A();var D={fn:function(){F=this}},E,F;spyOn(D,"fn").andCallThrough();E={url:"foo",callback:D.fn,scope:D};C.on("beforerequest",function(){return false});C.request(E);expect(D.fn).toHaveBeenCalledWith(E,undefined,undefined);expect(F).toEqual(D)})});describe("method",function(){it("should always use POST if specified in the options",function(){A();B=C.request({url:"foo",method:"POST"});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should always use GET if specified in the options",function(){A();B=C.request({url:"foo",method:"GET"});expect(B.xhr.ajaxOptions.method).toEqual("GET")});it("should use the class default if specified",function(){A({method:"POST"});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify jsonData",function(){A();B=C.request({url:"foo",jsonData:"json"});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify xmlData",function(){A();B=C.request({url:"foo",xmlData:"xml"});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify rawData",function(){A();B=C.request({url:"foo",rawData:"raw"});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify params",function(){A();B=C.request({url:"foo",params:{foo:"bar"}});expect(B.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify extraParams",function(){A({extraParams:{foo:"bar"}});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.method).toEqual("POST")})});describe("url",function(){it("should throw an exception if no url is specified",function(){A();expect(function(){C.request()}).toRaiseExtError("No URL specified")});it("should use the url specified in the config",function(){A();B=C.request({disableCaching:false,url:"foo"});expect(B.xhr.ajaxOptions.url).toEqual("foo")});it("should default to the connection url if one isn't specified in the config",function(){A({url:"bar"});B=C.request({disableCaching:false});expect(B.xhr.ajaxOptions.url).toEqual("bar")});it("should put any urlParams in the url",function(){A();B=C.request({disableCaching:false,url:"foo",urlParams:{x:1,y:"a"}});expect(B.xhr.ajaxOptions.url).toEqual("foo?x=1&y=a")});it("should put params in the url if we specify method GET",function(){A();B=C.request({disableCaching:false,url:"foo",params:{x:"a",y:"b"},method:"GET"});expect(B.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have jsonData",function(){A();B=C.request({disableCaching:false,url:"foo",jsonData:"asdf",params:{x:"a",y:"b"}});expect(B.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have xmlData",function(){A();B=C.request({disableCaching:false,url:"foo",xmlData:"xml",params:{x:"a",y:"b"}});expect(B.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have rawData",function(){A();B=C.request({disableCaching:false,url:"foo",rawData:"asdf",params:{x:"a",y:"b"}});expect(B.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should allow for a function to be passed",function(){A();B=C.request({disableCaching:false,url:function(){return"foo"}});expect(B.xhr.ajaxOptions.url).toEqual("foo")});it("should use the passed scope and should have the options passed",function(){A();var D={},E={url:function(){F=this;return"foo;"},scope:D,disableCaching:false},F;spyOn(E,"url").andCallThrough();C.request(E);expect(E.url).toHaveBeenCalledWith(E);expect(F).toEqual(D)})});describe("caching",function(){it("should disable caching by default",function(){A();B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.url).toMatch(/foo\?_dc=\d+/)});it("should only include caching when the method is GET",function(){A();B=C.request({url:"foo",method:"POST"});expect(B.xhr.ajaxOptions.url).toEqual("foo")});it("should not include caching if set to false",function(){A();B=C.request({url:"foo",disableCaching:false});expect(B.xhr.ajaxOptions.url).toEqual("foo")});it("should use the default caching if not specified",function(){A({disableCaching:false});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.url).toEqual("foo")});it("should respect the cache param name",function(){A();B=C.request({url:"foo",disableCachingParam:"_bar"});expect(B.xhr.ajaxOptions.url).toMatch(/foo\?_bar=\d+/)});it("should use the default cache param name if not specified",function(){A({disableCachingParam:"_bar"});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.url).toMatch(/foo\?_bar=\d+/)})});describe("params",function(){describe("urlParams",function(){it("should add urlParams to the url",function(){A();B=C.request({url:"foo",disableCaching:false,urlParams:"a=b&x=y"});expect(B.xhr.ajaxOptions.url).toEqual("foo?a=b&x=y")});it("should encode any non-primitive value",function(){A();B=C.request({url:"foo",disableCaching:false,urlParams:{a:"b",x:"y"}});expect(B.xhr.ajaxOptions.url).toEqual("foo?a=b&x=y")})});describe("params",function(){it("should pass params to the request",function(){A();B=C.request({url:"foo",params:"foo=bar"});expect(B.xhr.ajaxOptions.data).toEqual("foo=bar")});it("should encode any non primitive value",function(){A();B=C.request({url:"foo",params:{a:"b",x:"y"}});expect(B.xhr.ajaxOptions.data).toEqual("a=b&x=y")});it("should allow a function to be passed",function(){A();B=C.request({url:"foo",params:function(){return"x=y"}});expect(B.xhr.ajaxOptions.data).toEqual("x=y")});it("should use the passed scope and should have the options passed",function(){A();var D={},E={url:"foo",params:function(){F=this;return"foo;"},scope:D},F;spyOn(E,"params").andCallThrough();C.request(E);expect(E.params).toHaveBeenCalledWith(E);expect(F).toEqual(D)})});describe("extraParams",function(){it("should get appended to the params",function(){A({extraParams:{x:"y"}});B=C.request({url:"foo",params:"a=b"});expect(B.xhr.ajaxOptions.data).toEqual("a=b&x=y")});it("should get appended even if we have no params",function(){A({extraParams:{x:"y"}});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.data).toEqual("x=y")})})});describe("data",function(){it("should use rawData",function(){A();B=C.request({url:"foo",rawData:"raw"});expect(B.xhr.ajaxOptions.data).toEqual("raw")});it("should give rawData precedence",function(){A();B=C.request({url:"foo",rawData:"raw",jsonData:"json"});expect(B.xhr.ajaxOptions.data).toEqual("raw")});it("should use jsonData",function(){A();B=C.request({url:"foo",jsonData:"json"});expect(B.xhr.ajaxOptions.data).toEqual("json")});it("should encode non-primitive json",function(){A();B=C.request({url:"foo",jsonData:{x:"y"}});expect(B.xhr.ajaxOptions.data).toEqual('{"x":"y"}')});it("should use xmlData",function(){A();B=C.request({url:"foo",xmlData:"xml"});expect(B.xhr.ajaxOptions.data).toEqual("xml")});it("should have data take precedence over params",function(){A();B=C.request({url:"foo",rawData:"data",params:"x=y"});expect(B.xhr.ajaxOptions.data).toEqual("data")})});describe("username/password",function(){it("should not send if there is no username",function(){A();B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.username).toBeUndefined();expect(B.xhr.ajaxOptions.password).toBeUndefined()});it("should pass the username/password",function(){A();B=C.request({url:"foo",username:"evan",password:"javascript"});expect(B.xhr.ajaxOptions.username).toEqual("evan");expect(B.xhr.ajaxOptions.password).toEqual("javascript")});it("should default to username/password specified on the object",function(){A({username:"evan",password:"javascript"});B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.username).toEqual("evan");expect(B.xhr.ajaxOptions.password).toEqual("javascript")})});describe("async",function(){it("should default to true",function(){A();B=C.request({url:"foo"});expect(B.xhr.ajaxOptions.async).toBeTruthy()});it("should use whatever is specified in the options",function(){A();var D=C.request({url:"foo",async:false});expect(D.request.async).toBeFalsy()});it("should give precedence to the value in the options",function(){A({async:false});B=C.request({url:"foo",async:true});expect(B.xhr.ajaxOptions.async).toBeTruthy()});it("should fall back on the instance default",function(){A({async:false});var D=C.request({url:"foo"});expect(D.request.async).toBeFalsy()})});describe("headers",function(){describe("defaultXhrHeader",function(){it("should use the defaultXhrHeader by default",function(){A();B=C.request({url:"foo"});expect(B.xhr.headers["X-Requested-With"]).toEqual("XMLHttpRequest")});it("should not attach the default header if set to false",function(){A({useDefaultXhrHeader:false});B=C.request({url:"foo"});expect(B.xhr.headers["X-Requested-With"]).toBeUndefined()});it("should not attach the default header if explicitly specified in the headers",function(){A();B=C.request({url:"foo",headers:{"X-Requested-With":"header"}});expect(B.xhr.headers["X-Requested-With"]).toEqual("header")});it("should use the defaultXhrHeader option",function(){A({defaultXhrHeader:"bar"});B=C.request({url:"foo"});expect(B.xhr.headers["X-Requested-With"]).toEqual("bar")})});describe("content type",function(){it("should use the content type if explicitly specified",function(){A();B=C.request({url:"foo",headers:{"Content-Type":"type"}});expect(B.xhr.headers["Content-Type"]).toEqual("type")});it("should not set the content type if we have no data/params",function(){A();B=C.request({url:"foo"});expect(B.xhr.headers["Content-Type"]).toBeUndefined()});it("should not set the content type if we explicitly set null",function(){A();B=C.request({url:"foo",rawData:"raw",headers:{"Content-Type":null}});expect(B.xhr.headers["Content-Type"]).toBeUndefined()});it("should not set the content type if we explicitly set undefined",function(){A();B=C.request({url:"foo",rawData:"raw",headers:{"Content-Type":undefined}});expect(B.xhr.headers["Content-Type"]).toBeUndefined()});it("should use text/plain if we have rawData",function(){A();B=C.request({url:"foo",rawData:"raw"});expect(B.xhr.headers["Content-Type"]).toEqual("text/plain")});it("should use text/xml if we have xmlData",function(){A();B=C.request({url:"foo",xmlData:"xml"});expect(B.xhr.headers["Content-Type"]).toEqual("text/xml")});it("should use application/json if we have jsonData",function(){A();B=C.request({url:"foo",jsonData:"json"});expect(B.xhr.headers["Content-Type"]).toEqual("application/json")});it("should use the default content type if we have params and no data",function(){A();B=C.request({url:"foo",params:"x=y"});expect(B.xhr.headers["Content-Type"]).toEqual("application/x-www-form-urlencoded; charset=UTF-8")});it("should use the defaultPostHeader",function(){A({defaultPostHeader:"header"});B=C.request({url:"foo",params:"x=y"});expect(B.xhr.headers["Content-Type"]).toEqual("header")})});describe("normal headers",function(){beforeEach(function(){A({useDefaultXhrHeader:false})});it("should apply no headers if none are passed",function(){B=C.request({url:"foo"});expect(B.xhr.headers).toEqual({})});it("should apply any headers",function(){B=C.request({url:"foo",headers:{a:"a",b:"b"}});expect(B.xhr.headers.a).toEqual("a");expect(B.xhr.headers.b).toEqual("b")})});describe("defaultHeaders",function(){beforeEach(function(){A({useDefaultXhrHeader:false,defaultHeaders:{a:"a",b:"b"}})});it("should apply any defaultHeaders even if no headers are passed",function(){B=C.request({url:"foo"});expect(B.xhr.headers.a).toEqual("a");expect(B.xhr.headers.b).toEqual("b")});it("should always have headers take precedence",function(){B=C.request({url:"foo",headers:{a:"x",b:"y"}});expect(B.xhr.headers.a).toEqual("x");expect(B.xhr.headers.b).toEqual("y")});it("should combine headers/defaults",function(){B=C.request({url:"foo",headers:{x:"x",y:"y"}});expect(B.xhr.headers.a).toEqual("a");expect(B.xhr.headers.b).toEqual("b");expect(B.xhr.headers.x).toEqual("x");expect(B.xhr.headers.y).toEqual("y")})})});describe("isLoading",function(){it("should return false if no requests have been made",function(){A();expect(C.isLoading()).toBe(false)});it("should use the most recent request if one is not passed",function(){A();C.request({url:"foo"});expect(C.isLoading()).toBe(true)});it("should return false if the most recent request has loaded",function(){A();B=C.request({url:"foo"});C.mockComplete({status:200});expect(C.isLoading()).toBe(false)});it("should return true if the request is loading",function(){A();B=C.request({url:"foo"});expect(C.isLoading(B)).toBe(true)});it("should return false if the request has loaded",function(){A();B=C.request({url:"foo"});C.mockComplete({status:200});expect(C.isLoading(B)).toBe(false)});it("should return false if the request has been aborted",function(){A();B=C.request({url:"foo"});C.abort(B);expect(C.isLoading(B)).toBe(false)})});describe("aborting",function(){it("should abort a specific request",function(){A();B=C.request({url:"foo"});C.abort(B);expect(B.aborted).toBe(true)});it("should abort the most recent request if a specific one isn't specified",function(){A();var D=C.request({url:"r1"});var E=C.request({url:"r2"});C.abort();expect(D.aborted).not.toBe(true);expect(E.aborted).toBe(true)});it("should fire failure/callback",function(){A();var D={fn:Ext.emptyFn},E=spyOn(D,"fn");B=C.request({url:"foo",failure:D.fn,callback:D.fn});C.abort(B);expect(E.callCount).toEqual(2)});it("should set options in the response",function(){var F,D,E={fn:function(G){F=G.status;D=G.statusText}};A();B=C.request({url:"foo",failure:E.fn});C.abort(B);expect(F).toEqual(-1);expect(D).toEqual("transaction aborted")});it("should fire the requestexception event when aborted",function(){var D=jasmine.createSpy("request aborted");A();C.on("requestexception",D);B=C.request({url:"foo"});C.abort(B);expect(D).toHaveBeenCalled()})});describe("abortAll",function(){it("should do nothing if there's no active requests",function(){A();B=C.request({url:"foo"});C.mockComplete({status:200});C.abortAll();expect(B.aborted).toBeFalsy()});it("should abort all active requests",function(){A();var D=C.request({url:"r1"});var E=C.request({url:"r2"});C.abortAll();expect(D.aborted).toBe(true);expect(E.aborted).toBe(true)})});describe("timeout",function(){it("should timeout if the request runs longer than the timeout period",function(){A();B=C.request({url:"foo",timeout:1});waitsFor(function(){return B.timedout===true},"timeout never reached")});it("should not fire the timeout if the request succeeds within the period",function(){var D=jasmine.createSpy("request failure");runs(function(){A();B=C.request({url:"foo",timeout:1,failure:D});B.xhr.complete({status:200})});waits(1);runs(function(){expect(D).not.toHaveBeenCalled()})});it("should fire failure/callback",function(){var D=jasmine.createSpy("failure and callback");A();B=C.request({url:"foo",timeout:1,failure:D,callback:D});waitsFor(function(){return D.callCount===2},"fn was never called")});it("should set the options on the response",function(){var F,D,E=function(G){F=G.status;D=G.statusText};A();B=C.request({url:"foo",timeout:1,failure:E});waitsFor(function(){return F===0&&D==="communication failure"},"options in response wasn't set")});it("should fire the requestexception event when timed out",function(){var D=jasmine.createSpy("request timed out");A();C.on("requestexception",D);B=C.request({url:"foo",timeout:1});waits(10);runs(function(){expect(D).toHaveBeenCalled()})})});describe("successful requests",function(){it("should fire the success handler on a successful request",function(){A();var D={fn:function(){E=this}},E;spyOn(D,"fn").andCallThrough();B=C.request({url:"foo",success:D.fn,scope:D});C.mockComplete({status:200});expect(D.fn).toHaveBeenCalled();expect(E).toEqual(D)});it("should fire the callback",function(){A();var D={fn:function(){E=this}},E;spyOn(D,"fn").andCallThrough();B=C.request({url:"foo",callback:D.fn,scope:D});C.mockComplete({status:200});expect(D.fn).toHaveBeenCalled();expect(E).toEqual(D)});it("should fire the requestcomplete event",function(){A();var D={fn:Ext.emptyFn},E;spyOn(D,"fn");C.on("requestcomplete",D.fn);B=C.request({url:"foo",callback:D.fn,scope:D});C.mockComplete({status:200});expect(D.fn).toHaveBeenCalled()});it("should copy properties to response",function(){var D={};A();B=C.request({url:"foo",success:function(E){D.statusText=E.statusText;D.status=E.status;D.responseText=E.responseText;D.responseXML=E.responseXML}});C.mockComplete({status:200,statusText:"statusText",responseText:"response",responseXML:{}});expect(D.statusText).toEqual("statusText");expect(D.status).toEqual(200);expect(D.responseText).toEqual("response");expect(D.responseXML).toEqual({})});it("should not fire the requestexception event",function(){var D=jasmine.createSpy("request successful");A();C.on("requestexception",D);B=C.request({url:"foo"});C.mockComplete({status:200});expect(D).not.toHaveBeenCalled()})});describe("failures",function(){it("should fire the failure handler on a failed request",function(){A();var D={fn:function(){E=this}},E;spyOn(D,"fn").andCallThrough();B=C.request({url:"foo",failure:D.fn,scope:D});C.mockComplete({status:404});expect(D.fn).toHaveBeenCalled();expect(E).toEqual(D)});it("should fire the callback",function(){A();var D={fn:function(){E=this}},E;spyOn(D,"fn").andCallThrough();B=C.request({url:"foo",callback:D.fn,scope:D});C.mockComplete({status:404});expect(D.fn).toHaveBeenCalled();expect(E).toEqual(D)});it("should fire the requestexception event",function(){A();var D={fn:Ext.emptyFn},E;spyOn(D,"fn");C.on("requestexception",D.fn);B=C.request({url:"foo",callback:D.fn,scope:D});C.mockComplete({status:404});expect(D.fn).toHaveBeenCalled()})});describe("synchronous requests",function(){it("should return the response object",function(){A({async:false});var D=C.request({url:"foo"}),E=MockAjax.prototype.syncDefaults;expect(D.responseText).toEqual(E.responseText);expect(D.status).toEqual(E.status);expect(D.statusText).toEqual(E.statusText)})});describe("binaryData",function(){var D=Ext.isChrome||(Ext.isSafari&&Ext.isDefined(window.Uint8Array))||(Ext.isGecko&&Ext.isDefined(window.Uint8Array));it("should create the correct XHR object depending on the browser",function(){A();B=C.request({url:"foo",binaryData:[0,1,2,3]});if(D){expect(B.xhr).not.toEqual(jasmine.any(Ext.data.flash.BinaryXhr))}else{expect(B.xhr).toEqual(jasmine.any(Ext.data.flash.BinaryXhr));Ext.data.flash.BinaryXhr.flashPolyfillEl.remove()}});if(D){it("should create a typed array",function(){A();B=C.request({url:"foo",binaryData:[0,1,2,3]});expect([jasmine.any(ArrayBuffer),jasmine.any(Uint8Array)]).toContain(B.xhr.ajaxOptions.data)})}})});