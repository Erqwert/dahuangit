describe("Ext.data.proxy.Rest",function(){var A;beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;A=new Ext.data.proxy.Rest({})});afterEach(function(){Ext.ClassManager.enableNamespaceParseCache=true});describe("instantiation",function(){it("should extend Ext.data.proxy.Ajax",function(){expect(A.superclass).toEqual(Ext.data.proxy.Ajax.prototype)});it("should have correct actionMethods",function(){var B={create:"POST",read:"GET",update:"PUT",destroy:"DELETE"};expect(A.getActionMethods()).toEqual(B)})});describe("building URLs",function(){var E,D,H,F,C;function B(I){return new Ext.data.proxy.Rest(Ext.apply({},I,{url:"/users"}))}function G(I){return I.split("?")[0]}beforeEach(function(){var I=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","email"]});C=new I({id:2,name:"Ed Spencer",email:"ed@sencha.com"});E=new Ext.data.operation.Read({records:[]});D=new Ext.data.operation.Read({records:[C]});H=new Ext.data.Request({operation:E,action:E.getAction()});F=new Ext.data.Request({operation:D})});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.User")});describe("if there are no records in the Operation",function(){it("should not fail",function(){E=new Ext.data.operation.Read({});H=new Ext.data.Request({operation:E,action:E.getAction()});A=B({appendId:false});expect(G(A.buildUrl(H))).toEqual("/users")})});describe("if appendId is false",function(){beforeEach(function(){A=B({appendId:false})});it("should not append the ID to a single Operation",function(){expect(G(A.buildUrl(H))).toEqual("/users")});it("should not append the ID to a collection Operation",function(){expect(G(A.buildUrl(F))).toEqual("/users")})});describe("if appendId is true",function(){beforeEach(function(){A=B({appendId:true})});it("should not append the ID to a collection Operation",function(){expect(G(A.buildUrl(H))).toBe("/users")});it("should append the ID to a single Operation",function(){expect(G(A.buildUrl(F))).toBe("/users/2")});it("should not append a phantom record",function(){C.setId("User-1");C.phantom=true;expect(G(A.buildUrl(F))).toBe("/users")});it("should append an id of 0",function(){C.setId(0);expect(G(A.buildUrl(F))).toBe("/users/0")});it("should not append an empty string",function(){C.setId("");expect(G(A.buildUrl(F))).toBe("/users")});it("should not append null",function(){C.setId(null);expect(G(A.buildUrl(F))).toBe("/users")});it("should not append undefined",function(){C.setId(undefined);expect(G(A.buildUrl(F))).toBe("/users")});it("should not have id=foo in the params",function(){var I=A.buildUrl(F);expect(I.indexOf("id=2")).toBe(-1)})});describe("if format is undefined",function(){beforeEach(function(){A=B({appendId:false,format:undefined})});it("should not append the format to a single Operation",function(){expect(G(A.buildUrl(H))).toEqual("/users")});it("should not append the format to a collection Operation",function(){expect(G(A.buildUrl(F))).toEqual("/users")})});describe("if a format is given",function(){beforeEach(function(){A=B({appendId:true,format:"json"})});it("should append the format to a single Operation",function(){expect(G(A.buildUrl(H))).toEqual("/users.json")});it("should append the format to a collection Operation",function(){expect(G(A.buildUrl(F))).toEqual("/users/2.json")})});it("should respect the api configuration",function(){A=B({api:{read:"/users1"}});expect(G(A.buildUrl(H))).toEqual("/users1")})})});